{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Babylon CLI","text":"<p>A simple CLI for interaction between Cosmotech Products and the cloud</p> <p></p>"},{"location":"cli/","title":"babylon","text":""},{"location":"cli/#babylon","title":"babylon","text":"<p>CLI used for cloud interactions between CosmoTech and multiple cloud environment</p> <p>The following environment variables are available to override the working directory or the configuration:</p> <ul> <li><code>BABYLON_CONFIG_DIRECTORY</code>: path to a folder to use as a configuration directory</li> <li><code>BABYLON_WORKING_DIRECTORY</code>: path to a folder to use as a working directory</li> </ul> <p>Usage:</p> <pre><code>babylon [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--verbosity</code>, <code>-v</code> text Either CRITICAL, ERROR, WARNING, INFO or DEBUG <code>INFO</code> <code>--bare</code>, <code>--raw</code>, <code>--tests</code> boolean Enable test mode, this mode changes output formatting. <code>False</code> <code>-n</code>, <code>--dry-run</code> boolean Will run commands in dry-run mode. <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code> <code>--version</code> boolean Print version number and return. <code>False</code> <p>Subcommands</p> <ul> <li>api: Group handling communication with the cosmotech API</li> <li>azure: Group allowing communication with Microsoft Azure Cloud</li> <li>config: Group made to work on the config</li> <li>debug: Add debug capacities of runs</li> <li>powerbi: Group handling communication with PowerBI API</li> <li>terraform-cloud: Group allowing interactions with the Terraform Cloud API</li> <li>working-dir: Command group handling working directory information</li> </ul>"},{"location":"cli/#babylon-api","title":"babylon api","text":"<p>Group handling communication with the cosmotech API</p> <p>Requires <code>api_url</code> in platform config file.</p> <p>Requires <code>api_scope</code> in platform config file.</p> <p>Usage:</p> <pre><code>babylon api [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>connector: Subgroup handling Connectors in the cosmotech API</li> <li>dataset: Subgroup handling Datasets in the cosmotech API</li> <li>organization: Subgroup handling Organizations in the cosmotech API</li> <li>solution: Subgroup handling Solution in the cosmotech API</li> <li>workspace: Subgroup handling Work in the cosmotech API</li> </ul>"},{"location":"cli/#babylon-api-connector","title":"babylon api connector","text":"<p>Subgroup handling Connectors in the cosmotech API</p> <p>Usage:</p> <pre><code>babylon api connector [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>create: Register a new Connector by sending a JSON or YAML file to the API.</li> <li>delete: Unregister a Connector via Cosmotech API.</li> <li>get: Get a registered connector details.</li> <li>get-all: Get all registered connectors.</li> <li>get-currents: Get a registered connector details.</li> </ul>"},{"location":"cli/#babylon-api-connector-create","title":"babylon api connector create","text":"<p>Register a new Connector by sending a JSON or YAML file to the API.</p> <p>Usage:</p> <pre><code>babylon api connector create [OPTIONS] CONNECTOR_NAME\n</code></pre> <p>Options:</p> Name Type Description Default <code>-i</code>, <code>--connector-file</code> text Your custom Connector description file path None <code>-t</code>, <code>--type</code> choice (<code>ADT</code> | <code>STORAGE</code>) Connector type, allowed values : [ADT, STORAGE] _required <code>-o</code>, <code>--output-file</code> path The path to the file where the new Connector content should be outputted (json-formatted) None <code>-e</code>, <code>--use-working-dir-file</code> boolean Should the Connector file path be relative to Babylon working directory ? <code>False</code> <code>-v</code>, <code>--version</code> text Version of the Connector _required <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-api-connector-delete","title":"babylon api connector delete","text":"<p>Unregister a Connector via Cosmotech API.</p> <p>Usage:</p> <pre><code>babylon api connector delete [OPTIONS] [CONNECTOR_ID]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-i</code>, <code>--connector-file</code> text In case the connector id is retrieved from a file None <code>-f</code>, <code>--force</code> boolean Don't ask for validation before delete <code>False</code> <code>-e</code>, <code>--use-working-dir-file</code> boolean Should the path be relative to the working directory ? <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-api-connector-get","title":"babylon api connector get","text":"<p>Get a registered connector details.</p> <p>Usage:</p> <pre><code>babylon api connector get [OPTIONS] CONNECTOR_ID\n</code></pre> <p>Options:</p> Name Type Description Default <code>-o</code>, <code>--output_file</code> path File to which content should be outputted (json-formatted) None <code>-f</code>, <code>--fields</code> text Fields witch will be keep in response data, by default all None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-api-connector-get-all","title":"babylon api connector get-all","text":"<p>Get all registered connectors.</p> <p>Usage:</p> <pre><code>babylon api connector get-all [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-o</code>, <code>--output_file</code> path The path to the file where Connectors should be outputted (json-formatted) None <code>-f</code>, <code>--fields</code> text Fields witch will be keep in response data, by default all None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-api-connector-get-currents","title":"babylon api connector get-currents","text":"<p>Get a registered connector details.</p> <p>Requires <code>storage_connector_id</code> in deploy config file.</p> <p>Requires <code>adt_connector_id</code> in deploy config file.</p> <p>Usage:</p> <pre><code>babylon api connector get-currents [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-o</code>, <code>--output_file</code> path The path to the file where Connectors should be outputted (json-formatted) None <code>-f</code>, <code>--fields</code> text Fields witch will be keep in response data, by default all None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-api-dataset","title":"babylon api dataset","text":"<p>Subgroup handling Datasets in the cosmotech API</p> <p>Usage:</p> <pre><code>babylon api dataset [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>create: Register new dataset by sending description file to the API.</li> <li>delete: Unregister a dataset via Cosmotech API.</li> <li>get: Get the state of the dataset in the API.</li> <li>get-all: Get all registered datasets.</li> <li>get-current: Get the state of the dataset in the API.</li> <li>update: Send a JSON or YAML file to the API to update a dataset.</li> </ul>"},{"location":"cli/#babylon-api-dataset-create","title":"babylon api dataset create","text":"<p>Register new dataset by sending description file to the API.</p> <p>Requires <code>organization_id</code> in deploy config file.</p> <p>Usage:</p> <pre><code>babylon api dataset create [OPTIONS] [DATASET_NAME]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-c</code>, <code>--connector-id</code> filetype N/A None <code>-e</code>, <code>--use-working-dir-file</code> boolean Should the path be relative to the working directory ? <code>False</code> <code>-i</code>, <code>--dataset-file</code> text Your custom dataset description file None <code>-d</code>, <code>--description</code> text New dataset description None <code>-o</code>, <code>--output-file</code> path File to which content should be outputted (json-formatted) None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-api-dataset-delete","title":"babylon api dataset delete","text":"<p>Unregister a dataset via Cosmotech API.</p> <p>Requires <code>organization_id</code> in deploy config file.</p> <p>Usage:</p> <pre><code>babylon api dataset delete [OPTIONS] [DATASET_ID]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-f</code>, <code>--force</code> boolean Don't ask for validation before delete <code>False</code> <code>-e</code>, <code>--use-working-dir-file</code> boolean Should the path be relative to the working directory ? <code>False</code> <code>-i</code>, <code>--dataset-file</code> text In case the dataset id is retrieved from a file None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-api-dataset-get","title":"babylon api dataset get","text":"<p>Get the state of the dataset in the API.</p> <p>Requires <code>organization_id</code> in deploy config file.</p> <p>Usage:</p> <pre><code>babylon api dataset get [OPTIONS] DATASET_ID\n</code></pre> <p>Options:</p> Name Type Description Default <code>-o</code>, <code>--output-file</code> path File to which content should be outputted (json-formatted) None <code>-f</code>, <code>--fields</code> text Fields witch will be keep in response data, by default all None <code>-e</code>, <code>--use-working-dir-file</code> boolean Should the path be relative to the working directory ? <code>False</code> <code>--from-file</code> boolean In case the dataset id is retrieved from a file <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-api-dataset-get-all","title":"babylon api dataset get-all","text":"<p>Get all registered datasets.</p> <p>Requires <code>organization_id</code> in deploy config file.</p> <p>Usage:</p> <pre><code>babylon api dataset get-all [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-o</code>, <code>--output-file</code> path File to which content should be outputted (json-formatted) None <code>-f</code>, <code>--fields</code> text Fields witch will be keep in response data, by default all None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-api-dataset-get-current","title":"babylon api dataset get-current","text":"<p>Get the state of the dataset in the API.</p> <p>Requires <code>organization_id</code> in deploy config file.</p> <p>Requires <code>dataset_id</code> in deploy config file.</p> <p>Usage:</p> <pre><code>babylon api dataset get-current [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-o</code>, <code>--output-file</code> path File to which content should be outputted (json-formatted) None <code>-f</code>, <code>--fields</code> text Fields witch will be keep in response data, by default all None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-api-dataset-update","title":"babylon api dataset update","text":"<p>Send a JSON or YAML file to the API to update a dataset.</p> <p>Requires <code>organization_id</code> in deploy config file.</p> <p>Usage:</p> <pre><code>babylon api dataset update [OPTIONS] DATASET_ID\n</code></pre> <p>Options:</p> Name Type Description Default <code>-c</code>, <code>--connector-id</code> filetype N/A None <code>-e</code>, <code>--use-working-dir-file</code> boolean Should the path be relative to the working directory ? <code>False</code> <code>-i</code>, <code>--dataset-file</code> text Your custom dataset description file None <code>-o</code>, <code>--output-file</code> path File to which content should be outputted (json-formatted) None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-api-organization","title":"babylon api organization","text":"<p>Subgroup handling Organizations in the cosmotech API</p> <p>Usage:</p> <pre><code>babylon api organization [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>create: Register new organization by sending a JSON or YAML file</li> <li>delete: Delete organization via Cosmotech APi.</li> <li>get: Get the state of an specific organization in the API.</li> <li>get-all: Get all registered organization.</li> <li>get-current: Get the state of the current organization in the API.</li> <li>update: Update an Organization by sending a JSON or YAML file to Cosmotech Api.</li> </ul>"},{"location":"cli/#babylon-api-organization-create","title":"babylon api organization create","text":"<p>Register new organization by sending a JSON or YAML file</p> <p>Usage:</p> <pre><code>babylon api organization create [OPTIONS] ORGANIZATION_NAME\n</code></pre> <p>Options:</p> Name Type Description Default <code>-i</code>, <code>--organization-file</code> text Your custom Organization description file path None <code>-s</code>, <code>--select</code> boolean Select this new Organization as one of babylon context Organizations ? <code>True</code> <code>-o</code>, <code>--output-file</code> path The path to the file where the new Organization content should be outputted (json-formatted) None <code>-e</code>, <code>--use-working-dir-file</code> boolean Should the Organization file path be relative to Babylon working directory ? <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-api-organization-delete","title":"babylon api organization delete","text":"<p>Delete organization via Cosmotech APi.</p> <p>Usage:</p> <pre><code>babylon api organization delete [OPTIONS] [ORGANIZATION_ID]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-i</code>, <code>--organization-file</code> text In case the organization id is retrieved from a file None <code>-f</code>, <code>--force</code> boolean Don't ask for validation before delete <code>False</code> <code>-e</code>, <code>--use-working-dir-file</code> boolean Should the path be relative to the working directory ? <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-api-organization-get","title":"babylon api organization get","text":"<p>Get the state of an specific organization in the API.</p> <p>Usage:</p> <pre><code>babylon api organization get [OPTIONS] ORGANIZATION_ID\n</code></pre> <p>Options:</p> Name Type Description Default <code>-o</code>, <code>--output-file</code> path The path to the file where the new Organization content should be outputted (json-formatted) None <code>-f</code>, <code>--fields</code> text Fields witch will be keep in response data, by default all None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-api-organization-get-all","title":"babylon api organization get-all","text":"<p>Get all registered organization.</p> <p>Usage:</p> <pre><code>babylon api organization get-all [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-o</code>, <code>--output-file</code> path The path to the file where the new Organization content should be outputted (json-formatted) None <code>-f</code>, <code>--fields</code> text Fields witch will be keep in response data, by default all None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-api-organization-get-current","title":"babylon api organization get-current","text":"<p>Get the state of the current organization in the API.</p> <p>Requires <code>organization_id</code> in deploy config file.</p> <p>Usage:</p> <pre><code>babylon api organization get-current [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-o</code>, <code>--output-file</code> path The path to the file where the new Organization content should be outputted (json-formatted) None <code>-f</code>, <code>--fields</code> text Fields witch will be keep in response data, by default all None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-api-organization-update","title":"babylon api organization update","text":"<p>Update an Organization by sending a JSON or YAML file to Cosmotech Api.</p> <p>Requires <code>organization_id</code> in deploy config file.</p> <p>Usage:</p> <pre><code>babylon api organization update [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-i</code>, <code>--organization-file</code> text Your new Organization description file path _required <code>-e</code>, <code>--use-working-dir-file</code> boolean Should the path be relative to the working directory ? <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-api-solution","title":"babylon api solution","text":"<p>Subgroup handling Solution in the cosmotech API</p> <p>Usage:</p> <pre><code>babylon api solution [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>create: Send a JSON or YAML file to the API to create an solution.</li> <li>delete: Unregister a solution via Cosmotech APi.</li> <li>get: Get the state of the solution in the API.</li> <li>get-all: Get all registered solutions.</li> <li>get-current: Get the state of the solution in the API.</li> <li>handler: Group allowing solution handler management</li> <li>update: Send a JSON or YAML file to the API to update a solution.</li> </ul>"},{"location":"cli/#babylon-api-solution-create","title":"babylon api solution create","text":"<p>Send a JSON or YAML file to the API to create an solution.</p> <p>Requires <code>organization_id</code> in deploy config file.</p> <p>Requires <code>simulator_version</code> in deploy config file.</p> <p>Requires <code>simulator_repository</code> in deploy config file.</p> <p>Usage:</p> <pre><code>babylon api solution create [OPTIONS] SOLUTION_NAME\n</code></pre> <p>Options:</p> Name Type Description Default <code>-e</code>, <code>--use-working-dir-file</code> boolean Should the path be relative to the working directory ? <code>False</code> <code>-i</code>, <code>--solution-file</code> text Your custom Solution description file path None <code>-d</code>, <code>--description</code> text New solution description None <code>-o</code>, <code>--output-file</code> path File to which content should be outputted (json-formatted) None <code>-s</code>, <code>--select</code> boolean Select this new Solution as babylon context solution ? <code>True</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-api-solution-delete","title":"babylon api solution delete","text":"<p>Unregister a solution via Cosmotech APi.</p> <p>Requires <code>organization_id</code> in deploy config file.</p> <p>Usage:</p> <pre><code>babylon api solution delete [OPTIONS] [SOLUTION_ID]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-f</code>, <code>--force</code> boolean Don't ask for validation before delete <code>False</code> <code>-e</code>, <code>--use-working-dir-file</code> boolean Should the path be relative to the working directory ? <code>False</code> <code>-i</code>, <code>--solution-file</code> text Your Solution description file path None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-api-solution-get","title":"babylon api solution get","text":"<p>Get the state of the solution in the API.</p> <p>Requires <code>organization_id</code> in deploy config file.</p> <p>Usage:</p> <pre><code>babylon api solution get [OPTIONS] [SOLUTION_ID]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-o</code>, <code>--output-file</code> path The path to the file where Connector details should be outputted (json-formatted) None <code>-i</code>, <code>--solution-file</code> text Your Solution description file path None <code>-f</code>, <code>--fields</code> text Fields witch will be keep in response data, by default all None <code>-e</code>, <code>--use-working-dir-file</code> boolean Should the path be relative to the working directory ? <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-api-solution-get-all","title":"babylon api solution get-all","text":"<p>Get all registered solutions.</p> <p>Requires <code>organization_id</code> in deploy config file.</p> <p>Usage:</p> <pre><code>babylon api solution get-all [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-o</code>, <code>--output-file</code> path The path to the file where Solutions should be outputted (json-formatted) None <code>-f</code>, <code>--fields</code> text Fields witch will be keep in response data, by default all None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-api-solution-get-current","title":"babylon api solution get-current","text":"<p>Get the state of the solution in the API.</p> <p>Requires <code>organization_id</code> in deploy config file.</p> <p>Requires <code>solution_id</code> in deploy config file.</p> <p>Usage:</p> <pre><code>babylon api solution get-current [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-o</code>, <code>--output-file</code> path The path to the file where Connector details should be outputted (json-formatted) None <code>-f</code>, <code>--fields</code> text Fields witch will be keep in response data, by default all None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-api-solution-handler","title":"babylon api solution handler","text":"<p>Group allowing solution handler management</p> <p>Usage:</p> <pre><code>babylon api solution handler [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>download: Download a solution handler zip.</li> <li>upload: Upload a solution handler zip.</li> </ul>"},{"location":"cli/#babylon-api-solution-handler-download","title":"babylon api solution handler download","text":"<p>Download a solution handler zip.</p> <p>Requires <code>solution_id</code> in deploy config file.</p> <p>Requires <code>organization_id</code> in deploy config file.</p> <p>Usage:</p> <pre><code>babylon api solution handler download [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-r</code>, <code>--run-template</code> text The run Template identifier _required <code>-t</code>, <code>--handler-type</code> choice (<code>parameters_handler</code> | <code>validator</code> | <code>prerun</code> | <code>engine</code> | <code>postrun</code> | <code>scenariodata_transform</code>) Handler type _required <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-api-solution-handler-upload","title":"babylon api solution handler upload","text":"<p>Upload a solution handler zip.</p> <p>Requires <code>solution_id</code> in deploy config file.</p> <p>Requires <code>organization_id</code> in deploy config file.</p> <p>Usage:</p> <pre><code>babylon api solution handler upload [OPTIONS] HANDLER_PATH\n</code></pre> <p>Options:</p> Name Type Description Default <code>-o</code>, <code>--override</code> boolean N/A <code>False</code> <code>-r</code>, <code>--run-template</code> text The run Template identifier _required <code>-t</code>, <code>--handler-type</code> choice (<code>parameters_handler</code> | <code>validator</code> | <code>prerun</code> | <code>engine</code> | <code>postrun</code> | <code>scenariodata_transform</code>) Handler type _required <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-api-solution-update","title":"babylon api solution update","text":"<p>Send a JSON or YAML file to the API to update a solution.</p> <p>Requires <code>solution_id</code> in deploy config file.</p> <p>Requires <code>organization_id</code> in deploy config file.</p> <p>Requires <code>simulator_repository</code> in deploy config file.</p> <p>Requires <code>simulator_version</code> in deploy config file.</p> <p>Usage:</p> <pre><code>babylon api solution update [OPTIONS] [SOLUTION_ID]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-e</code>, <code>--use-working-dir-file</code> boolean Should the path be relative to the working directory ? <code>False</code> <code>-i</code>, <code>--solution-file</code> text Your custom Solution description file path None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-api-workspace","title":"babylon api workspace","text":"<p>Subgroup handling Work in the cosmotech API</p> <p>Usage:</p> <pre><code>babylon api workspace [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>create: Send a JSON or YAML file to the API to create a workspace.</li> <li>delete: Unregister a workspace via Cosmotech APi.</li> <li>get: Get the state of the workspace in the API.</li> <li>get-all: Get all registered workspaces.</li> <li>get-current: Get the state of the workspace in the API.</li> <li>update: Send a JSON or YAML file to the API to update a workspace.</li> </ul>"},{"location":"cli/#babylon-api-workspace-create","title":"babylon api workspace create","text":"<p>Send a JSON or YAML file to the API to create a workspace.</p> <p>Requires <code>solution_id</code> in deploy config file.</p> <p>Requires <code>organization_id</code> in deploy config file.</p> <p>Requires <code>use_dedicated_event_hub_namespace</code> in deploy config file.</p> <p>Requires <code>send_scenario_metadata_to_event_hub</code> in deploy config file.</p> <p>Usage:</p> <pre><code>babylon api workspace create [OPTIONS] WORKSPACE_NAME\n</code></pre> <p>Options:</p> Name Type Description Default <code>-e</code>, <code>--use-working-dir-file</code> boolean Should the path be relative to the working directory ? <code>False</code> <code>-i</code>, <code>--workspace-file</code> text Your custom workspace definition file path None <code>-d</code>, <code>--description</code> text Workspace description None <code>-o</code>, <code>--output-file</code> path The path to the file where the created workspace should be outputted (json-formatted) None <code>-s</code>, <code>--select</code> boolean Select this new Workspace as babylon context workspace ? <code>True</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-api-workspace-delete","title":"babylon api workspace delete","text":"<p>Unregister a workspace via Cosmotech APi.</p> <p>Requires <code>organization_id</code> in deploy config file.</p> <p>Usage:</p> <pre><code>babylon api workspace delete [OPTIONS] [WORKSPACE_ID]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-f</code>, <code>--force</code> boolean Don't ask for validation before delete <code>False</code> <code>-e</code>, <code>--use-working-dir-file</code> boolean Should the path be relative to the working directory ? <code>False</code> <code>-i</code>, <code>--workspace-file</code> text In case the workspace id is retrieved from a file None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-api-workspace-get","title":"babylon api workspace get","text":"<p>Get the state of the workspace in the API.</p> <p>Requires <code>organization_id</code> in deploy config file.</p> <p>Usage:</p> <pre><code>babylon api workspace get [OPTIONS] [WORKSPACE_ID]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-o</code>, <code>--output-file</code> path The path to the file where Workspace details should be outputted (json-formatted) None <code>-f</code>, <code>--fields</code> text Fields witch will be keep in response data, by default all None <code>-e</code>, <code>--use-working-dir-file</code> boolean Should the path be relative to the working directory ? <code>False</code> <code>-i</code>, <code>--workspace-file</code> text In case the workspace id is retrieved from a file None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-api-workspace-get-all","title":"babylon api workspace get-all","text":"<p>Get all registered workspaces.</p> <p>Requires <code>organization_id</code> in deploy config file.</p> <p>Usage:</p> <pre><code>babylon api workspace get-all [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-o</code>, <code>--output-file</code> path The path to the file where Workspaces should be outputted (json-formatted) None <code>-f</code>, <code>--fields</code> text Fields witch will be keep in response data, by default all None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-api-workspace-get-current","title":"babylon api workspace get-current","text":"<p>Get the state of the workspace in the API.</p> <p>Requires <code>organization_id</code> in deploy config file.</p> <p>Requires <code>workspace_id</code> in deploy config file.</p> <p>Usage:</p> <pre><code>babylon api workspace get-current [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-o</code>, <code>--output-file</code> path The path to the file where Workspace details should be outputted (json-formatted) None <code>-f</code>, <code>--fields</code> text Fields witch will be keep in response data, by default all None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-api-workspace-update","title":"babylon api workspace update","text":"<p>Send a JSON or YAML file to the API to update a workspace.</p> <p>Requires <code>solution_id</code> in deploy config file.</p> <p>Requires <code>organization_id</code> in deploy config file.</p> <p>Requires <code>use_dedicated_event_hub_namespace</code> in deploy config file.</p> <p>Requires <code>use_dedicated_event_hub_namespace</code> in deploy config file.</p> <p>Usage:</p> <pre><code>babylon api workspace update [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-i</code>, <code>--workspace-file</code> text In case the workspace id is retrieved from a file None <code>-o</code>, <code>--output-file</code> path The path to the file where new Workspace details should be outputted (json-formatted) None <code>-e</code>, <code>--use-working-dir-file</code> boolean Should the path be relative to the working directory ? <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-azure","title":"babylon azure","text":"<p>Group allowing communication with Microsoft Azure Cloud</p> <p>Requires the program <code>az</code> to run.</p> <p>Usage:</p> <pre><code>babylon azure [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>acr: Group interacting with Azure Container Registry</li> <li>adt: Allow communication with Azure Digital Twin</li> <li>adx: Group interacting with Azure Data Explorer</li> <li>arm: Group interacting with Azure Resources Manager</li> <li>storage: Group interacting with Azure Storage Blob</li> </ul>"},{"location":"cli/#babylon-azure-acr","title":"babylon azure acr","text":"<p>Group interacting with Azure Container Registry</p> <p>Requires the program <code>docker</code> to run.</p> <p>Usage:</p> <pre><code>babylon azure acr [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>delete: Delete docker image from selected repository</li> <li>list: List all docker images in the specified registry</li> <li>pull: Pulls a docker image from the ACR registry given in platform configuration.</li> <li>push: Push a docker image to the ACR registry given in platform configuration</li> </ul>"},{"location":"cli/#babylon-azure-acr-delete","title":"babylon azure acr delete","text":"<p>Delete docker image from selected repository</p> <p>Requires <code>simulator_version</code> in deploy config file.</p> <p>Requires <code>simulator_repository</code> in deploy config file.</p> <p>Requires <code>acr_registry_name</code> in platform config file.</p> <p>Requires <code>csm_acr_registry_name</code> in platform config file.</p> <p>Usage:</p> <pre><code>babylon azure acr delete [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-r</code>, <code>--registry</code> text Container Registry name to delete from, example: myregistry.azurecr.io None <code>-d</code>, <code>--direction</code> choice (<code>src</code> | <code>dest</code>) Container Registry to delete from None <code>-i</code>, <code>--image</code> text Remote docker image to pull, example hello-world:latest None <code>-f</code>, <code>--force</code> boolean Don't ask for validation before delete <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-azure-acr-list","title":"babylon azure acr list","text":"<p>List all docker images in the specified registry</p> <p>Requires <code>acr_registry_name</code> in platform config file.</p> <p>Requires <code>csm_acr_registry_name</code> in platform config file.</p> <p>Usage:</p> <pre><code>babylon azure acr list [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-r</code>, <code>--registry</code> filetype Container Registry name to scan, example: myregistry.azurecr.io None <code>-d</code>, <code>--direction</code> choice (<code>src</code> | <code>dest</code>) Container Registry choice to delete from None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-azure-acr-pull","title":"babylon azure acr pull","text":"<p>Pulls a docker image from the ACR registry given in platform configuration.        Also tag the docker image into the new reference (docker tag).</p> <p>Requires <code>simulator_repository</code> in deploy config file.</p> <p>Requires <code>simulator_version</code> in deploy config file.</p> <p>Requires <code>csm_simulator_repository</code> in deploy config file.</p> <p>Requires <code>csm_acr_registry_name</code> in platform config file.</p> <p>Usage:</p> <pre><code>babylon azure acr pull [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-r</code>, <code>--registry</code> filetype Container Registry name to pull from, ex: myregistry.azurecr.io None <code>-i</code>, <code>--image</code> filetype Remote docker image to pull, example hello-world:latest None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-azure-acr-push","title":"babylon azure acr push","text":"<p>Push a docker image to the ACR registry given in platform configuration</p> <p>Requires <code>simulator_version</code> in deploy config file.</p> <p>Requires <code>simulator_repository</code> in deploy config file.</p> <p>Requires <code>acr_registry_name</code> in platform config file.</p> <p>Usage:</p> <pre><code>babylon azure acr push [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-i</code>, <code>--image</code> filetype Local docker image to push None <code>-r</code>, <code>--registry</code> filetype Container Registry name to push to, example: myregistry.azurecr.io None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-azure-adt","title":"babylon azure adt","text":"<p>Allow communication with Azure Digital Twin</p> <p>Usage:</p> <pre><code>babylon azure adt [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>instance: Subgroup dedicate to Azure digital twins instance management</li> <li>model: Subgroup dedicate to Azure digital twins models management</li> </ul>"},{"location":"cli/#babylon-azure-adt-instance","title":"babylon azure adt instance","text":"<p>Subgroup dedicate to Azure digital twins instance management</p> <p>Requires <code>azure_subscription</code> in platform config file.</p> <p>Usage:</p> <pre><code>babylon azure adt instance [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>create: Create a new ADT instance in current platform resource group</li> <li>delete: Delete a ADT instance in current platform resource group</li> <li>get: Get an azure digital twins instance details</li> <li>list: Get all azure digital twins instances</li> </ul>"},{"location":"cli/#babylon-azure-adt-instance-create","title":"babylon azure adt instance create","text":"<p>Create a new ADT instance in current platform resource group</p> <p>Requires <code>resources_location</code> in platform config file.</p> <p>Requires <code>resource_group_name</code> in platform config file.</p> <p>Usage:</p> <pre><code>babylon azure adt instance create [OPTIONS] ADT_INSTANCE_NAME\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-azure-adt-instance-delete","title":"babylon azure adt instance delete","text":"<p>Delete a ADT instance in current platform resource group</p> <p>Requires <code>resource_group_name</code> in platform config file.</p> <p>Usage:</p> <pre><code>babylon azure adt instance delete [OPTIONS] ADT_INSTANCE_NAME\n</code></pre> <p>Options:</p> Name Type Description Default <code>-f</code>, <code>--force</code> boolean Don't ask for validation before delete <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-azure-adt-instance-get","title":"babylon azure adt instance get","text":"<p>Get an azure digital twins instance details</p> <p>Requires <code>resource_group_name</code> in platform config file.</p> <p>Usage:</p> <pre><code>babylon azure adt instance get [OPTIONS] ADT_INSTANCE_NAME\n</code></pre> <p>Options:</p> Name Type Description Default <code>-o</code>, <code>--output_file</code> path The path to the file where the retrieved ADT instance details should be outputted (json-formatted) None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-azure-adt-instance-list","title":"babylon azure adt instance list","text":"<p>Get all azure digital twins instances</p> <p>Requires <code>resource_group_name</code> in platform config file.</p> <p>Usage:</p> <pre><code>babylon azure adt instance list [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-o</code>, <code>--output-file</code> path The path to the file where ADT instances details should be outputted (json-formatted) None <code>-f</code>, <code>--fields</code> text Fields witch will be keep in response data, by default all None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-azure-adt-model","title":"babylon azure adt model","text":"<p>Subgroup dedicate to Azure digital twins models management</p> <p>Requires <code>digital_twin_url</code> in deploy config file.</p> <p>Usage:</p> <pre><code>babylon azure adt model [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>list: List all models id from ADT</li> <li>upload: Upload MODEL_FILE_FOLDER content to adt</li> </ul>"},{"location":"cli/#babylon-azure-adt-model-list","title":"babylon azure adt model list","text":"<p>List all models id from ADT</p> <p>Usage:</p> <pre><code>babylon azure adt model list [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-o</code>, <code>--output-file</code> file Write full output of the adt api in target file None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-azure-adt-model-upload","title":"babylon azure adt model upload","text":"<p>Upload MODEL_FILE_FOLDER content to adt</p> <p>MODEL_FILE_FOLDER must be a folder containing json file</p> <p>Usage:</p> <pre><code>babylon azure adt model upload [OPTIONS] MODEL_FILE_FOLDER\n</code></pre> <p>Options:</p> Name Type Description Default <code>-o</code>, <code>--override</code> boolean Override existing models <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-azure-adx","title":"babylon azure adx","text":"<p>Group interacting with Azure Data Explorer</p> <p>Requires <code>azure_subscription</code> in platform config file.</p> <p>Usage:</p> <pre><code>babylon azure adx [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>list-scripts: List scripts on the database</li> <li>permission: Group interacting with ADX permissions</li> <li>run-folder: Run all script files (.kql) from SCRIPT_FOLDER</li> <li>run-script: Open SCRIPT_FILE and run it on the database</li> </ul>"},{"location":"cli/#babylon-azure-adx-list-scripts","title":"babylon azure adx list-scripts","text":"<p>List scripts on the database</p> <p>Requires <code>adx_database_name</code> in deploy config file.</p> <p>Requires <code>resource_group_name</code> in platform config file.</p> <p>Requires <code>adx_cluster_name</code> in platform config file.</p> <p>Usage:</p> <pre><code>babylon azure adx list-scripts [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-azure-adx-permission","title":"babylon azure adx permission","text":"<p>Group interacting with ADX permissions</p> <p>Usage:</p> <pre><code>babylon azure adx permission [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>delete: Delete all permission assignments applied to the given principal id</li> <li>get: Get permission assignments applied to the given principal id</li> <li>get-all: Get all permission assignments in the database</li> <li>set: Set permission assignments applied to the given principal id</li> </ul>"},{"location":"cli/#babylon-azure-adx-permission-delete","title":"babylon azure adx permission delete","text":"<p>Delete all permission assignments applied to the given principal id</p> <p>Requires <code>adx_database_name</code> in deploy config file.</p> <p>Requires <code>adx_cluster_name</code> in platform config file.</p> <p>Requires <code>resource_group_name</code> in platform config file.</p> <p>Usage:</p> <pre><code>babylon azure adx permission delete [OPTIONS] PRINCIPAL_ID\n</code></pre> <p>Options:</p> Name Type Description Default <code>-f</code>, <code>--force</code> boolean Don't ask for validation before delete <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-azure-adx-permission-get","title":"babylon azure adx permission get","text":"<p>Get permission assignments applied to the given principal id</p> <p>Requires <code>adx_database_name</code> in deploy config file.</p> <p>Requires <code>adx_cluster_name</code> in platform config file.</p> <p>Requires <code>resource_group_name</code> in platform config file.</p> <p>Usage:</p> <pre><code>babylon azure adx permission get [OPTIONS] PRINCIPAL_ID\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-azure-adx-permission-get-all","title":"babylon azure adx permission get-all","text":"<p>Get all permission assignments in the database</p> <p>Requires <code>adx_database_name</code> in deploy config file.</p> <p>Requires <code>adx_cluster_name</code> in platform config file.</p> <p>Requires <code>resource_group_name</code> in platform config file.</p> <p>Usage:</p> <pre><code>babylon azure adx permission get-all [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-azure-adx-permission-set","title":"babylon azure adx permission set","text":"<p>Set permission assignments applied to the given principal id</p> <p>Requires <code>adx_database_name</code> in deploy config file.</p> <p>Requires <code>adx_cluster_name</code> in platform config file.</p> <p>Requires <code>resource_group_name</code> in platform config file.</p> <p>Usage:</p> <pre><code>babylon azure adx permission set [OPTIONS] PRINCIPAL_ID\n</code></pre> <p>Options:</p> Name Type Description Default <code>-r</code>, <code>--role</code> choice (<code>User</code> | <code>Viewer</code> | <code>Admin</code>) Assignment Role to Add _required <code>-t</code>, <code>--principal-type</code> choice (<code>User</code> | <code>Group</code> | <code>App</code>) Principal type of the given ID _required <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-azure-adx-run-folder","title":"babylon azure adx run-folder","text":"<p>Run all script files (.kql) from SCRIPT_FOLDER</p> <p>Requires <code>adx_database_name</code> in deploy config file.</p> <p>Requires <code>resource_group_name</code> in platform config file.</p> <p>Requires <code>adx_cluster_name</code> in platform config file.</p> <p>Usage:</p> <pre><code>babylon azure adx run-folder [OPTIONS] SCRIPT_FOLDER\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-azure-adx-run-script","title":"babylon azure adx run-script","text":"<p>Open SCRIPT_FILE and run it on the database</p> <p>In the script instances of \"\" will be replaced by the actual database name <p>Requires <code>adx_database_name</code> in deploy config file.</p> <p>Requires <code>resource_group_name</code> in platform config file.</p> <p>Requires <code>adx_cluster_name</code> in platform config file.</p> <p>Usage:</p> <pre><code>babylon azure adx run-script [OPTIONS] SCRIPT_FILE\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-azure-arm","title":"babylon azure arm","text":"<p>Group interacting with Azure Resources Manager</p> <p>Requires <code>azure_subscription</code> in platform config file.</p> <p>Usage:</p> <pre><code>babylon azure arm [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>create: Create a resource deployment config.</li> <li>delete: Delete a resource deployment via arm deployment.</li> <li>list: List all the deployments for a resource group.</li> <li>run: Apply a resource deployment config via arm deployment.</li> </ul>"},{"location":"cli/#babylon-azure-arm-create","title":"babylon azure arm create","text":"<p>Create a resource deployment config.</p> <p>Usage:</p> <pre><code>babylon azure arm create [OPTIONS] DEPLOYMENT_NAME\n</code></pre> <p>Options:</p> Name Type Description Default <code>-t</code>, <code>--template-uri</code> text N/A None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-azure-arm-delete","title":"babylon azure arm delete","text":"<p>Delete a resource deployment via arm deployment.</p> <p>Requires <code>resource_group_name</code> in deploy config file.</p> <p>Usage:</p> <pre><code>babylon azure arm delete [OPTIONS] DEPLOYMENT_NAME\n</code></pre> <p>Options:</p> Name Type Description Default <code>-f</code>, <code>--force</code> boolean Don't ask for validation before delete <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-azure-arm-list","title":"babylon azure arm list","text":"<p>List all the deployments for a resource group.</p> <p>Requires <code>resource_group_name</code> in deploy config file.</p> <p>Usage:</p> <pre><code>babylon azure arm list [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-azure-arm-run","title":"babylon azure arm run","text":"<p>Apply a resource deployment config via arm deployment.</p> <p>Requires <code>resource_group_name</code> in deploy config file.</p> <p>Usage:</p> <pre><code>babylon azure arm run [OPTIONS] DEPLOYMENT_CONFIG_FILE_PATH\n</code></pre> <p>Options:</p> Name Type Description Default <code>-e</code>, <code>--use-working-dir-file</code> boolean Should the ARM file path be relative to Babylon working directory ? <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-azure-storage","title":"babylon azure storage","text":"<p>Group interacting with Azure Storage Blob</p> <p>Requires <code>storage_account_name</code> in platform config file.</p> <p>Usage:</p> <pre><code>babylon azure storage [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>-a</code>, <code>--account</code> text Storage account name None <code>-u</code>, <code>--url</code> text Storage account url None <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>container: Group interacting with Azure Storage Blob containers</li> </ul>"},{"location":"cli/#babylon-azure-storage-container","title":"babylon azure storage container","text":"<p>Group interacting with Azure Storage Blob containers</p> <p>Usage:</p> <pre><code>babylon azure storage container [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>create: Creates a new storageblob container with the given name</li> <li>delete: Deletes a storageblob container with the given name</li> <li>get-all: Lists storage containers from a given account</li> </ul>"},{"location":"cli/#babylon-azure-storage-container-create","title":"babylon azure storage container create","text":"<p>Creates a new storageblob container with the given name</p> <p>Usage:</p> <pre><code>babylon azure storage container create [OPTIONS] CONTAINER_NAME\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-azure-storage-container-delete","title":"babylon azure storage container delete","text":"<p>Deletes a storageblob container with the given name</p> <p>Usage:</p> <pre><code>babylon azure storage container delete [OPTIONS] CONTAINER_NAME\n</code></pre> <p>Options:</p> Name Type Description Default <code>-f</code>, <code>--force</code> boolean Don't ask for validation before delete <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-azure-storage-container-get-all","title":"babylon azure storage container get-all","text":"<p>Lists storage containers from a given account</p> <p>Usage:</p> <pre><code>babylon azure storage container get-all [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-config","title":"babylon config","text":"<p>Group made to work on the config</p> <p>Usage:</p> <pre><code>babylon config [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>deployment: Sub-group for deployment</li> <li>display: Display current config</li> <li>platform: Sub-group for platform</li> <li>plugin: Sub-group for plugins</li> <li>validate: Validate current config</li> </ul>"},{"location":"cli/#babylon-config-deployment","title":"babylon config deployment","text":"<p>Sub-group for deployment</p> <p>Usage:</p> <pre><code>babylon config deployment [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>create: Create a new deployment file DEPLOY.yaml and open editor to edit it</li> <li>edit: Open editor to edit variables in given deployment</li> <li>select: Change current selected deployment</li> <li>set-variable: Set a deployment variable with a new value</li> </ul>"},{"location":"cli/#babylon-config-deployment-create","title":"babylon config deployment create","text":"<p>Create a new deployment file DEPLOY.yaml and open editor to edit it</p> <p>Usage:</p> <pre><code>babylon config deployment create [OPTIONS] DEPLOY\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-config-deployment-edit","title":"babylon config deployment edit","text":"<p>Open editor to edit variables in given deployment</p> <p>will open default deployment if no argument is passed</p> <p>Usage:</p> <pre><code>babylon config deployment edit [OPTIONS] [DEPLOYMENT]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-config-deployment-select","title":"babylon config deployment select","text":"<p>Change current selected deployment</p> <p>if not argument is passed will run in interactive mode</p> <p>Usage:</p> <pre><code>babylon config deployment select [OPTIONS] [DEPLOYMENT]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-config-deployment-set-variable","title":"babylon config deployment set-variable","text":"<p>Set a deployment variable with a new value</p> <p>Usage:</p> <pre><code>babylon config deployment set-variable [OPTIONS] VARIABLE_KEY VARIABLE_VALUE\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-config-display","title":"babylon config display","text":"<p>Display current config</p> <p>Usage:</p> <pre><code>babylon config display [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-config-platform","title":"babylon config platform","text":"<p>Sub-group for platform</p> <p>Usage:</p> <pre><code>babylon config platform [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>create: No description was provided with this command.</li> <li>edit: Open editor to edit variables in given platform</li> <li>select: Change current selected platform</li> <li>set-variable: Set a platform variable with a new value</li> </ul>"},{"location":"cli/#babylon-config-platform-create","title":"babylon config platform create","text":"<p>Usage:</p> <pre><code>babylon config platform create [OPTIONS] PLATFORM\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-config-platform-edit","title":"babylon config platform edit","text":"<p>Open editor to edit variables in given platform</p> <p>will open default platform if no argument is passed</p> <p>Usage:</p> <pre><code>babylon config platform edit [OPTIONS] [PLATFORM]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-config-platform-select","title":"babylon config platform select","text":"<p>Change current selected platform</p> <p>if not argument is passed will run in interactive mode</p> <p>Usage:</p> <pre><code>babylon config platform select [OPTIONS] [PLATFORM]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-config-platform-set-variable","title":"babylon config platform set-variable","text":"<p>Set a platform variable with a new value</p> <p>Usage:</p> <pre><code>babylon config platform set-variable [OPTIONS] VARIABLE_KEY VARIABLE_VALUE\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-config-plugin","title":"babylon config plugin","text":"<p>Sub-group for plugins</p> <p>Usage:</p> <pre><code>babylon config plugin [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>activate: Activate PLUGIN</li> <li>add: Add a plugin found at PLUGIN_PATH</li> <li>deactivate: Deactivate PLUGIN</li> <li>remove: Remove PLUGIN</li> </ul>"},{"location":"cli/#babylon-config-plugin-activate","title":"babylon config plugin activate","text":"<p>Activate PLUGIN</p> <p>Usage:</p> <pre><code>babylon config plugin activate [OPTIONS] PLUGIN\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-config-plugin-add","title":"babylon config plugin add","text":"<p>Add a plugin found at PLUGIN_PATH</p> <p>Usage:</p> <pre><code>babylon config plugin add [OPTIONS] PLUGIN_PATH\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-config-plugin-deactivate","title":"babylon config plugin deactivate","text":"<p>Deactivate PLUGIN</p> <p>Usage:</p> <pre><code>babylon config plugin deactivate [OPTIONS] PLUGIN\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-config-plugin-remove","title":"babylon config plugin remove","text":"<p>Remove PLUGIN</p> <p>Usage:</p> <pre><code>babylon config plugin remove [OPTIONS] PLUGIN\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-config-validate","title":"babylon config validate","text":"<p>Validate current config</p> <p>Usage:</p> <pre><code>babylon config validate [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-debug","title":"babylon debug","text":"<p>Add debug capacities of runs</p> <p>Requires <code>k8s_namespace</code> in platform config file.</p> <p>Requires <code>k8s_context</code> in platform config file.</p> <p>Usage:</p> <pre><code>babylon debug [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>get-workflow-pods: Get pods information for the given WORKFLOW</li> </ul>"},{"location":"cli/#babylon-debug-get-workflow-pods","title":"babylon debug get-workflow-pods","text":"<p>Get pods information for the given WORKFLOW</p> <p>Requires the program <code>kubectl</code> to run.</p> <p>Usage:</p> <pre><code>babylon debug get-workflow-pods [OPTIONS] WORKFLOW\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-powerbi","title":"babylon powerbi","text":"<p>Group handling communication with PowerBI API</p> <p>Requires <code>powerbi_api_scope</code> in platform config file.</p> <p>Usage:</p> <pre><code>babylon powerbi [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>dataset: Command group handling PowerBI datasets</li> <li>report: Command group handling PowerBI reports</li> <li>workspace: Command group handling PowerBI workspaces</li> </ul>"},{"location":"cli/#babylon-powerbi-dataset","title":"babylon powerbi dataset","text":"<p>Command group handling PowerBI datasets</p> <p>Usage:</p> <pre><code>babylon powerbi dataset [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>delete: Delete a powerbi dataset in the current workspace</li> <li>get: Get a powerbi dataset in the current workspace</li> <li>get-all: Get a list of all powerbi datasets in the current workspace</li> <li>parameters: Command group handling PowerBI dataset parameters</li> <li>take-over: Take ownership of a powerbi dataset in the current workspace</li> <li>update-credentials: Update azure credentials of a given datasource</li> </ul>"},{"location":"cli/#babylon-powerbi-dataset-delete","title":"babylon powerbi dataset delete","text":"<p>Delete a powerbi dataset in the current workspace</p> <p>Usage:</p> <pre><code>babylon powerbi dataset delete [OPTIONS] DATASET_ID\n</code></pre> <p>Options:</p> Name Type Description Default <code>-w</code>, <code>--workspace</code> text PowerBI workspace ID None <code>-f</code>, <code>--force</code> boolean Don't ask for validation before delete <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-powerbi-dataset-get","title":"babylon powerbi dataset get","text":"<p>Get a powerbi dataset in the current workspace</p> <p>Usage:</p> <pre><code>babylon powerbi dataset get [OPTIONS] DATASET_ID\n</code></pre> <p>Options:</p> Name Type Description Default <code>-w</code>, <code>--workspace</code> text PowerBI workspace ID None <code>-o</code>, <code>--output</code> text File to which content should be outputted (json-formatted) None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-powerbi-dataset-get-all","title":"babylon powerbi dataset get-all","text":"<p>Get a list of all powerbi datasets in the current workspace</p> <p>Usage:</p> <pre><code>babylon powerbi dataset get-all [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-w</code>, <code>--workspace</code> text PowerBI workspace ID None <code>-o</code>, <code>--output</code> text File to which content should be outputted (json-formatted) None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-powerbi-dataset-parameters","title":"babylon powerbi dataset parameters","text":"<p>Command group handling PowerBI dataset parameters</p> <p>Usage:</p> <pre><code>babylon powerbi dataset parameters [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>get: Get parameters of a given dataset</li> <li>update: Update parameters of a given dataset</li> </ul>"},{"location":"cli/#babylon-powerbi-dataset-parameters-get","title":"babylon powerbi dataset parameters get","text":"<p>Get parameters of a given dataset</p> <p>Usage:</p> <pre><code>babylon powerbi dataset parameters get [OPTIONS] DATASET_ID\n</code></pre> <p>Options:</p> Name Type Description Default <code>-w</code>, <code>--workspace</code> text PowerBI workspace ID None <code>-o</code>, <code>--output</code> text File to which content should be outputted (json-formatted) None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-powerbi-dataset-parameters-update","title":"babylon powerbi dataset parameters update","text":"<p>Update parameters of a given dataset</p> <p>Usage:</p> <pre><code>babylon powerbi dataset parameters update [OPTIONS] DATASET_ID\n</code></pre> <p>Options:</p> Name Type Description Default <code>-f</code>, <code>--file</code> file N/A _required <code>-w</code>, <code>--workspace</code> text PowerBI workspace ID None <code>-e</code>, <code>--use-working-dir-file</code> boolean Should the parameter file path be relative to Babylon working directory ? <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-powerbi-dataset-take-over","title":"babylon powerbi dataset take-over","text":"<p>Take ownership of a powerbi dataset in the current workspace</p> <p>Usage:</p> <pre><code>babylon powerbi dataset take-over [OPTIONS] DATASET_ID\n</code></pre> <p>Options:</p> Name Type Description Default <code>-w</code>, <code>--workspace</code> text PowerBI workspace ID None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-powerbi-dataset-update-credentials","title":"babylon powerbi dataset update-credentials","text":"<p>Update azure credentials of a given datasource</p> <p>Usage:</p> <pre><code>babylon powerbi dataset update-credentials [OPTIONS] DATASET_ID\n</code></pre> <p>Options:</p> Name Type Description Default <code>-w</code>, <code>--workspace</code> text PowerBI workspace ID None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-powerbi-report","title":"babylon powerbi report","text":"<p>Command group handling PowerBI reports</p> <p>Usage:</p> <pre><code>babylon powerbi report [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>delete: Delete a powerbi report in the current workspace</li> <li>download: Download a report in the current workspace</li> <li>get: Get info from a powerbi report of a workspace</li> <li>get-all: Get info from every powerbi reports of a workspace</li> <li>upload: Publish the given pbxi file to the PowerBI workspace</li> </ul>"},{"location":"cli/#babylon-powerbi-report-delete","title":"babylon powerbi report delete","text":"<p>Delete a powerbi report in the current workspace</p> <p>Usage:</p> <pre><code>babylon powerbi report delete [OPTIONS] REPORT_ID\n</code></pre> <p>Options:</p> Name Type Description Default <code>-w</code>, <code>--workspace</code> text PowerBI workspace ID None <code>-f</code>, <code>--force</code> boolean Don't ask for validation before delete <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-powerbi-report-download","title":"babylon powerbi report download","text":"<p>Download a report in the current workspace</p> <p>Usage:</p> <pre><code>babylon powerbi report download [OPTIONS] REPORT_ID\n</code></pre> <p>Options:</p> Name Type Description Default <code>-o</code>, <code>--output_file</code> file output filename (.pbix) _required <code>-w</code>, <code>--workspace</code> text PowerBI workspace ID None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-powerbi-report-get","title":"babylon powerbi report get","text":"<p>Get info from a powerbi report of a workspace</p> <p>Usage:</p> <pre><code>babylon powerbi report get [OPTIONS] REPORT_ID\n</code></pre> <p>Options:</p> Name Type Description Default <code>-w</code>, <code>--workspace</code> text PowerBI workspace ID None <code>-o</code>, <code>--output</code> text File to which content should be outputted (json-formatted) None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-powerbi-report-get-all","title":"babylon powerbi report get-all","text":"<p>Get info from every powerbi reports of a workspace</p> <p>Usage:</p> <pre><code>babylon powerbi report get-all [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-w</code>, <code>--workspace</code> text PowerBI workspace ID None <code>-o</code>, <code>--output</code> text File to which content should be outputted (json-formatted) None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-powerbi-report-upload","title":"babylon powerbi report upload","text":"<p>Publish the given pbxi file to the PowerBI workspace</p> <p>Usage:</p> <pre><code>babylon powerbi report upload [OPTIONS] PBIX_FILENAME\n</code></pre> <p>Options:</p> Name Type Description Default <code>-w</code>, <code>--workspace</code> text PowerBI workspace ID None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-powerbi-workspace","title":"babylon powerbi workspace","text":"<p>Command group handling PowerBI workspaces</p> <p>Usage:</p> <pre><code>babylon powerbi workspace [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>create: Create workspace named WORKSPACE_NAME into Power Bi App</li> <li>delete: Delete workspace from Power Bi APP</li> <li>get: Get a specific workspace information</li> <li>get-all: Get all workspace information for the given account</li> <li>get-current: Get a specific workspace information</li> <li>user: Subgroup allowing control of the users and their access to the workspace</li> </ul>"},{"location":"cli/#babylon-powerbi-workspace-create","title":"babylon powerbi workspace create","text":"<p>Create workspace named WORKSPACE_NAME into Power Bi App</p> <p>Usage:</p> <pre><code>babylon powerbi workspace create [OPTIONS] WORKSPACE_NAME\n</code></pre> <p>Options:</p> Name Type Description Default <code>-s</code>, <code>--select</code> boolean Select this new Organization as one of babylon context Organizations ? <code>False</code> <code>-o</code>, <code>--output</code> text File to which content should be outputted (json-formatted) None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-powerbi-workspace-delete","title":"babylon powerbi workspace delete","text":"<p>Delete workspace from Power Bi APP</p> <p>Usage:</p> <pre><code>babylon powerbi workspace delete [OPTIONS] WORKSPACE_ID\n</code></pre> <p>Options:</p> Name Type Description Default <code>-f</code>, <code>--force</code> boolean Don't ask for validation before delete <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-powerbi-workspace-get","title":"babylon powerbi workspace get","text":"<p>Get a specific workspace information</p> <p>Usage:</p> <pre><code>babylon powerbi workspace get [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-w</code>, <code>--workspace</code> filetype PowerBI workspace ID None <code>-n</code>, <code>--name</code> text PowerBI workspace name None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-powerbi-workspace-get-all","title":"babylon powerbi workspace get-all","text":"<p>Get all workspace information for the given account</p> <p>Usage:</p> <pre><code>babylon powerbi workspace get-all [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-o</code>, <code>--output</code> text File to which content should be outputted (json-formatted) None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-powerbi-workspace-get-current","title":"babylon powerbi workspace get-current","text":"<p>Get a specific workspace information</p> <p>Requires <code>powerbi_workspace_id</code> in deploy config file.</p> <p>Usage:</p> <pre><code>babylon powerbi workspace get-current [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-powerbi-workspace-user","title":"babylon powerbi workspace user","text":"<p>Subgroup allowing control of the users and their access to the workspace</p> <p>Usage:</p> <pre><code>babylon powerbi workspace user [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>add: Adds a new user to the power bi workspace using the following information:</li> <li>delete: Delete IDENTIFIER from the power bi workspace</li> <li>get-all: List all exisiting users in the power bi workspace</li> <li>update: Updates an existing user in the power bi workspace using the following information:</li> </ul>"},{"location":"cli/#babylon-powerbi-workspace-user-add","title":"babylon powerbi workspace user add","text":"<p>Adds a new user to the power bi workspace using the following information:</p> <p>IDENTIFIER : an identifier for the user to add PRINCIPAL TYPE   App   : Used for service principals users (uuid from the service principal from Azure)   Group : Group principal type (object ID from an AAD group)   User  : Used for individual users types (user mail address)   None  : No principal type. Use for whole organization level access GROUP USER ACCESS RIGHT :   Admin       : Admin rights   Member      : Read, reshare and explore rights   Contributor : Read and explore rights   Viewer      : Read-only rights   None        : No access to content</p> <p>Usage:</p> <pre><code>babylon powerbi workspace user add [OPTIONS] IDENTIFIER {App|Group|User|None}\n                                   {Admin|Contributor|Member|Viewer|None}\n</code></pre> <p>Options:</p> Name Type Description Default <code>-w</code>, <code>--workspace</code> filetype N/A None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-powerbi-workspace-user-delete","title":"babylon powerbi workspace user delete","text":"<p>Delete IDENTIFIER from the power bi workspace</p> <p>Usage:</p> <pre><code>babylon powerbi workspace user delete [OPTIONS] IDENTIFIER\n</code></pre> <p>Options:</p> Name Type Description Default <code>-w</code>, <code>--workspace</code> filetype N/A None <code>-f</code>, <code>--force</code> boolean Don't ask for validation before delete <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-powerbi-workspace-user-get-all","title":"babylon powerbi workspace user get-all","text":"<p>List all exisiting users in the power bi workspace</p> <p>Usage:</p> <pre><code>babylon powerbi workspace user get-all [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-w</code>, <code>--workspace</code> filetype N/A None <code>-o</code>, <code>--output</code> text File to which content should be outputted (json-formatted) None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-powerbi-workspace-user-update","title":"babylon powerbi workspace user update","text":"<p>Updates an existing user in the power bi workspace using the following information:</p> <p>IDENTIFIER : an identifier for the user to add PRINCIPAL TYPE   App   : Used for service principals users (uuid from the service principal from Azure)   Group : Group principal type (object ID from an AAD group)   User  : Used for individual users types (user mail address)   None  : No principal type. Use for whole organization level access GROUP USER ACCESS RIGHT :   Admin       : Admin rights   Member      : Read, reshare and explore rights   Contributor : Read and explore rights   Viewer      : Read-only rights   None        : No access to content</p> <p>Usage:</p> <pre><code>babylon powerbi workspace user update [OPTIONS] IDENTIFIER\n                                      {App|Group|User|None}\n                                      {Admin|Contributor|Member|Viewer|None}\n</code></pre> <p>Options:</p> Name Type Description Default <code>-w</code>, <code>--workspace</code> filetype N/A None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-terraform-cloud","title":"babylon terraform-cloud","text":"<p>Group allowing interactions with the Terraform Cloud API</p> <p>Requires key <code>organization</code> in <code>terraform_cloud.yaml</code> in the working_dir.</p> <p>Requires key <code>url</code> in <code>terraform_cloud.yaml</code> in the working_dir.</p> <p>Requires key <code>token</code> in <code>terraform_cloud.yaml</code> in the working_dir.</p> <p>Usage:</p> <pre><code>babylon terraform-cloud [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>workspace: Sub-group allowing interaction with the organization of the Terraform Cloud API</li> </ul>"},{"location":"cli/#babylon-terraform-cloud-workspace","title":"babylon terraform-cloud workspace","text":"<p>Sub-group allowing interaction with the organization of the Terraform Cloud API</p> <p>Usage:</p> <pre><code>babylon terraform-cloud workspace [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>create: Use given parameters to create a workspace in the organization</li> <li>delete: Delete a workspace from the organization</li> <li>get: Get a workspace in the organization</li> <li>get-all: Get all available workspaces in the organization</li> <li>last-run: Get state of the last run of a workspace</li> <li>outputs: List outputs of a workspace.</li> <li>run: Start the run of a workspace</li> <li>vars: Interact with the vars of a workspace</li> </ul>"},{"location":"cli/#babylon-terraform-cloud-workspace-create","title":"babylon terraform-cloud workspace create","text":"<p>Use given parameters to create a workspace in the organization</p> <p>Requires key <code>vcs_oauth_token_id</code> in <code>terraform_workspace.yaml</code> in the working_dir.</p> <p>Requires key <code>vcs_branch</code> in <code>terraform_workspace.yaml</code> in the working_dir.</p> <p>Requires key <code>vcs_identifier</code> in <code>terraform_workspace.yaml</code> in the working_dir.</p> <p>Requires key <code>working_directory</code> in <code>terraform_workspace.yaml</code> in the working_dir.</p> <p>Usage:</p> <pre><code>babylon terraform-cloud workspace create [OPTIONS] WORKSPACE_NAME\n</code></pre> <p>Options:</p> Name Type Description Default <code>-o</code>, <code>--output</code> file File to which content should be outputted (json-formatted) None <code>-s</code>, <code>--select</code> boolean Should the id of the created workspace set in the working dir file ? <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-terraform-cloud-workspace-delete","title":"babylon terraform-cloud workspace delete","text":"<p>Delete a workspace from the organization</p> <p>Requires key <code>workspace_id</code> in <code>terraform_workspace.yaml</code> in the working_dir.</p> <p>Usage:</p> <pre><code>babylon terraform-cloud workspace delete [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-f</code>, <code>--force</code> boolean Should validation be skipped ? <code>False</code> <code>-w</code>, <code>--workspace</code> text Id of the workspace to use None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-terraform-cloud-workspace-get","title":"babylon terraform-cloud workspace get","text":"<p>Get a workspace in the organization</p> <p>Requires key <code>workspace_id</code> in <code>terraform_workspace.yaml</code> in the working_dir.</p> <p>Usage:</p> <pre><code>babylon terraform-cloud workspace get [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-w</code>, <code>--workspace</code> text Id of the workspace to use None <code>-o</code>, <code>--output</code> file File to which content should be outputted (json-formatted) None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-terraform-cloud-workspace-get-all","title":"babylon terraform-cloud workspace get-all","text":"<p>Get all available workspaces in the organization</p> <p>Usage:</p> <pre><code>babylon terraform-cloud workspace get-all [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-o</code>, <code>--output</code> file File to which content should be outputted (json-formatted) None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-terraform-cloud-workspace-last-run","title":"babylon terraform-cloud workspace last-run","text":"<p>Get state of the last run of a workspace</p> <p>Requires key <code>workspace_id</code> in <code>terraform_workspace.yaml</code> in the working_dir.</p> <p>Usage:</p> <pre><code>babylon terraform-cloud workspace last-run [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-o</code>, <code>--output</code> file File to which content should be outputted (json-formatted) None <code>-w</code>, <code>--workspace</code> text Id of the workspace to use None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-terraform-cloud-workspace-outputs","title":"babylon terraform-cloud workspace outputs","text":"<p>List outputs of a workspace.</p> <p>Sensitive outputs are not readable, use -s option to access the state in the web application to get those.</p> <p>Requires key <code>workspace_id</code> in <code>terraform_workspace.yaml</code> in the working_dir.</p> <p>Usage:</p> <pre><code>babylon terraform-cloud workspace outputs [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-o</code>, <code>--output</code> file File to which content should be outputted (json-formatted) None <code>-w</code>, <code>--workspace</code> text Id of the workspace to use None <code>-s</code>, <code>--states</code> boolean Add this option to open the webapp page to the states of the workspace. (Allow to see content of sensitives outputs) <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-terraform-cloud-workspace-run","title":"babylon terraform-cloud workspace run","text":"<p>Start the run of a workspace</p> <p>More info on runs can be found at: https://developer.hashicorp.com/terraform/cloud-docs/api-docs/run#create-a-run</p> <p>Requires key <code>workspace_id</code> in <code>terraform_workspace.yaml</code> in the working_dir.</p> <p>Usage:</p> <pre><code>babylon terraform-cloud workspace run [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-o</code>, <code>--output</code> file File to which content should be outputted (json-formatted) None <code>-w</code>, <code>--workspace</code> text Id of the workspace to use None <code>-m</code>, <code>--message</code> text Message added to the run. <code>Run started with Babylon</code> <code>--allow_empty_apply</code> boolean Can this run have an empty apply ? <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-terraform-cloud-workspace-vars","title":"babylon terraform-cloud workspace vars","text":"<p>Interact with the vars of a workspace</p> <p>Usage:</p> <pre><code>babylon terraform-cloud workspace vars [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>create: Set VAR_KEY variable to VAR_VALUE in a workspace</li> <li>delete: Delete VAR_KEY variable in a workspace</li> <li>get: Get VAR_KEY variable in a workspace</li> <li>get-all: Get all available variables in the workspace</li> <li>update: Update VAR_KEY variable in a workspace</li> </ul>"},{"location":"cli/#babylon-terraform-cloud-workspace-vars-create","title":"babylon terraform-cloud workspace vars create","text":"<p>Set VAR_KEY variable to VAR_VALUE in a workspace</p> <p>More information on the arguments can be found at : https://developer.hashicorp.com/terraform/cloud-docs/api-docs/variables#request-body</p> <p>Requires key <code>workspace_id</code> in <code>terraform_workspace.yaml</code> in the working_dir.</p> <p>Usage:</p> <pre><code>babylon terraform-cloud workspace vars create [OPTIONS] VAR_KEY VAR_VALUE\n                                              VAR_DESCRIPTION\n                                              [[terraform|env]]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-w</code>, <code>--workspace</code> filetype Id of the workspace to use None <code>--hcl</code> boolean Should the var be evaluated as a HCL string <code>False</code> <code>--sensitive</code> boolean Is the var sensitive <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-terraform-cloud-workspace-vars-delete","title":"babylon terraform-cloud workspace vars delete","text":"<p>Delete VAR_KEY variable in a workspace</p> <p>Requires key <code>workspace_id</code> in <code>terraform_workspace.yaml</code> in the working_dir.</p> <p>Usage:</p> <pre><code>babylon terraform-cloud workspace vars delete [OPTIONS] VAR_KEY\n</code></pre> <p>Options:</p> Name Type Description Default <code>-w</code>, <code>--workspace</code> filetype Id of the workspace to use None <code>-f</code>, <code>--force</code> boolean Should validation be skipped ? <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-terraform-cloud-workspace-vars-get","title":"babylon terraform-cloud workspace vars get","text":"<p>Get VAR_KEY variable in a workspace</p> <p>Requires key <code>workspace_id</code> in <code>terraform_workspace.yaml</code> in the working_dir.</p> <p>Usage:</p> <pre><code>babylon terraform-cloud workspace vars get [OPTIONS] VAR_KEY\n</code></pre> <p>Options:</p> Name Type Description Default <code>-o</code>, <code>--output</code> file File to which content should be outputted (json-formatted) None <code>-w</code>, <code>--workspace</code> filetype Id of the workspace to use None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-terraform-cloud-workspace-vars-get-all","title":"babylon terraform-cloud workspace vars get-all","text":"<p>Get all available variables in the workspace</p> <p>Requires key <code>workspace_id</code> in <code>terraform_workspace.yaml</code> in the working_dir.</p> <p>Usage:</p> <pre><code>babylon terraform-cloud workspace vars get-all [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-o</code>, <code>--output</code> file File to which content should be outputted (json-formatted) None <code>-w</code>, <code>--workspace</code> filetype Id of the workspace to use None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-terraform-cloud-workspace-vars-update","title":"babylon terraform-cloud workspace vars update","text":"<p>Update VAR_KEY variable in a workspace</p> <p>More information on the arguments can be found at : https://developer.hashicorp.com/terraform/cloud-docs/api-docs/variables#request-body</p> <p>Requires key <code>workspace_id</code> in <code>terraform_workspace.yaml</code> in the working_dir.</p> <p>Usage:</p> <pre><code>babylon terraform-cloud workspace vars update [OPTIONS] VAR_KEY\n</code></pre> <p>Options:</p> Name Type Description Default <code>-w</code>, <code>--workspace</code> filetype Id of the workspace to use None <code>--value</code> filetype A new value to apply to the variable None <code>--description</code> filetype A new description to apply to the variable None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-working-dir","title":"babylon working-dir","text":"<p>Command group handling working directory information</p> <p>Usage:</p> <pre><code>babylon working-dir [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>complete: Complete the current working_dir for missing elements</li> <li>display: No description was provided with this command.</li> <li>init: Initialize the current working_dir</li> <li>validate: Validate the current working_dir</li> <li>zip-env: Zip a working_dir to given PATH</li> </ul>"},{"location":"cli/#babylon-working-dir-complete","title":"babylon working-dir complete","text":"<p>Complete the current working_dir for missing elements</p> <p>Usage:</p> <pre><code>babylon working-dir complete [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-working-dir-display","title":"babylon working-dir display","text":"<p>Usage:</p> <pre><code>babylon working-dir display [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-working-dir-init","title":"babylon working-dir init","text":"<p>Initialize the current working_dir</p> <p>Usage:</p> <pre><code>babylon working-dir init [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-working-dir-validate","title":"babylon working-dir validate","text":"<p>Validate the current working_dir</p> <p>Usage:</p> <pre><code>babylon working-dir validate [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#babylon-working-dir-zip-env","title":"babylon working-dir zip-env","text":"<p>Zip a working_dir to given PATH</p> <p>PATH can be a folder (archive name will default to working_dir.zip) or a .zip file</p> <p>Usage:</p> <pre><code>babylon working-dir zip-env [OPTIONS] PATH\n</code></pre> <p>Options:</p> Name Type Description Default <code>-f</code>, <code>--force</code> boolean Force replacement of existing file with new zip <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"contribute/","title":"How-to contribute to Babylon","text":"<p>Babylon use a hierarchy of groups, subgroups, and commands to allow the user to guide him. So if you want to create a new set of commands you will want to make sure to group them in a logical structure.</p>"},{"location":"contribute/#guidelines","title":"Guidelines","text":"<p>Babylon code style is enforced with three tools that block pull requests and push on the main branch.</p>"},{"location":"contribute/#formatting-with-yapf","title":"Formatting with yapf","text":"<p>A <code>.style.yapf</code> file is included at the root of the project and specifies specific parameters Babylon uses. Please integrate <code>yapf</code> autoformatting within your IDE choice.</p>"},{"location":"contribute/#linting-with-flake8","title":"Linting with Flake8","text":"<p>A <code>.flake8</code> file is included at the root of the project and specifies specific parameters Babylon uses. Please integrate <code>flake8</code> linting within your IDE of choice.</p>"},{"location":"contribute/#testing-with-pytest","title":"Testing with pytest","text":"<p>Units tests are located in the <code>tests</code> folder. Tests should be run when the <code>Babylon/utils</code> are modified as it is for now the only part of the code that is automated.</p>"},{"location":"contribute/#the-plugin-babylon-dev-tools","title":"The plugin <code>babylon dev-tools</code>","text":"<p>The plugin <code>babylon dev-tools</code> is available, once you added it you can do <code>babylon dev-tools --help</code> to check the existing commands</p>"},{"location":"contribute/#adding-the-plugin","title":"Adding the plugin","text":"<p>In the folder you cloned Babylon you can do the following command to activate the plugin</p> <pre><code>babylon config plugin add plugins/dev_tools\n</code></pre> <p>After running this command you will have access to the plugin in you babylon</p>"},{"location":"contribute/#use-babylon-dev-tools-to-initialize-elements","title":"Use <code>babylon dev-tools</code> to initialize elements","text":"<p>You can use <code>babylon dev-tools initialize-group</code> to initialize all the files for a new group (works with subgroups too)</p> <pre><code>babylon self initialize-group mynewgroup mynewsubgroup\n# This command will try to create the group mynewsubgroup in mynewgroup\n# if mynewgroup does not exist it will create it first\n</code></pre> <p>After running the previous command you will have this new structure added to the project</p> <pre><code>Babylon\n\u251c\u2500\u2500 groups/\n\u2502   \u251c\u2500\u2500 __init__.py            &lt; This file is modified to add the new command to the cli\n\u2502   \u251c\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 mynewgroup/            &lt; This folder is created\n\u2502       \u251c\u2500\u2500 __init__.py        &lt; This file is initialized\n\u2502       \u251c\u2500\u2500 commands/          &lt; This folder is created\n\u2502       |   \u2514\u2500\u2500 __init__.py    &lt; This file is initialized\n\u2502       \u2514\u2500\u2500 groups/            &lt; This folder is created\n\u2502           \u251c\u2500\u2500 __init__.py    &lt; This file is initialized and then modified to add the new subcommand to the cli\n\u2502           \u2514\u2500\u2500 mynewsubgroup/ &lt; This folder is created (with the same hierarchy as mynewgroup inside)\n\u2514\u2500\u2500 ...\n</code></pre> <p>You can use <code>babylon dev-tools initialize-command</code> to initialize a new command (will initialize the required groups if non existent). You can add as many groups as you want (starting from 0 groups)</p> <pre><code>babylon dev-tools initialize-command mynewgroup mynewcommand\n# This command will try to create the command mynewcommand in mynewgroup\n# if mynewgroup does not exist it will create it first\n</code></pre> <p>After running the previous command you will have the following change to the structure</p> <pre><code>Babylon\n\u251c\u2500\u2500 groups/\n\u2502   \u251c\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 mynewgroup/\n\u2502       \u251c\u2500\u2500 commands/\n\u2502       |   \u251c\u2500\u2500 mynewcommand.py &lt; This file is initialized\n\u2502       |   \u2514\u2500\u2500 __init__.py     &lt; This file is modified to add the new command to the cli\n\u2502       \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 ...\n</code></pre> <p>If you want to do it by hand you can check the following sections for a manual approach to creating a group / subgroup / command</p>"},{"location":"contribute/#create-files-by-hand","title":"Create files by hand","text":"<p>In this part you will learn to do what the commands of initialization have automatized.</p>"},{"location":"contribute/#creating-a-new-group-of-commands","title":"Creating a new group of commands","text":""},{"location":"contribute/#create-a-new-package-inside-babylongroups","title":"Create a new package inside <code>Babylon.groups</code>","text":"<p>This new package comes with a package called <code>commands</code> and a package named <code>groups</code> and you can use the following template for the <code>new_group.__init__.py</code></p> <pre><code>from click import group\nfrom click import pass_context\nfrom click.core import Context\n\nfrom .commands import list_commands\nfrom .groups import list_groups\n\n\n@group()\n@pass_context\ndef group_template(ctx: Context):\n    \"\"\"Group initialized from a template\"\"\"\n    pass\n\n\nfor _command in list_commands:\n    group_template.add_command(_command)\n\nfor _group in list_groups:\n    group_template.add_command(_group)\n</code></pre>"},{"location":"contribute/#initialize-the-commands__init__py","title":"Initialize the <code>commands.__init__.py</code>","text":"<p>You can use the following template to initialize the <code>new_group.commands.__init__.py</code></p> <pre><code>\nlist_commands = [\n]\n</code></pre>"},{"location":"contribute/#initialize-the-groups__init__py","title":"Initialize the <code>groups.__init__.py</code>","text":"<p>You can use the following template to initialize the <code>new_group.groups.__init__.py</code></p> <pre><code>\nlist_groups = [\n]\n</code></pre>"},{"location":"contribute/#add-your-group-to-the-groups-callable-by-the-cli","title":"Add your group to the groups callable by the cli","text":"<p>You have to add an import for your group in the <code>Babylon.groups.__init__.py</code></p> <pre><code>from .api import api\nfrom .new_group import new_group  # Add your import here\n\ncommand_groups = [\n    api,\n    new_group,  # Add your group command to the list of existing commands\n]\n</code></pre> <p>And your new group is then ready to be called</p> <pre><code>babylon new-group\n#Usage: babylon new-group [OPTIONS] COMMAND [ARGS]...\n#\n#  New group of commands\n#\n#Options:\n#  --help  Show this message and exit.\n#\n#Commands:\n#  my_command  Doc-string for my new command\n</code></pre>"},{"location":"contribute/#adding-a-sub-group-in-an-existing-group","title":"Adding a sub-group in an existing group","text":"<p>You follow the same instruction as adding a group in <code>Babylon.groups</code> but in a sub-package.</p> <ul> <li>Create a new package in <code>Babylon.groups.&lt;command&gt;.groups</code></li> <li>Add the new packages <code>Babylon.groups.&lt;command&gt;.groups.&lt;subcommand&gt;.commands</code>   and <code>Babylon.groups.&lt;command&gt;.groups.&lt;subcommand&gt;.groups</code></li> <li>Initialize the multiple <code>__init__.py</code> the same way as if you were creating a group for <code>Babylon</code></li> <li>Add your group in the list of groups in the file <code>Babylon.groups.&lt;command&gt;.groups.__init__.py</code> instead of the one   in <code>Babylon.groups.__init__.py</code></li> </ul>"},{"location":"contribute/#adding-a-new-command-to-an-existing-group","title":"Adding a new command to an existing group","text":""},{"location":"contribute/#template","title":"Template","text":"<p>This template can be copied in the <code>commands</code> package for the group we want to add the command to.</p> <pre><code>import logging\n\nfrom click import command\n\nlogger = logging.getLogger(\"Babylon\")\n\n\n@command()\ndef command_template():\n    \"\"\"Command created from a template\"\"\"\n    logger.warning(\"This command was initialized from a template and is empty\")\n</code></pre>"},{"location":"contribute/#add-to-commands__init__py","title":"Add to <code>commands.__init__.py</code>","text":"<p>Once the command is created you can make a link to it in the <code>commands.__init__.py</code> file</p> <pre><code>from .older_command import older_command\nfrom .my_command import my_command  # You import your new command here\n\nlist_commands = [\n    older_command,\n    my_command,  # And you add it to the list of existing commands here\n]\n</code></pre> <p>And that's all folks, you added your command to an existing group of commands</p>"},{"location":"dependencies/","title":"List of dependencies","text":"<p>Azure connection requirements </p> <p>Azure services requirements </p> <p>Click requirements </p> <p>Cosmotech specific requirements </p> <p>Other requirements </p> <p>Testing requirements </p> <p>Documentation generation requirements </p>"},{"location":"environment/","title":"About the environment","text":"<p>An environment is a combination of 2 parts :</p> <ul> <li>A working directory</li> <li>A configuration</li> </ul> <p>Simple access to the full environment can be made by using the singleton <code>Babylon.utils.environment.Environment</code></p>"},{"location":"environment/#working-directory","title":"Working Directory","text":"<p>A working directory is the ensemble of files you will need to have a running simulator on the cloud.</p> <pre><code>Solution\n\u251c\u2500\u2500 ...\n\u2514\u2500\u2500 API\n    \u2514\u2500\u2500 API_FILES_HERE\n</code></pre> <p>More folders and file can be required and will be added in future version, don't hesitate to use <code>babylon working-dir complete</code> to add missing elements of the working directory.</p>"},{"location":"environment/#api","title":"API","text":"<p>This is a folder containing the different files you will want to send to the api</p> <p>For example:</p> <ul> <li>Solution.yaml</li> <li>Workspace.json</li> </ul>"},{"location":"environment/#configuration","title":"Configuration","text":"<p>The configuration can be controlled by the group of commands <code>babylon config</code></p> <p>A configuration is the combination of a Deployment and a Platform.</p>"},{"location":"environment/#deployment","title":"Deployment","text":"<p>A deployment is the link between a solution and a platform, it contains the ids required to access the instance of a solution on a platform</p>"},{"location":"environment/#deployyaml","title":"deploy.yaml","text":"<p>This is a yaml file containing a list of key-values used to identify the deployment of a solution in the platform</p> <pre><code># organization_id : the id of the organization on the API\norganization_id: \"\"\n# solution_id : the id of the solution on the API\nsolution_id: \"\"\n# workspace_id : the id of the workspace on the API\nworkspace_id: \"\"\n# workspace_key : the key of the workspace on the API shared with Terraform configuration\nworkspace_key: \"\"\n# api_url : the url of the API (used for validation)\napi_url: \"\"\n# resource_group_name: The name fo the resource group used for users deployment (function apps, webapp)\nresource_group_name: \"\"\n# resources_location: azure resource location for users deployment ex: westeurope\nresources_location: \"\"\n# adx_database_name : the name of the database used in Azure Data Explorer\nadx_database_name: \"\"\n# digital_twin_url : URL of the digital twin to use\ndigital_twin_url: \"\"\n# csm_simulator_repository: the solution simulator source repository\ncsm_simulator_repository: \"\"\n# simulator_repository: the solution simulator repository destination (repository value in Solution.yaml)\nsimulator_repository: \"\"\n# simulator_version: the solution simulator version (version value in Solution.yaml)\nsimulator_version: \"\"\n# send_scenario_metadata_to_event_hub: Set this property to false to not send scenario metada to Azure Event Hub Namespace for this Workspace.\n# The Event Hub Namespace must be named \\'&lt;organization_id\\&gt;-&lt;workspace_id\\&gt;\\' (in lower case).\n# This Namespace must also contain two Event Hubs named \\'probesmeasures\\' and \\'scenariorun\\'.\nsend_scenario_metadata_to_event_hub: true\n# use_dedicated_event_hub_namespace: Set this property to false to not to use a dedicated Azure Event Hub Namespace for this Workspace.\n# The Event Hub Namespace must be named \\'&lt;organization_id\\&gt;-&lt;workspace_id\\&gt;\\' (in lower case).\n# This Namespace must also contain two Event Hubs named \\'scenariometadata\\' and \\'scenariorunmetadata\\'.\nuse_dedicated_event_hub_namespace: true\n# PowerBI workspace id\npowerbi_workspace_id: \"\"\n</code></pre>"},{"location":"environment/#platform","title":"Platform","text":"<p>A platform is a cloud where you deployed an API, you set the information required to access given platform</p>"},{"location":"environment/#platformyaml","title":"platform.yaml","text":"<p>This is a yaml file containing a list of key values used to identify the platform to connect</p> <pre><code># api_url : the url of the API\napi_url: \"\"\n# api_scope : the default scope used by the API\napi_scope: \"\"\n# azure_subscription : The azure subscription used to contain the platform\nazure_subscription: \"\"\n# adx_cluster_name: The name of the Azure Data Explorer Cluster\nadx_cluster_name: \"\"\n# resource_group_name: The name fo the resource group used on the platform\nresource_group_name: \"\"\n# ACR source registry name source_registry.azurecr.io\ncsm_acr_registry_name: \"\"\n# ACR destination registry name dest_registry.azurecr.io\nacr_registry_name: \"\"\n# resources_location: azure resource location used on the platform ex: westeurope\nresources_location: \"\"\n# Storage account name\nstorage_account_name: \"\"\n# PowerBI api scope\npowerbi_api_scope: \"https://analysis.windows.net/powerbi/api/.default\"\n\n</code></pre>"},{"location":"environment/#environment-variables-override","title":"Environment variables override","text":"<p>The following environment variables are available to override the default values used by babylon (for example while making a bash script chaining commands)</p> Environment variable Default Effect <code>BABYLON_CONFIG_DIRECTORY</code> <code>~/.config/babylon/</code> Allows to replace the used configuration directory <code>BABYLON_WORKING_DIRECTORY</code> <code>.</code> aka you current running dir Allows to replace the current working directory"},{"location":"installation/","title":"Installation","text":"<pre><code>git clone git@github.com:Cosmo-Tech/Babylon.git\ncd Babylon\npip install .\n</code></pre>"},{"location":"installation/#running-babylon-with-docker","title":"Running Babylon with Docker","text":"<pre><code>docker pull ghcr.io/cosmo-tech/babylon:latest\nmkdir config workingdir\ndocker run -it --rm --mount type=bind,source=\"$(pwd)\"/config,target=/opt/babylon/config --mount type=bind,source=\"$(pwd)\"/workingdir,target=/etc/babylon/workingdir babylon\n</code></pre> <p>Then you can access and edit the following host directories: - Configuration is in host <code>config/</code> directory, (<code>/opt/babylon/config/</code> in the container) - Configuration is in host <code>workingdir/</code> directory, (<code>/etc/babylon/workingdir/</code> in the container)</p>"},{"location":"installation/#dev-mode-installation","title":"Dev mode installation","text":"<p>If you want to develop on top of Babylon you can set it up in developer mode (<code>-e</code>)</p> <p>And if you don't want to multiply versions of Babylon, you can also add it in a virtual environment (requires <code>venv</code>) </p> <pre><code>python -m venv .venv       # Create your venv named .venv\nsource .venv/bin/activate  # Activate your venv\npip install -e .           # Install Babylon in developer mode\n</code></pre> <p>The next line is optional, run it if you want to have the dev-tools plugin to facilitate command &amp; groups manipulation</p> <pre><code>babylon config plugin add plugins/dev_tools # Add the plugin dev_tools situated in the folder plugins/dev_tools\n</code></pre>"},{"location":"installation/#autocompletion","title":"Autocompletion","text":"<p>After install you can run the following commands to get autocompletion (in bash, and stays effective after restarts as you modify your <code>.bashrc</code>)</p> <pre><code>echo 'eval \"$(_BABYLON_COMPLETE=bash_source babylon)\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre> <p>You can also only run the following command to have autocompletion until you close your current terminal :</p> <pre><code>eval \"$(_BABYLON_COMPLETE=bash_source babylon)\"\n</code></pre> <p>For other type of command line you can check this link for official click documentation</p>"},{"location":"macro/","title":"Macro commands","text":""},{"location":"macro/#concept","title":"Concept","text":"<p>The idea of a macro command is to allow the developer to do a script of commands inside of Babylon instead of using bash or other technologies.</p> <p>To make this possible 2 elements are required :  - A way to call a command inside another command - A way for commands to exchange information between their runs</p>"},{"location":"macro/#helpers","title":"Helpers","text":"<p>The following function exists to help you run other commands inside a command.</p>"},{"location":"macro/#Babylon.utils.command_helper.run_command","title":"run_command","text":"<pre><code>run_command(command_line)\n</code></pre> <p>Helper used to run a command</p> <p>Parameters:</p> <ul> <li> command_line             (<code>list[str]</code>)         \u2013 <p>command line of the command to run</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code>         \u2013 <p>result of the command</p> </li> </ul>"},{"location":"macro/#return-type","title":"Return type","text":"<p>The following class was defined as a response type for commands allowing returns to keep information</p>"},{"location":"macro/#Babylon.utils.response.CommandResponse","title":"CommandResponse","text":"<p>Contains command, status and data output from a command return value</p>"},{"location":"macro/#Babylon.utils.response.CommandResponse.dump","title":"dump","text":"<pre><code>dump(output_file)\n</code></pre> <p>Dump command response data in a json file</p>"},{"location":"plugins/","title":"Concerning plugins","text":"<p>Now, where to begin? Ah, yes. \"Concerning plugins\". Plugins have been added as a part of babylon before the 1.0. Quite content to ignore and be ignored by the world of the other commands. Babylon being, after all, full of commands beyond count. Plugins must seem of little importance, being neither renowned as great commands, nor being part of the roadmap. ... In fact, it has been remarked by some that plugins only real usage if for other developers. A rather unfair observation as they have also been developed by the maintainers of the repo, and made an integral part of Babylon. But where their hearts truly lies is in peace and easiness of development.</p>"},{"location":"plugins/#how-to-create-a-plugin","title":"How to create a plugin","text":"<p>A plugin folder follows a simple basic format:</p> <pre><code>- __init__.py\n- requirements.txt\n- plugin_config.yaml\n</code></pre> <p>The <code>__init__.py</code> file contains at minima a click command named after the plugin (for example: <code>MyPlugin</code>)</p> <pre><code>import click\n\n\n@click.command()\ndef MyPlugin():\n    print(\"This is my awesome Plugin\")\n</code></pre> <p>The <code>requirements.txt</code> contains all specific requirements necessary for the plugin, in case of conflict with the plugins required by Babylon they won't be installed</p> <p>The <code>plugin_config.yaml</code> contains some information about the plugin, as of now it is relatively bare</p> <pre><code>plugin_name: MyPlugin\n</code></pre> <p>You can see that the name of the command in the <code>__init__.py</code> and the <code>plugin_name</code> in the <code>plugin_config.yaml</code> are identical. It is by design, as the parameter <code>plugin_name</code> is used by babylon to find the command in the <code>__init__.py</code> to make it an available command.</p> <p>If you want an easier time creating a plugin, you can use the command <code>babylon dev-tools initialize-plugin</code> of the plugin <code>dev-tools</code> to create a bare plugin ready for you to develop.</p>"},{"location":"plugins/#use-of-plugin-babylon-dev-tools-to-add-groups-and-commands","title":"Use of plugin <code>babylon dev-tools</code> to add groups and commands","text":"<p>The plugin <code>babylon dev-tools</code> has an optional parameter <code>--plugin</code> which allows you to apply its command directly to an installed plugin. Every of those commands will then be available to you if you want to follow the babylon infrastructure for your plugin.</p> <p>Those commands suppose you initialized your plugin using <code>babylon dev-tools initialize-plugin</code> to have the basic architecture based on the babylon one.</p>"},{"location":"plugins/#interact-with-a-plugin","title":"Interact with a plugin","text":"<p>You can make use of the group of commands <code>babylon config plugin</code> to add/remove or activate/deactivate a plugin.</p> <p>Adding a plugin makes it known to babylon, before its folder are ignored and any change you made to them would have no effect, removing a plugin won't delete your folder, it will only unlink them from babylon at the configuration level.</p> <p>Activating a plugin will make it available in the cli, be careful, a plugin with the name of a babylon core command won't be usable even if not refused when adding it. This is by design, core commands are always first. Deactivating a plugin won't remove it, it will just make the command unavailable to the cli, reactivating it will make it available once again.</p>"},{"location":"Utils/api/","title":"Cosmotech Api","text":""},{"location":"Utils/api/#Babylon.utils.api","title":"<code>Babylon.utils.api</code>","text":""},{"location":"Utils/api/#Babylon.utils.api.camel_to_underscore","title":"<code>camel_to_underscore(name)</code>","text":"<p>Will convert a string from camelCase to snake_case will have no effect if the parameter is not a string</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Any</code> <p>the string to convert</p> required <p>Returns:</p> Type Description <code>Any</code> <p>the converted string</p>"},{"location":"Utils/api/#Babylon.utils.api.convert_keys_case","title":"<code>convert_keys_case(element, convert_function)</code>","text":"<p>Will apply a convert function to all keys in an object</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Any</code> <p>the object to be updated</p> required <code>convert_function</code> <p>the function to apply</p> required <p>Returns:</p> Type Description <code>Any</code> <p>an object of the same type as the original one where all dict keys had the convert_function applied</p>"},{"location":"Utils/api/#Babylon.utils.api.filter_api_response","title":"<code>filter_api_response(api_response_body, fields)</code>","text":"<p>This function allow to apply a filter on an api response list body keys</p> <p>Parameters:</p> Name Type Description Default <code>api_response_body</code> <code>Iterable</code> <p>A Set api response data in key=&gt;value format</p> required <code>fields</code> <code>Iterable[str]</code> <p>A Set of keys witch will be keep in the response</p> required"},{"location":"Utils/api/#Babylon.utils.api.filter_api_response_item","title":"<code>filter_api_response_item(api_response_body, fields)</code>","text":"<p>This function allow to apply a filter on an api unique response body keys</p> <p>Parameters:</p> Name Type Description Default <code>api_response_body</code> <code>Any</code> <p>A single api response data in key=&gt;value format</p> required <code>fields</code> <code>Iterable[str]</code> <p>A Set of keys witch will be keep in the response</p> required"},{"location":"Utils/api/#Babylon.utils.api.get_api_file","title":"<code>get_api_file(api_file_path, use_working_dir_file)</code>","text":"<p>This function will try to find the correct file, and return its content     in a format ready to be used with the cosmotech api Accepts yaml and json files</p> <p>Parameters:</p> Name Type Description Default <code>api_file_path</code> <code>str</code> <p>The path to the file to be loaded</p> required <code>use_working_dir_file</code> <code>bool</code> <p>Should the path be relative to the working directory ?</p> required <p>Returns:</p> Type Description <p>None if the file was not found, else the content of the loaded file</p>"},{"location":"Utils/api/#Babylon.utils.api.underscore_to_camel","title":"<code>underscore_to_camel(name)</code>","text":"<p>Will convert a string from snake_case to camelCase will have no effect if the parameter is not a string</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Any</code> <p>the string to convert</p> required <p>Returns:</p> Type Description <code>Any</code> <p>the converted string</p>"},{"location":"Utils/config/","title":"Configuration","text":""},{"location":"Utils/config/#Babylon.utils.configuration.Configuration","title":"<code>Configuration</code>","text":"<p>Base object created to store in file the configuration used in babylon</p>"},{"location":"Utils/config/#Babylon.utils.configuration.Configuration.create_deploy","title":"<code>create_deploy(deploy_name)</code>","text":"<p>Create a new deployment file from the template and open it with the default text editor</p> <p>Parameters:</p> Name Type Description Default <code>deploy_name</code> <code>str</code> <p>the name of the new deploy</p> required"},{"location":"Utils/config/#Babylon.utils.configuration.Configuration.edit_deploy","title":"<code>edit_deploy(deploy_path)</code>","text":"<p>Open a given deployment file with the default text editor</p> <p>Parameters:</p> Name Type Description Default <code>deploy_path</code> <code>pathlib.Path</code> <p>the path of the deployment</p> required"},{"location":"Utils/config/#Babylon.utils.configuration.Configuration.get_deploy_path","title":"<code>get_deploy_path()</code>","text":"<p>Get path to the current deployment file</p> <p>Returns:</p> Type Description <code>Optional[pathlib.Path]</code> <p>path to the current deployment file</p>"},{"location":"Utils/config/#Babylon.utils.configuration.Configuration.get_deploy_var","title":"<code>get_deploy_var(var_name)</code>","text":"<p>Read a key value from the current deployment file</p> <p>Parameters:</p> Name Type Description Default <code>var_name</code> <p>the key to read</p> required <p>Returns:</p> Type Description <code>Optional[object]</code> <p>the value of the key in the deployment file if exists else None</p>"},{"location":"Utils/config/#Babylon.utils.configuration.Configuration.list_deploys","title":"<code>list_deploys()</code>","text":"<p>List existing deployment configurations</p> <p>Returns:</p> Type Description <code>list[pathlib.Path]</code> <p>a list of available deployments names</p>"},{"location":"Utils/config/#Babylon.utils.configuration.Configuration.set_deploy","title":"<code>set_deploy(deploy_path)</code>","text":"<p>Change configured deployment to the one given</p> <p>Parameters:</p> Name Type Description Default <code>deploy_path</code> <code>pathlib.Path</code> <p>the deployment path</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the change was a success</p>"},{"location":"Utils/config/#Babylon.utils.configuration.Configuration.create_platform","title":"<code>create_platform(platform_name)</code>","text":"<p>Create a new platform file from the template and open it with the default text editor</p> <p>Parameters:</p> Name Type Description Default <code>platform_name</code> <code>str</code> <p>the name of the new platform</p> required"},{"location":"Utils/config/#Babylon.utils.configuration.Configuration.edit_platform","title":"<code>edit_platform(platform_path)</code>","text":"<p>Open a given platform file with the default text editor</p> <p>Parameters:</p> Name Type Description Default <code>platform_path</code> <code>pathlib.Path</code> <p>the path of the platform</p> required"},{"location":"Utils/config/#Babylon.utils.configuration.Configuration.get_platform_path","title":"<code>get_platform_path()</code>","text":"<p>Get path to the current platform file</p> <p>Returns:</p> Type Description <code>Optional[pathlib.Path]</code> <p>path to the current platform file</p>"},{"location":"Utils/config/#Babylon.utils.configuration.Configuration.get_platform_var","title":"<code>get_platform_var(var_name)</code>","text":"<p>Read a key value from the current platform file</p> <p>Parameters:</p> Name Type Description Default <code>var_name</code> <p>the key to read</p> required <p>Returns:</p> Type Description <code>Optional[object]</code> <p>the value of the key in the platform file if exists else None</p>"},{"location":"Utils/config/#Babylon.utils.configuration.Configuration.list_platforms","title":"<code>list_platforms()</code>","text":"<p>List existing platform configurations</p> <p>Returns:</p> Type Description <code>list[pathlib.Path]</code> <p>a list of available platforms names</p>"},{"location":"Utils/config/#Babylon.utils.configuration.Configuration.set_platform","title":"<code>set_platform(platform_path)</code>","text":"<p>Change configured platform to the one given</p> <p>Parameters:</p> Name Type Description Default <code>platform_path</code> <code>pathlib.Path</code> <p>the platform path</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the change was a success</p>"},{"location":"Utils/config/#Babylon.utils.configuration.Configuration.save_config","title":"<code>save_config()</code>","text":"<p>Save the current config</p>"},{"location":"Utils/config/#Babylon.utils.configuration.Configuration.check_api","title":"<code>check_api()</code>","text":"<p>Returns:</p> Type Description <code>bool</code> <p>True if the api targeted in the deploy is the same as the platform we use</p>"},{"location":"Utils/decorators/","title":"Decorators","text":""},{"location":"Utils/decorators/#Babylon.utils.decorators","title":"<code>Babylon.utils.decorators</code>","text":""},{"location":"Utils/decorators/#Babylon.utils.decorators.describe_dry_run","title":"<code>describe_dry_run(description)</code>","text":"<p>Add a dry run description for the decorated call</p> <p>Parameters:</p> Name Type Description Default <code>description</code> <code>str</code> <p>description to de displayed during dry runs (accepts markdown content)</p> required"},{"location":"Utils/decorators/#Babylon.utils.decorators.get_from_deploy_config","title":"<code>get_from_deploy_config(yaml_key)</code>","text":"<p>deploy config file</p>"},{"location":"Utils/decorators/#Babylon.utils.decorators.get_from_platform_config","title":"<code>get_from_platform_config(yaml_key)</code>","text":"<p>platform config file</p>"},{"location":"Utils/decorators/#Babylon.utils.decorators.insert_argument","title":"<code>insert_argument(getter)</code>","text":"<p>Decorator calling a getter with an argument and storing the result as an inserted argument</p> <p>Parameters:</p> Name Type Description Default <code>getter</code> <code>Callable[[str], Any]</code> <p>function</p> required"},{"location":"Utils/decorators/#Babylon.utils.decorators.output_to_file","title":"<code>output_to_file(func)</code>","text":"<p>Add output to file option to a command</p>"},{"location":"Utils/decorators/#Babylon.utils.decorators.prepend_doc_with_ascii","title":"<code>prepend_doc_with_ascii(func)</code>","text":"<p>Decorator used to add a babylon ascii art in the documentation of a function</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable[..., Any]</code> <p>The function being decorated</p> required"},{"location":"Utils/decorators/#Babylon.utils.decorators.requires_external_program","title":"<code>requires_external_program(program_name)</code>","text":"<p>Decorator allowing to check if a specific executable is available. If the check is failed the command won't run, and following checks won't be done</p> <p>Parameters:</p> Name Type Description Default <code>program_name</code> <code>str</code> <p>the name of the required program</p> required"},{"location":"Utils/decorators/#Babylon.utils.decorators.timing_decorator","title":"<code>timing_decorator(func)</code>","text":"<p>Decorator adding timings before and after the run of a function</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable[..., Any]</code> <p>The function being decorated</p> required"},{"location":"Utils/decorators/#Babylon.utils.decorators.working_dir_requires_file","title":"<code>working_dir_requires_file(file_path, arg_name=None)</code>","text":"<p>Decorator allowing to check if the working_dir has a specific file. If the check is failed the command won't run, and following checks won't be done</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>the path in the working_dir to the required file</p> required <code>arg_name</code> <code>Optional[str]</code> <p>Optional parameter that if set will send the effective path of the required file to the given arg</p> <code>None</code>"},{"location":"Utils/decorators/#Babylon.utils.decorators.working_dir_requires_yaml_key","title":"<code>working_dir_requires_yaml_key(yaml_path, yaml_key, arg_name=None)</code>","text":"<p>Decorator allowing to check if the working_dir has specific key in a yaml file. If the check is failed the command won't run, and following checks won't be done</p> <p>Parameters:</p> Name Type Description Default <code>yaml_path</code> <code>str</code> <p>the path in the working_dir to the yaml file</p> required <code>yaml_key</code> <code>str</code> <p>the required key</p> required <code>arg_name</code> <code>Optional[str]</code> <p>optional parameter that will send the value of the yaml key to the given arg of the function</p> <code>None</code>"},{"location":"Utils/others/","title":"Other utils","text":""},{"location":"Utils/others/#Babylon.utils.interactive","title":"<code>Babylon.utils.interactive</code>","text":""},{"location":"Utils/others/#Babylon.utils.interactive.ask_for_group","title":"<code>ask_for_group(prompt, exists=False)</code>","text":"<p>Will prompt the user to get a group</p> <p>Parameters:</p> Name Type Description Default <code>prompt</code> <code>str</code> <p>Which text should be prompted to the user ?</p> required <code>exists</code> <code>bool</code> <p>Should the group exists ?</p> <code>False</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>the list of subgroups composing the path to the group</p>"},{"location":"Utils/others/#Babylon.utils.interactive.confirm_deletion","title":"<code>confirm_deletion(entity_type, entity_id)</code>","text":"<p>Ask for confirmation for deletion of an object</p> <p>Parameters:</p> Name Type Description Default <code>entity_type</code> <code>str</code> <p>Entity type</p> required <code>entity_id</code> <code>str</code> <p>Entity ID</p> required <p>Returns:</p> Type Description <code>bool</code> <p>Should execution continue ?</p>"},{"location":"Utils/others/#Babylon.utils.interactive.element_to_str","title":"<code>element_to_str(element, actual=None)</code>","text":"<p>Add a box before the element to display Box will be ticked if element == actual</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Any</code> <p>The element to display</p> required <code>actual</code> <code>Optional[Any]</code> <p>an element to compare the actual element</p> <code>None</code> <p>Returns:</p> Type Description <p>a string representation of the element prefixed with a box if actual is present</p>"},{"location":"Utils/others/#Babylon.utils.interactive.select_from_list","title":"<code>select_from_list(elements, actual=None)</code>","text":"<p>Start a prompt with 3 retries to select an element in a list</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code>list[Any]</code> <p>list of elements to chose</p> required <code>actual</code> <code>Optional[Any]</code> <p>an element that can be part of the list which is the current choice</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[Any]</code> <p>The element selected by the user</p>"},{"location":"Utils/others/#Babylon.utils.logging","title":"<code>Babylon.utils.logging</code>","text":""},{"location":"Utils/others/#Babylon.utils.logging.MultiLineHandler","title":"<code>MultiLineHandler</code>","text":"<p>         Bases: <code>rich.logging.RichHandler</code></p> <p>Simple multiple line Handler for logging. Will separate multiline logs and emit them one line at a time</p>"},{"location":"Utils/others/#Babylon.utils.logging.table_repr","title":"<code>table_repr(table_content, title=None, caption=None)</code>","text":"<p>Take a list of dicts and will return a nice table representation</p> <p>Parameters:</p> Name Type Description Default <code>table_content</code> <code>list[dict[Any, Any]]</code> <p>list of dict to tabulate</p> required <code>title</code> <code>Optional[str]</code> <p>optional title for the table</p> <code>None</code> <code>caption</code> <code>Optional[str]</code> <p>optional caption for the table</p> <code>None</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>list of strings for a pretty table display</p>"},{"location":"Utils/others/#Babylon.utils.yaml_utils","title":"<code>Babylon.utils.yaml_utils</code>","text":""},{"location":"Utils/others/#Babylon.utils.yaml_utils.compare_yaml_keys","title":"<code>compare_yaml_keys(template_yaml, target_yaml)</code>","text":"<p>Compare two yaml files and return the different keys they contain</p> <p>Parameters:</p> Name Type Description Default <code>template_yaml</code> <code>pathlib.Path</code> <p>Yaml file considered as the main file</p> required <code>target_yaml</code> <code>pathlib.Path</code> <p>Yaml file to be compared to the template</p> required <p>Returns:</p> Type Description <code>tuple[set, set]</code> <p>2 sets of keys : - missing_keys : the keys from the template missing from the target - superfluous_keys: the keys from the target that are not in the template</p>"},{"location":"Utils/others/#Babylon.utils.yaml_utils.complete_yaml","title":"<code>complete_yaml(template_yaml, target_yaml)</code>","text":"<p>Will add missing element from template in target</p> <p>Parameters:</p> Name Type Description Default <code>template_yaml</code> <code>pathlib.Path</code> <p>Yaml file considered as the main file</p> required <code>target_yaml</code> <code>pathlib.Path</code> <p>Yaml file to be compared to the template</p> required <p>Returns:</p> Type Description <p>Nothing</p>"},{"location":"Utils/others/#Babylon.utils.yaml_utils.read_yaml_key","title":"<code>read_yaml_key(yaml_file, key)</code>","text":"<p>Will read a key from a yaml file and return the value</p> <p>Parameters:</p> Name Type Description Default <code>yaml_file</code> <code>pathlib.Path</code> <p>path to the file to open</p> required <code>key</code> <code>str</code> <p>key to load</p> required <p>Returns:</p> Type Description <code>Optional[object]</code> <p>value of the key if found else None</p>"},{"location":"Utils/others/#Babylon.utils.yaml_utils.write_yaml_value","title":"<code>write_yaml_value(yaml_file, key, value)</code>","text":"<p>This function aloow to update a YAML file values</p> <p>Parameters:</p> Name Type Description Default <code>yaml_file</code> <code>pathlib.Path</code> <p>path to the file to open</p> required <code>key</code> <code>str</code> <p>key to load</p> required <code>value</code> <code>str</code> <p>the new value of the key</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"Utils/others/#Babylon.utils.string","title":"<code>Babylon.utils.string</code>","text":""},{"location":"Utils/others/#Babylon.utils.string.is_valid_command_name","title":"<code>is_valid_command_name(string)</code>","text":"<p>Check if a given string is a valid command name</p> <p>Parameters:</p> Name Type Description Default <code>string</code> <code>str</code> <p>the string to check</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the string is a valid command name</p>"},{"location":"Utils/others/#Babylon.utils.string.to_header_line","title":"<code>to_header_line(string)</code>","text":"<p>Convert a string to a header line of maximum length of MAX_LINE_LENGTH</p> <p>will center the string between <code>-</code> to show a delimitation</p> <p>Parameters:</p> Name Type Description Default <code>string</code> <code>str</code> <p>the string to transform</p> required <p>Returns:</p> Type Description <code>str</code> <p>the string centered with <code>-</code> padding</p>"},{"location":"Utils/typing/","title":"Specific types","text":""},{"location":"Utils/typing/#querytype","title":"QueryType","text":"<p>This type adds a capacity to easliy use file content as parameter to function.</p>"},{"location":"Utils/typing/#example-in-a-command","title":"Example in a command","text":"<p>The following code is an example of use of the type:</p> <pre><code>from Babylon.utils.typing import QueryType\nimport click\n\n@click.command()\n@click.argument(\"my_arg\", type=QueryType())\ndef my_call(my_arg):\n    print(\"The value of my arg is :\")\n    print(my_arg)\n</code></pre>"},{"location":"Utils/typing/#usage","title":"Usage","text":"<p>The <code>QueryType</code> accepts the following syntaxes :</p> <ul> <li><code>%deploy%&lt;JMESPath Query&gt;</code> : This will apply the given JMESPath query to the deploy config file and send the result as an argument instead.</li> <li><code>%platform%&lt;JMESPath Query&gt;</code> : Same as above but will get applied to the platform config file.</li> <li><code>%workdir[File/Path]%&lt;JMESPath Query&gt;</code> : This syntax will apply the JMESPath query to the give file in the working directory</li> </ul>"},{"location":"Utils/typing/#example-use","title":"Example use","text":"<p>Using the previously defined command and the following example config files</p> <pre><code># Deploy\nsolution_id: \"MySolution\"\n</code></pre> <pre><code># Platform\norganization_id: \"MyOrganization\"\n</code></pre> <p>We can except the following results :</p> <pre><code>my_call %deploy%solution_id\n# The value of my arg is :\n# MySolution\nmy_call %platform%*\n# The value of my arg is :\n# ['MyOrganization']\n</code></pre> <p>For more information on the JMESPath syntax I invite you to check the following website : JMESPath.org</p>"},{"location":"Utils/typing/#Babylon.utils.typing.QueryType","title":"<code>Babylon.utils.typing.QueryType</code>","text":"<p>         Bases: <code>ParamType</code></p>"},{"location":"Utils/typing/#Babylon.utils.typing.QueryType.shell_complete","title":"<code>shell_complete(ctx, param, incomplete)</code>","text":"<p>Allow auto-completion of the parameter</p> <p>Parameters:</p> Name Type Description Default <code>ctx</code> <code>Context</code> <p>click context used to send this parameter value</p> required <code>param</code> <code>Parameter</code> <p>name of the parameter to be completed</p> required <code>incomplete</code> <code>str</code> <p>actual value to complete</p> required <p>Returns:</p> Type Description <code>List[CompletionItem]</code> <p>a list of item that could be the completed version of the parameter</p>"},{"location":"Utils/typing/#Babylon.utils.typing.QueryType.convert","title":"<code>convert(value, param, ctx)</code>","text":"<p>Convert the value of the parameter given in the console to the one passed to the underlying function</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>the value sent by the console</p> required <code>param</code> <code>Optional[Parameter]</code> <p>the name of the parameter</p> required <code>ctx</code> <code>Optional[Context]</code> <p>the click context that lead to this call</p> required <p>Returns:</p> Type Description <code>Any</code> <p>the value of the parameter that should be sent to the function</p>"},{"location":"Utils/working_dir/","title":"Working Directory","text":""},{"location":"Utils/working_dir/#Babylon.utils.working_dir.WorkingDir","title":"<code>WorkingDir</code>","text":"<p>Simple class describing a working_dir for Babylon use</p>"},{"location":"Utils/working_dir/#Babylon.utils.working_dir.WorkingDir.copy_template","title":"<code>copy_template()</code>","text":"<p>Initialize the working_dir by making a copy of the template</p>"},{"location":"Utils/working_dir/#Babylon.utils.working_dir.WorkingDir.compare_to_template","title":"<code>compare_to_template(update_if_error=False)</code>","text":"<p>Check if the current working_dir is valid (aka: has all folders and files required by the template)</p> <p>Parameters:</p> Name Type Description Default <code>update_if_error</code> <code>bool</code> <p>Replace error logs by info and update the current working_dir with missing elements</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>Is the working_dir valid ?</p>"},{"location":"Utils/working_dir/#Babylon.utils.working_dir.WorkingDir.create_zip","title":"<code>create_zip(zip_path, force_overwrite=False)</code>","text":"<p>Create a zip file of the working_dir to the given path</p> <p>Parameters:</p> Name Type Description Default <code>zip_path</code> <code>str</code> <p>A path to zip the working_dir (if a folder is given will name the zip \"working_dir.zip\"</p> required <code>force_overwrite</code> <code>bool</code> <p>should existing path be ignored and replaced ?</p> <code>False</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The effective path of the zip</p>"},{"location":"Utils/working_dir/#Babylon.utils.working_dir.WorkingDir.get_file","title":"<code>get_file(file_path)</code>","text":"<p>Will return the effective path of a file in the working_dir</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>the relative path of the file in the working_dir</p> required <p>Returns:</p> Type Description <code>pathlib.Path</code> <p>the path to the file</p>"},{"location":"Utils/working_dir/#Babylon.utils.working_dir.WorkingDir.get_yaml_key","title":"<code>get_yaml_key(yaml_path, yaml_key)</code>","text":"<p>Will get a key from a yaml in the working_dir</p> <p>Parameters:</p> Name Type Description Default <code>yaml_path</code> <code>str</code> <p>path to the yaml file in the working_dir</p> required <code>yaml_key</code> <code>str</code> <p>key to get in the yaml</p> required <p>Returns:</p> Type Description <code>Optional[object]</code> <p>the content of the yaml key</p>"},{"location":"plugins/devtools/","title":"Dev-tools","text":"<p>You can activate the plugin via the command <code>babylon config plugin add plugins/dev_tools</code></p>"},{"location":"plugins/devtools/#dev-tools","title":"dev-tools","text":"<p>Plugin used to simplify some development operations</p> <p>Usage:</p> <pre><code>dev-tools [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>-p</code>, <code>--plugin</code> text N/A None <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>initialize-command: Will initialize code for COMMAND_NAME and make it available in GROUP_NAME</li> <li>initialize-group: Will initialize code for GROUP_NAME and make it available</li> <li>initialize-plugin: Will initialize PLUGIN_NAME in PLUGIN_FOLDER</li> <li>list-required-keys: Check code base to list platform and deployment keys</li> <li>move-group: Command made to move groups</li> <li>parameter-value: Will display the value of the given QueryType argument</li> <li>rename-command: Will rename OLD_COMMAND_NAME to NEW_COMMAND_NAME in GROUP_NAME</li> <li>tests: Sub group for test commands</li> </ul>"},{"location":"plugins/devtools/#dev-tools-initialize-command","title":"dev-tools initialize-command","text":"<p>Will initialize code for COMMAND_NAME and make it available in GROUP_NAME</p> <p>COMMAND_NAME and GROUP_NAME must only contain alphanumeric characters or -</p> <p>Usage:</p> <pre><code>dev-tools initialize-command [OPTIONS] [GROUP_NAME]... COMMAND_NAME\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"plugins/devtools/#dev-tools-initialize-group","title":"dev-tools initialize-group","text":"<p>Will initialize code for GROUP_NAME and make it available</p> <p>GROUP_NAME must only contain alphanumeric characters or -</p> <p>Usage:</p> <pre><code>dev-tools initialize-group [OPTIONS] [GROUP_NAME]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"plugins/devtools/#dev-tools-initialize-plugin","title":"dev-tools initialize-plugin","text":"<p>Will initialize PLUGIN_NAME in PLUGIN_FOLDER</p> <p>Usage:</p> <pre><code>dev-tools initialize-plugin [OPTIONS] PLUGIN_FOLDER PLUGIN_NAME\n</code></pre> <p>Options:</p> Name Type Description Default <code>-a</code>, <code>--add</code> boolean Add the created plugin to the config. <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"plugins/devtools/#dev-tools-list-required-keys","title":"dev-tools list-required-keys","text":"<p>Check code base to list platform and deployment keys if GROUP_NAME is defined will limit the check to the given group</p> <p>Usage:</p> <pre><code>dev-tools list-required-keys [OPTIONS] [GROUP_NAME]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"plugins/devtools/#dev-tools-move-group","title":"dev-tools move-group","text":"<p>Command made to move groups</p> <p>Usage:</p> <pre><code>dev-tools move-group [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"plugins/devtools/#dev-tools-parameter-value","title":"dev-tools parameter-value","text":"<p>Will display the value of the given QueryType argument</p> <p>Usage:</p> <pre><code>dev-tools parameter-value [OPTIONS] ARG\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"plugins/devtools/#dev-tools-rename-command","title":"dev-tools rename-command","text":"<p>Will rename OLD_COMMAND_NAME to NEW_COMMAND_NAME in GROUP_NAME</p> <p>COMMAND_NAME and GROUP_NAME must only contain alphanumeric characters or -</p> <p>Usage:</p> <pre><code>dev-tools rename-command [OPTIONS] [GROUP_NAME]... OLD_COMMAND_NAME\n                         NEW_COMMAND_NAME\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"plugins/devtools/#dev-tools-tests","title":"dev-tools tests","text":"<p>Sub group for test commands</p> <p>Usage:</p> <pre><code>dev-tools tests [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>commands-to-test: List commands that require testing since GIT_REF</li> <li>how-to-test-command: Will go through the test organization to display the tests of the given COMMAND</li> <li>initialize-test-organization: Will update the test folder with missing files for new commands</li> </ul>"},{"location":"plugins/devtools/#dev-tools-tests-commands-to-test","title":"dev-tools tests commands-to-test","text":"<p>List commands that require testing since GIT_REF</p> <p>Usage:</p> <pre><code>dev-tools tests commands-to-test [OPTIONS] GIT_REF\n</code></pre> <p>Options:</p> Name Type Description Default <code>-o</code>, <code>--output</code> text Target file to write list of commands to be tested None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"plugins/devtools/#dev-tools-tests-how-to-test-command","title":"dev-tools tests how-to-test-command","text":"<p>Will go through the test organization to display the tests of the given COMMAND</p> <p>Usage:</p> <pre><code>dev-tools tests how-to-test-command [OPTIONS] [COMMAND]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"plugins/devtools/#dev-tools-tests-initialize-test-organization","title":"dev-tools tests initialize-test-organization","text":"<p>Will update the test folder with missing files for new commands</p> <p>Usage:</p> <pre><code>dev-tools tests initialize-test-organization [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"}]}