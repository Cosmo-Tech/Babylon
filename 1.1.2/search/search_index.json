{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Babylon CLI A simple CLI for interaction between Cosmotech Products and the cloud","title":"Home"},{"location":"#babylon-cli","text":"A simple CLI for interaction between Cosmotech Products and the cloud","title":"Babylon CLI"},{"location":"cli/","text":"babylon CLI used for cloud interactions between CosmoTech and multiple cloud environment The following environment variables are available to override the working directory or the configuration: BABYLON_CONFIG_DIRECTORY : path to a folder to use as a configuration directory BABYLON_WORKING_DIRECTORY : path to a folder to use as a working directory Usage: babylon [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --verbosity , -v text Either CRITICAL, ERROR, WARNING, INFO or DEBUG INFO --tests boolean Enable test mode, this mode changes output formatting. False -n , --dry-run boolean Will run commands in dry-run mode False -h , --help boolean Show this message and exit. False --version boolean N/A False Subcommands api : Group handling communication with the cosmotech API azure : Group allowing communication with Microsoft Azure Cloud config : Group made to work on the config debug : Add debug capacities of runs powerbi : Group interacting with PowerBI terraform-cloud : Group allowing interactions with the Terraform Cloud API working-dir : Command group handling working directory information babylon api Group handling communication with the cosmotech API Requires api_url in platform config file. Requires api_scope in platform config file. Usage: babylon api [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands connector : Subgroup handling Connectors in the cosmotech API dataset : Subgroup handling Datasets in the cosmotech API organization : Subgroup handling Organizations in the cosmotech API solution : Subgroup handling Solution in the cosmotech API workspace : Subgroup handling Work in the cosmotech API babylon api connector Subgroup handling Connectors in the cosmotech API Usage: babylon api connector [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands create : Register a new Connector by sending a JSON or YAML file to the API. delete : Unregister a Connector via Cosmotech API. get : Get a registered connector details. get-all : Get all registered connectors. get-currents : Get a registered connector details. babylon api connector create Register a new Connector by sending a JSON or YAML file to the API. Usage: babylon api connector create [OPTIONS] CONNECTOR_NAME Options: Name Type Description Default -i , --connector-file text Your custom Connector description file path None -t , --type choice ( ADT | STORAGE ) Connector type, allowed values : [ADT, STORAGE] _required -o , --output-file path The path to the file where the new Connector content should be outputted (json-formatted) None -e , --use-working-dir-file boolean Should the Connector file path be relative to Babylon working directory ? False -v , --version text Version of the Connector _required --help boolean Show this message and exit. False babylon api connector delete Unregister a Connector via Cosmotech API. Usage: babylon api connector delete [OPTIONS] [CONNECTOR_ID] Options: Name Type Description Default -i , --connector-file text In case the connector id is retrieved from a file None -f , --force boolean Don't ask for validation before delete False -e , --use-working-dir-file boolean Should the path be relative to the working directory ? False --help boolean Show this message and exit. False babylon api connector get Get a registered connector details. Usage: babylon api connector get [OPTIONS] CONNECTOR_ID Options: Name Type Description Default -o , --output_file path File to which content should be outputted (json-formatted) None -f , --fields text Fields witch will be keep in response data, by default all None --help boolean Show this message and exit. False babylon api connector get-all Get all registered connectors. Usage: babylon api connector get-all [OPTIONS] Options: Name Type Description Default -o , --output_file path The path to the file where Connectors should be outputted (json-formatted) None -f , --fields text Fields witch will be keep in response data, by default all None --help boolean Show this message and exit. False babylon api connector get-currents Get a registered connector details. Requires storage_connector_id in deploy config file. Requires adt_connector_id in deploy config file. Usage: babylon api connector get-currents [OPTIONS] Options: Name Type Description Default -o , --output_file path The path to the file where Connectors should be outputted (json-formatted) None -f , --fields text Fields witch will be keep in response data, by default all None --help boolean Show this message and exit. False babylon api dataset Subgroup handling Datasets in the cosmotech API Usage: babylon api dataset [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands create : Register new dataset by sending description file to the API. delete : Unregister a dataset via Cosmotech API. get : Get the state of the dataset in the API. get-all : Get all registered datasets. get-current : Get the state of the dataset in the API. update : Send a JSON or YAML file to the API to update a dataset. babylon api dataset create Register new dataset by sending description file to the API. Requires organization_id in deploy config file. Usage: babylon api dataset create [OPTIONS] [DATASET_NAME] Options: Name Type Description Default -c , --connector-id text N/A None -e , --use-working-dir-file boolean Should the path be relative to the working directory ? False -i , --dataset-file text Your custom dataset description file None -d , --description text New dataset description None -o , --output-file path File to which content should be outputted (json-formatted) None --help boolean Show this message and exit. False babylon api dataset delete Unregister a dataset via Cosmotech API. Requires organization_id in deploy config file. Usage: babylon api dataset delete [OPTIONS] [DATASET_ID] Options: Name Type Description Default -f , --force boolean Don't ask for validation before delete False -e , --use-working-dir-file boolean Should the path be relative to the working directory ? False -i , --dataset-file text In case the dataset id is retrieved from a file None --help boolean Show this message and exit. False babylon api dataset get Get the state of the dataset in the API. Requires organization_id in deploy config file. Usage: babylon api dataset get [OPTIONS] DATASET_ID Options: Name Type Description Default -o , --output-file path File to which content should be outputted (json-formatted) None -f , --fields text Fields witch will be keep in response data, by default all None -e , --use-working-dir-file boolean Should the path be relative to the working directory ? False --from-file boolean In case the dataset id is retrieved from a file False --help boolean Show this message and exit. False babylon api dataset get-all Get all registered datasets. Requires organization_id in deploy config file. Usage: babylon api dataset get-all [OPTIONS] Options: Name Type Description Default -o , --output-file path File to which content should be outputted (json-formatted) None -f , --fields text Fields witch will be keep in response data, by default all None --help boolean Show this message and exit. False babylon api dataset get-current Get the state of the dataset in the API. Requires organization_id in deploy config file. Requires dataset_id in deploy config file. Usage: babylon api dataset get-current [OPTIONS] Options: Name Type Description Default -o , --output-file path File to which content should be outputted (json-formatted) None -f , --fields text Fields witch will be keep in response data, by default all None --help boolean Show this message and exit. False babylon api dataset update Send a JSON or YAML file to the API to update a dataset. Requires organization_id in deploy config file. Usage: babylon api dataset update [OPTIONS] DATASET_ID Options: Name Type Description Default -c , --connector-id text N/A None -e , --use-working-dir-file boolean Should the path be relative to the working directory ? False -i , --dataset-file text Your custom dataset description file None -o , --output-file path File to which content should be outputted (json-formatted) None --help boolean Show this message and exit. False babylon api organization Subgroup handling Organizations in the cosmotech API Usage: babylon api organization [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands create : Register new organization by sending a JSON or YAML file delete : Delete organization via Cosmotech APi. get : Get the state of an specific organization in the API. get-all : Get all registered organization. get-current : Get the state of the current organization in the API. update : Update an Organization by sending a JSON or YAML file to Cosmotech Api. babylon api organization create Register new organization by sending a JSON or YAML file Usage: babylon api organization create [OPTIONS] ORGANIZATION_NAME Options: Name Type Description Default -i , --organization-file text Your custom Organization description file path None -s , --select boolean Select this new Organization as one of babylon context Organizations ? True -o , --output-file path The path to the file where the new Organization content should be outputted (json-formatted) None -e , --use-working-dir-file boolean Should the Organization file path be relative to Babylon working directory ? False --help boolean Show this message and exit. False babylon api organization delete Delete organization via Cosmotech APi. Usage: babylon api organization delete [OPTIONS] [ORGANIZATION_ID] Options: Name Type Description Default -i , --organization-file text In case the organization id is retrieved from a file None -f , --force boolean Don't ask for validation before delete False -e , --use-working-dir-file boolean Should the path be relative to the working directory ? False --help boolean Show this message and exit. False babylon api organization get Get the state of an specific organization in the API. Usage: babylon api organization get [OPTIONS] ORGANIZATION_ID Options: Name Type Description Default -o , --output-file path The path to the file where the new Organization content should be outputted (json-formatted) None -f , --fields text Fields witch will be keep in response data, by default all None --help boolean Show this message and exit. False babylon api organization get-all Get all registered organization. Usage: babylon api organization get-all [OPTIONS] Options: Name Type Description Default -o , --output-file path The path to the file where the new Organization content should be outputted (json-formatted) None -f , --fields text Fields witch will be keep in response data, by default all None --help boolean Show this message and exit. False babylon api organization get-current Get the state of the current organization in the API. Requires organization_id in deploy config file. Usage: babylon api organization get-current [OPTIONS] Options: Name Type Description Default -o , --output-file path The path to the file where the new Organization content should be outputted (json-formatted) None -f , --fields text Fields witch will be keep in response data, by default all None --help boolean Show this message and exit. False babylon api organization update Update an Organization by sending a JSON or YAML file to Cosmotech Api. Requires organization_id in deploy config file. Usage: babylon api organization update [OPTIONS] Options: Name Type Description Default -i , --organization-file text Your new Organization description file path _required -e , --use-working-dir-file boolean Should the path be relative to the working directory ? False --help boolean Show this message and exit. False babylon api solution Subgroup handling Solution in the cosmotech API Usage: babylon api solution [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands create : Send a JSON or YAML file to the API to create an solution. delete : Unregister a solution via Cosmotech APi. get : Get the state of the solution in the API. get-all : Get all registered solutions. get-current : Get the state of the solution in the API. handler : Group allowing solution handler management update : Send a JSON or YAML file to the API to update a solution. babylon api solution create Send a JSON or YAML file to the API to create an solution. Requires organization_id in deploy config file. Requires simulator_url in deploy config file. Requires simulator_version in deploy config file. Requires simulator_repository in deploy config file. Usage: babylon api solution create [OPTIONS] SOLUTION_NAME Options: Name Type Description Default -e , --use-working-dir-file boolean Should the path be relative to the working directory ? False -i , --solution-file text Your custom Solution description file path None -d , --description text New solution description None -o , --output-file path File to which content should be outputted (json-formatted) None -s , --select boolean Select this new Solution as babylon context solution ? True --help boolean Show this message and exit. False babylon api solution delete Unregister a solution via Cosmotech APi. Requires organization_id in deploy config file. Usage: babylon api solution delete [OPTIONS] [SOLUTION_ID] Options: Name Type Description Default -f , --force boolean Don't ask for validation before delete False -e , --use-working-dir-file boolean Should the path be relative to the working directory ? False -i , --solution-file text Your Solution description file path None --help boolean Show this message and exit. False babylon api solution get Get the state of the solution in the API. Requires organization_id in deploy config file. Usage: babylon api solution get [OPTIONS] [SOLUTION_ID] Options: Name Type Description Default -o , --output-file path The path to the file where Connector details should be outputted (json-formatted) None -i , --solution-file text Your Solution description file path None -f , --fields text Fields witch will be keep in response data, by default all None -e , --use-working-dir-file boolean Should the path be relative to the working directory ? False --help boolean Show this message and exit. False babylon api solution get-all Get all registered solutions. Requires organization_id in deploy config file. Usage: babylon api solution get-all [OPTIONS] Options: Name Type Description Default -o , --output-file path The path to the file where Solutions should be outputted (json-formatted) None -f , --fields text Fields witch will be keep in response data, by default all None --help boolean Show this message and exit. False babylon api solution get-current Get the state of the solution in the API. Requires organization_id in deploy config file. Requires solution_id in deploy config file. Usage: babylon api solution get-current [OPTIONS] Options: Name Type Description Default -o , --output-file path The path to the file where Connector details should be outputted (json-formatted) None -f , --fields text Fields witch will be keep in response data, by default all None --help boolean Show this message and exit. False babylon api solution handler Group allowing solution handler management Usage: babylon api solution handler [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands download : Download a solution handler zip. upload : Upload a solution handler zip. babylon api solution handler download Download a solution handler zip. Requires solution_id in deploy config file. Requires organization_id in deploy config file. Usage: babylon api solution handler download [OPTIONS] Options: Name Type Description Default -r , --run-template text The run Template identifier _required -t , --handler-type choice ( parameters_handler | validator | prerun | engine | postrun | scenariodata_transform ) Handler type _required --help boolean Show this message and exit. False babylon api solution handler upload Upload a solution handler zip. Requires solution_id in deploy config file. Requires organization_id in deploy config file. Usage: babylon api solution handler upload [OPTIONS] HANDLER_PATH Options: Name Type Description Default -o , --override boolean N/A False -r , --run-template text The run Template identifier _required -t , --handler-type choice ( parameters_handler | validator | prerun | engine | postrun | scenariodata_transform ) Handler type _required --help boolean Show this message and exit. False babylon api solution update Send a JSON or YAML file to the API to update a solution. Requires solution_id in deploy config file. Requires organization_id in deploy config file. Requires simulator_repository in deploy config file. Requires simulator_version in deploy config file. Requires simulator_url in deploy config file. Usage: babylon api solution update [OPTIONS] [SOLUTION_ID] Options: Name Type Description Default -e , --use-working-dir-file boolean Should the path be relative to the working directory ? False -i , --solution-file text Your custom Solution description file path None --help boolean Show this message and exit. False babylon api workspace Subgroup handling Work in the cosmotech API Usage: babylon api workspace [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands create : Send a JSON or YAML file to the API to create a workspace. delete : Unregister a workspace via Cosmotech APi. get : Get the state of the workspace in the API. get-all : Get all registered workspaces. get-current : Get the state of the workspace in the API. update : Send a JSON or YAML file to the API to update a workspace. babylon api workspace create Send a JSON or YAML file to the API to create a workspace. Requires solution_id in deploy config file. Requires organization_id in deploy config file. Requires use_dedicated_event_hub_namespace in deploy config file. Requires send_scenario_metadata_to_event_hub in deploy config file. Usage: babylon api workspace create [OPTIONS] WORKSPACE_NAME Options: Name Type Description Default -e , --use-working-dir-file boolean Should the path be relative to the working directory ? False -i , --workspace-file text Your custom workspace definition file path None -d , --description text Workspace description None -o , --output-file path The path to the file where the created workspace should be outputted (json-formatted) None -s , --select boolean Select this new Workspace as babylon context workspace ? True --help boolean Show this message and exit. False babylon api workspace delete Unregister a workspace via Cosmotech APi. Requires organization_id in deploy config file. Usage: babylon api workspace delete [OPTIONS] [WORKSPACE_ID] Options: Name Type Description Default -f , --force boolean Don't ask for validation before delete False -e , --use-working-dir-file boolean Should the path be relative to the working directory ? False -i , --workspace-file text In case the workspace id is retrieved from a file None --help boolean Show this message and exit. False babylon api workspace get Get the state of the workspace in the API. Requires organization_id in deploy config file. Usage: babylon api workspace get [OPTIONS] [WORKSPACE_ID] Options: Name Type Description Default -o , --output-file path The path to the file where Workspace details should be outputted (json-formatted) None -f , --fields text Fields witch will be keep in response data, by default all None -e , --use-working-dir-file boolean Should the path be relative to the working directory ? False -i , --workspace-file text In case the workspace id is retrieved from a file None --help boolean Show this message and exit. False babylon api workspace get-all Get all registered workspaces. Requires organization_id in deploy config file. Usage: babylon api workspace get-all [OPTIONS] Options: Name Type Description Default -o , --output-file path The path to the file where Workspaces should be outputted (json-formatted) None -f , --fields text Fields witch will be keep in response data, by default all None --help boolean Show this message and exit. False babylon api workspace get-current Get the state of the workspace in the API. Requires organization_id in deploy config file. Requires workspace_id in deploy config file. Usage: babylon api workspace get-current [OPTIONS] Options: Name Type Description Default -o , --output-file path The path to the file where Workspace details should be outputted (json-formatted) None -f , --fields text Fields witch will be keep in response data, by default all None --help boolean Show this message and exit. False babylon api workspace update Send a JSON or YAML file to the API to update a workspace. Requires solution_id in deploy config file. Requires organization_id in deploy config file. Requires use_dedicated_event_hub_namespace in deploy config file. Requires use_dedicated_event_hub_namespace in deploy config file. Usage: babylon api workspace update [OPTIONS] Options: Name Type Description Default -i , --workspace-file text In case the workspace id is retrieved from a file None -o , --output-file path The path to the file where new Workspace details should be outputted (json-formatted) None -e , --use-working-dir-file boolean Should the path be relative to the working directory ? False --help boolean Show this message and exit. False babylon azure Group allowing communication with Microsoft Azure Cloud Requires the program az to run. Usage: babylon azure [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands acr : Group interacting with Azure Container Registry adt : Allow communication with Azure Digital Twin adx : Group interacting with Azure Data Explorer arm : Group interacting with Azure Resources Manager storage : Group interacting with Azure Storage Blob babylon azure acr Group interacting with Azure Container Registry Requires the program docker to run. Usage: babylon azure acr [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands delete : Delete docker image from selected repository list : List all docker images in the specified registry pull : Pulls a docker image from the ACR registry given in platform configuration push : Push a docker image to the ACR registry given in platform configuration babylon azure acr delete Delete docker image from selected repository Requires simulator_version in deploy config file. Requires simulator_repository in deploy config file. Requires acr_dest_registry_name in platform config file. Requires acr_src_registry_name in platform config file. Usage: babylon azure acr delete [OPTIONS] Options: Name Type Description Default -r , --registry text Container Registry name to delete from, example: myregistry.azurecr.io None -d , --direction choice ( src | dest ) Container Registry to delete from None -i , --image text Remote docker image to pull, example hello-world:latest None -f , --force boolean Don't ask for validation before delete False --help boolean Show this message and exit. False babylon azure acr list List all docker images in the specified registry Requires acr_dest_registry_name in platform config file. Requires acr_src_registry_name in platform config file. Usage: babylon azure acr list [OPTIONS] Options: Name Type Description Default -r , --registry text Container Registry name to scan, example: myregistry.azurecr.io None -d , --direction choice ( src | dest ) Container Registry choice to delete from None --help boolean Show this message and exit. False babylon azure acr pull Pulls a docker image from the ACR registry given in platform configuration Requires simulator_version in deploy config file. Requires simulator_repository in deploy config file. Requires acr_src_registry_name in platform config file. Usage: babylon azure acr pull [OPTIONS] Options: Name Type Description Default -r , --registry text Container Registry name to pull from, example: myregistry.azurecr.io None -i , --image text Remote docker image to pull, example hello-world:latest None --help boolean Show this message and exit. False babylon azure acr push Push a docker image to the ACR registry given in platform configuration Requires simulator_version in deploy config file. Requires simulator_repository in deploy config file. Requires acr_dest_registry_name in platform config file. Usage: babylon azure acr push [OPTIONS] Options: Name Type Description Default -i , --image text Local docker image to push None -r , --registry text Container Registry name to push to, example: myregistry.azurecr.io None --help boolean Show this message and exit. False babylon azure adt Allow communication with Azure Digital Twin Usage: babylon azure adt [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands instance : Subgroup dedicate to Azure digital twins instance management model : Subgroup dedicate to Azure digital twins models management babylon azure adt instance Subgroup dedicate to Azure digital twins instance management Requires azure_subscription in platform config file. Usage: babylon azure adt instance [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands create : Create a new ADT instance in current platform resource group delete : Delete a ADT instance in current platform resource group get : Get an azure digital twins instance details list : Get all azure digital twins instances babylon azure adt instance create Create a new ADT instance in current platform resource group Requires resources_location in platform config file. Requires resource_group_name in platform config file. Usage: babylon azure adt instance create [OPTIONS] ADT_INSTANCE_NAME Options: Name Type Description Default --help boolean Show this message and exit. False babylon azure adt instance delete Delete a ADT instance in current platform resource group Requires resource_group_name in platform config file. Usage: babylon azure adt instance delete [OPTIONS] ADT_INSTANCE_NAME Options: Name Type Description Default -f , --force boolean Don't ask for validation before delete False --help boolean Show this message and exit. False babylon azure adt instance get Get an azure digital twins instance details Requires resource_group_name in platform config file. Usage: babylon azure adt instance get [OPTIONS] ADT_INSTANCE_NAME Options: Name Type Description Default -o , --output_file path The path to the file where the retrieved ADT instance details should be outputted (json-formatted) None --help boolean Show this message and exit. False babylon azure adt instance list Get all azure digital twins instances Requires resource_group_name in platform config file. Usage: babylon azure adt instance list [OPTIONS] Options: Name Type Description Default -o , --output-file path The path to the file where ADT instances details should be outputted (json-formatted) None -f , --fields text Fields witch will be keep in response data, by default all None --help boolean Show this message and exit. False babylon azure adt model Subgroup dedicate to Azure digital twins models management Requires digital_twin_url in deploy config file. Usage: babylon azure adt model [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands list : List all models id from ADT upload : Upload MODEL_FILE_FOLDER content to adt babylon azure adt model list List all models id from ADT Usage: babylon azure adt model list [OPTIONS] Options: Name Type Description Default -o , --output-file file Write full output of the adt api in target file None --help boolean Show this message and exit. False babylon azure adt model upload Upload MODEL_FILE_FOLDER content to adt MODEL_FILE_FOLDER must be a folder containing json file Usage: babylon azure adt model upload [OPTIONS] MODEL_FILE_FOLDER Options: Name Type Description Default -o , --override boolean Override existing models False --help boolean Show this message and exit. False babylon azure adx Group interacting with Azure Data Explorer Requires azure_subscription in platform config file. Usage: babylon azure adx [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands list-scripts : List scripts on the database permission : Group interacting with ADX permissions run-folder : Run all script files (.kql) from SCRIPT_FOLDER run-script : Open SCRIPT_FILE and run it on the database babylon azure adx list-scripts List scripts on the database Requires database_name in deploy config file. Requires resource_group_name in platform config file. Requires cluster_name in platform config file. Usage: babylon azure adx list-scripts [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False babylon azure adx permission Group interacting with ADX permissions Usage: babylon azure adx permission [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands delete : Delete all permission assignments applied to the given principal id get : Get permission assignments applied to the given principal id get-all : Get all permission assignments in the database set : Set permission assignments applied to the given principal id babylon azure adx permission delete Delete all permission assignments applied to the given principal id Requires database_name in deploy config file. Requires cluster_name in platform config file. Requires resource_group_name in platform config file. Usage: babylon azure adx permission delete [OPTIONS] PRINCIPAL_ID Options: Name Type Description Default -f , --force boolean Don't ask for validation before delete False --help boolean Show this message and exit. False babylon azure adx permission get Get permission assignments applied to the given principal id Requires database_name in deploy config file. Requires cluster_name in platform config file. Requires resource_group_name in platform config file. Usage: babylon azure adx permission get [OPTIONS] PRINCIPAL_ID Options: Name Type Description Default --help boolean Show this message and exit. False babylon azure adx permission get-all Get all permission assignments in the database Requires database_name in deploy config file. Requires cluster_name in platform config file. Requires resource_group_name in platform config file. Usage: babylon azure adx permission get-all [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False babylon azure adx permission set Set permission assignments applied to the given principal id Requires database_name in deploy config file. Requires cluster_name in platform config file. Requires resource_group_name in platform config file. Usage: babylon azure adx permission set [OPTIONS] PRINCIPAL_ID Options: Name Type Description Default -r , --role choice ( User | Viewer | Admin ) Assignment Role to Add _required -t , --principal-type choice ( User | Group | App ) Principal type of the given ID _required --help boolean Show this message and exit. False babylon azure adx run-folder Run all script files (.kql) from SCRIPT_FOLDER Requires database_name in deploy config file. Requires resource_group_name in platform config file. Requires cluster_name in platform config file. Usage: babylon azure adx run-folder [OPTIONS] SCRIPT_FOLDER Options: Name Type Description Default --help boolean Show this message and exit. False babylon azure adx run-script Open SCRIPT_FILE and run it on the database In the script instances of \" \" will be replaced by the actual database name Requires database_name in deploy config file. Requires resource_group_name in platform config file. Requires cluster_name in platform config file. Usage: babylon azure adx run-script [OPTIONS] SCRIPT_FILE Options: Name Type Description Default --help boolean Show this message and exit. False babylon azure arm Group interacting with Azure Resources Manager Requires azure_subscription in platform config file. Usage: babylon azure arm [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands create : Create a resource deployment config. delete : Delete a resource deployment via arm deployment. list : List all the deployments for a resource group. run : Apply a resource deployment config via arm deployment. babylon azure arm create Create a resource deployment config. Usage: babylon azure arm create [OPTIONS] DEPLOYMENT_NAME Options: Name Type Description Default -t , --template-uri text N/A None --help boolean Show this message and exit. False babylon azure arm delete Delete a resource deployment via arm deployment. Requires resource_group_name in platform config file. Usage: babylon azure arm delete [OPTIONS] DEPLOYMENT_NAME Options: Name Type Description Default -f , --force boolean Don't ask for validation before delete False --help boolean Show this message and exit. False babylon azure arm list List all the deployments for a resource group. Requires resource_group_name in platform config file. Usage: babylon azure arm list [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False babylon azure arm run Apply a resource deployment config via arm deployment. Requires resource_group_name in platform config file. Usage: babylon azure arm run [OPTIONS] DEPLOYMENT_CONFIG_FILE_PATH Options: Name Type Description Default --help boolean Show this message and exit. False babylon azure storage Group interacting with Azure Storage Blob Requires storage_account_name in platform config file. Usage: babylon azure storage [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default -a , --account text Storage account name None -u , --url text Storage account url None --help boolean Show this message and exit. False Subcommands container : Group interacting with Azure Storage Blob containers babylon azure storage container Group interacting with Azure Storage Blob containers Usage: babylon azure storage container [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands create : Creates a new storageblob container with the given name delete : Deletes a storageblob container with the given name get-all : Lists storage containers from a given account babylon azure storage container create Creates a new storageblob container with the given name Usage: babylon azure storage container create [OPTIONS] CONTAINER_NAME Options: Name Type Description Default --help boolean Show this message and exit. False babylon azure storage container delete Deletes a storageblob container with the given name Usage: babylon azure storage container delete [OPTIONS] CONTAINER_NAME Options: Name Type Description Default -f , --force boolean Don't ask for validation before delete False --help boolean Show this message and exit. False babylon azure storage container get-all Lists storage containers from a given account Usage: babylon azure storage container get-all [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False babylon config Group made to work on the config Usage: babylon config [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands deployment : Sub-group for deployment display : Display current config platform : Sub-group for platform plugin : Sub-group for plugins validate : Validate current config babylon config deployment Sub-group for deployment Usage: babylon config deployment [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands create : Create a new deployment file DEPLOY.yaml and open editor to edit it edit : Open editor to edit variables in given deployment select : Change current selected deployment babylon config deployment create Create a new deployment file DEPLOY.yaml and open editor to edit it Usage: babylon config deployment create [OPTIONS] DEPLOY Options: Name Type Description Default --help boolean Show this message and exit. False babylon config deployment edit Open editor to edit variables in given deployment will open default deployment if no argument is passed Usage: babylon config deployment edit [OPTIONS] [DEPLOYMENT] Options: Name Type Description Default --help boolean Show this message and exit. False babylon config deployment select Change current selected deployment if not argument is passed will run in interactive mode Usage: babylon config deployment select [OPTIONS] [DEPLOYMENT] Options: Name Type Description Default --help boolean Show this message and exit. False babylon config display Display current config Usage: babylon config display [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False babylon config platform Sub-group for platform Usage: babylon config platform [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands create : No description was provided with this command. edit : Open editor to edit variables in given platform select : Change current selected platform babylon config platform create Usage: babylon config platform create [OPTIONS] PLATFORM Options: Name Type Description Default --help boolean Show this message and exit. False babylon config platform edit Open editor to edit variables in given platform will open default platform if no argument is passed Usage: babylon config platform edit [OPTIONS] [PLATFORM] Options: Name Type Description Default --help boolean Show this message and exit. False babylon config platform select Change current selected platform if not argument is passed will run in interactive mode Usage: babylon config platform select [OPTIONS] [PLATFORM] Options: Name Type Description Default --help boolean Show this message and exit. False babylon config plugin Sub-group for plugins Usage: babylon config plugin [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands activate : Activate PLUGIN add : Add a plugin found at PLUGIN_PATH deactivate : Deactivate PLUGIN remove : Remove PLUGIN babylon config plugin activate Activate PLUGIN Usage: babylon config plugin activate [OPTIONS] PLUGIN Options: Name Type Description Default --help boolean Show this message and exit. False babylon config plugin add Add a plugin found at PLUGIN_PATH Usage: babylon config plugin add [OPTIONS] PLUGIN_PATH Options: Name Type Description Default --help boolean Show this message and exit. False babylon config plugin deactivate Deactivate PLUGIN Usage: babylon config plugin deactivate [OPTIONS] PLUGIN Options: Name Type Description Default --help boolean Show this message and exit. False babylon config plugin remove Remove PLUGIN Usage: babylon config plugin remove [OPTIONS] PLUGIN Options: Name Type Description Default --help boolean Show this message and exit. False babylon config validate Validate current config Usage: babylon config validate [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False babylon debug Add debug capacities of runs Requires k8s_namespace in platform config file. Requires k8s_context in platform config file. Usage: babylon debug [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands get-workflow-pods : Get pods information for the given WORKFLOW babylon debug get-workflow-pods Get pods information for the given WORKFLOW Requires the program kubectl to run. Usage: babylon debug get-workflow-pods [OPTIONS] WORKFLOW Options: Name Type Description Default --help boolean Show this message and exit. False babylon powerbi Group interacting with PowerBI Requires powerbi_api_scope in platform config file. Usage: babylon powerbi [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands dataset : Group initialized from a template report : Group initialized from a template workspace : Group initialized from a template babylon powerbi dataset Group initialized from a template Usage: babylon powerbi dataset [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands get-all : Command created from a template babylon powerbi dataset get-all Command created from a template Usage: babylon powerbi dataset get-all [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False babylon powerbi report Group initialized from a template Usage: babylon powerbi report [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands get-all : Command created from a template babylon powerbi report get-all Command created from a template Usage: babylon powerbi report get-all [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False babylon powerbi workspace Group initialized from a template Usage: babylon powerbi workspace [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands get-all : Command created from a template babylon powerbi workspace get-all Command created from a template Usage: babylon powerbi workspace get-all [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False babylon terraform-cloud Group allowing interactions with the Terraform Cloud API Requires key organization in terraform_cloud.yaml in the working_dir. Requires key url in terraform_cloud.yaml in the working_dir. Requires key token in terraform_cloud.yaml in the working_dir. Usage: babylon terraform-cloud [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands workspace : Sub-group allowing interaction with the organization of the Terraform Cloud API babylon terraform-cloud workspace Sub-group allowing interaction with the organization of the Terraform Cloud API Usage: babylon terraform-cloud workspace [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands create : Use given parameters to create a workspace in the organization delete : Delete a workspace from the organization get : Get a workspace in the organization get-all : Get all available workspaces in the organization last-run : Get state of the last run of a workspace outputs : List outputs of a workspace. run : Start the run of a workspace vars : Interact with the vars of a workspace babylon terraform-cloud workspace create Use given parameters to create a workspace in the organization Requires key vcs_oauth_token_id in terraform_workspace.yaml in the working_dir. Requires key vcs_branch in terraform_workspace.yaml in the working_dir. Requires key vcs_identifier in terraform_workspace.yaml in the working_dir. Requires key working_directory in terraform_workspace.yaml in the working_dir. Usage: babylon terraform-cloud workspace create [OPTIONS] WORKSPACE_NAME Options: Name Type Description Default -o , --output file File to which content should be outputted (json-formatted) None -s , --select boolean Should the id of the created workspace set in the working dir file ? False --help boolean Show this message and exit. False babylon terraform-cloud workspace delete Delete a workspace from the organization Requires key workspace_id in terraform_workspace.yaml in the working_dir. Usage: babylon terraform-cloud workspace delete [OPTIONS] Options: Name Type Description Default -f , --force boolean Should validation be skipped ? False -w , --workspace text Id of the workspace to use None --help boolean Show this message and exit. False babylon terraform-cloud workspace get Get a workspace in the organization Requires key workspace_id in terraform_workspace.yaml in the working_dir. Usage: babylon terraform-cloud workspace get [OPTIONS] Options: Name Type Description Default -w , --workspace text Id of the workspace to use None -o , --output file File to which content should be outputted (json-formatted) None --help boolean Show this message and exit. False babylon terraform-cloud workspace get-all Get all available workspaces in the organization Usage: babylon terraform-cloud workspace get-all [OPTIONS] Options: Name Type Description Default -o , --output file File to which content should be outputted (json-formatted) None --help boolean Show this message and exit. False babylon terraform-cloud workspace last-run Get state of the last run of a workspace Requires key workspace_id in terraform_workspace.yaml in the working_dir. Usage: babylon terraform-cloud workspace last-run [OPTIONS] Options: Name Type Description Default -o , --output file File to which content should be outputted (json-formatted) None -w , --workspace text Id of the workspace to use None --help boolean Show this message and exit. False babylon terraform-cloud workspace outputs List outputs of a workspace. Sensitive outputs are not readable, use -s option to access the state in the web application to get those. Requires key workspace_id in terraform_workspace.yaml in the working_dir. Usage: babylon terraform-cloud workspace outputs [OPTIONS] Options: Name Type Description Default -o , --output file File to which content should be outputted (json-formatted) None -w , --workspace text Id of the workspace to use None -s , --states boolean Add this option to open the webapp page to the states of the workspace. (Allow to see content of sensitives outputs) False --help boolean Show this message and exit. False babylon terraform-cloud workspace run Start the run of a workspace More info on runs can be found at: https://developer.hashicorp.com/terraform/cloud-docs/api-docs/run#create-a-run Requires key workspace_id in terraform_workspace.yaml in the working_dir. Usage: babylon terraform-cloud workspace run [OPTIONS] Options: Name Type Description Default -o , --output file File to which content should be outputted (json-formatted) None -w , --workspace text Id of the workspace to use None -m , --message text Message added to the run. Run started with Babylon --allow_empty_apply boolean Can this run have an empty apply ? False --help boolean Show this message and exit. False babylon terraform-cloud workspace vars Interact with the vars of a workspace Usage: babylon terraform-cloud workspace vars [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands create : Set VAR_KEY variable to VAR_VALUE in a workspace delete : Delete VAR_KEY variable in a workspace get : Get VAR_KEY variable in a workspace get-all : Get all available variables in the workspace update : Update VAR_KEY variable in a workspace babylon terraform-cloud workspace vars create Set VAR_KEY variable to VAR_VALUE in a workspace More information on the arguments can be found at : https://developer.hashicorp.com/terraform/cloud-docs/api-docs/variables#request-body Requires key workspace_id in terraform_workspace.yaml in the working_dir. Usage: babylon terraform-cloud workspace vars create [OPTIONS] VAR_KEY VAR_VALUE VAR_DESCRIPTION {terraform|env} Options: Name Type Description Default -w , --workspace text Id of the workspace to use None --hcl boolean Should the var be evaluated as a HCL string False --sensitive boolean Is the var sensitive False --help boolean Show this message and exit. False babylon terraform-cloud workspace vars delete Delete VAR_KEY variable in a workspace Requires key workspace_id in terraform_workspace.yaml in the working_dir. Usage: babylon terraform-cloud workspace vars delete [OPTIONS] VAR_KEY Options: Name Type Description Default -w , --workspace text Id of the workspace to use None -f , --force boolean Should validation be skipped ? False --help boolean Show this message and exit. False babylon terraform-cloud workspace vars get Get VAR_KEY variable in a workspace Requires key workspace_id in terraform_workspace.yaml in the working_dir. Usage: babylon terraform-cloud workspace vars get [OPTIONS] VAR_KEY Options: Name Type Description Default -o , --output file File to which content should be outputted (json-formatted) None -w , --workspace text Id of the workspace to use None --help boolean Show this message and exit. False babylon terraform-cloud workspace vars get-all Get all available variables in the workspace Requires key workspace_id in terraform_workspace.yaml in the working_dir. Usage: babylon terraform-cloud workspace vars get-all [OPTIONS] Options: Name Type Description Default -o , --output file File to which content should be outputted (json-formatted) None -w , --workspace text Id of the workspace to use None --help boolean Show this message and exit. False babylon terraform-cloud workspace vars update Update VAR_KEY variable in a workspace More information on the arguments can be found at : https://developer.hashicorp.com/terraform/cloud-docs/api-docs/variables#request-body Requires key workspace_id in terraform_workspace.yaml in the working_dir. Usage: babylon terraform-cloud workspace vars update [OPTIONS] VAR_KEY Options: Name Type Description Default -w , --workspace text Id of the workspace to use None --value text A new value to apply to the variable None --description text A new description to apply to the variable None --help boolean Show this message and exit. False babylon working-dir Command group handling working directory information Usage: babylon working-dir [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands complete : Complete the current working_dir for missing elements display : No description was provided with this command. init : Initialize the current working_dir validate : Validate the current working_dir zip-env : Zip a working_dir to given PATH babylon working-dir complete Complete the current working_dir for missing elements Usage: babylon working-dir complete [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False babylon working-dir display Usage: babylon working-dir display [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False babylon working-dir init Initialize the current working_dir Usage: babylon working-dir init [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False babylon working-dir validate Validate the current working_dir Usage: babylon working-dir validate [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False babylon working-dir zip-env Zip a working_dir to given PATH PATH can be a folder (archive name will default to working_dir.zip) or a .zip file Usage: babylon working-dir zip-env [OPTIONS] PATH Options: Name Type Description Default -f , --force boolean Force replacement of existing file with new zip False --help boolean Show this message and exit. False","title":"babylon"},{"location":"cli/#babylon","text":"CLI used for cloud interactions between CosmoTech and multiple cloud environment The following environment variables are available to override the working directory or the configuration: BABYLON_CONFIG_DIRECTORY : path to a folder to use as a configuration directory BABYLON_WORKING_DIRECTORY : path to a folder to use as a working directory Usage: babylon [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --verbosity , -v text Either CRITICAL, ERROR, WARNING, INFO or DEBUG INFO --tests boolean Enable test mode, this mode changes output formatting. False -n , --dry-run boolean Will run commands in dry-run mode False -h , --help boolean Show this message and exit. False --version boolean N/A False Subcommands api : Group handling communication with the cosmotech API azure : Group allowing communication with Microsoft Azure Cloud config : Group made to work on the config debug : Add debug capacities of runs powerbi : Group interacting with PowerBI terraform-cloud : Group allowing interactions with the Terraform Cloud API working-dir : Command group handling working directory information","title":"babylon"},{"location":"cli/#babylon-api","text":"Group handling communication with the cosmotech API Requires api_url in platform config file. Requires api_scope in platform config file. Usage: babylon api [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands connector : Subgroup handling Connectors in the cosmotech API dataset : Subgroup handling Datasets in the cosmotech API organization : Subgroup handling Organizations in the cosmotech API solution : Subgroup handling Solution in the cosmotech API workspace : Subgroup handling Work in the cosmotech API","title":"api"},{"location":"cli/#babylon-api-connector","text":"Subgroup handling Connectors in the cosmotech API Usage: babylon api connector [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands create : Register a new Connector by sending a JSON or YAML file to the API. delete : Unregister a Connector via Cosmotech API. get : Get a registered connector details. get-all : Get all registered connectors. get-currents : Get a registered connector details.","title":"connector"},{"location":"cli/#babylon-api-connector-create","text":"Register a new Connector by sending a JSON or YAML file to the API. Usage: babylon api connector create [OPTIONS] CONNECTOR_NAME Options: Name Type Description Default -i , --connector-file text Your custom Connector description file path None -t , --type choice ( ADT | STORAGE ) Connector type, allowed values : [ADT, STORAGE] _required -o , --output-file path The path to the file where the new Connector content should be outputted (json-formatted) None -e , --use-working-dir-file boolean Should the Connector file path be relative to Babylon working directory ? False -v , --version text Version of the Connector _required --help boolean Show this message and exit. False","title":"create"},{"location":"cli/#babylon-api-connector-delete","text":"Unregister a Connector via Cosmotech API. Usage: babylon api connector delete [OPTIONS] [CONNECTOR_ID] Options: Name Type Description Default -i , --connector-file text In case the connector id is retrieved from a file None -f , --force boolean Don't ask for validation before delete False -e , --use-working-dir-file boolean Should the path be relative to the working directory ? False --help boolean Show this message and exit. False","title":"delete"},{"location":"cli/#babylon-api-connector-get","text":"Get a registered connector details. Usage: babylon api connector get [OPTIONS] CONNECTOR_ID Options: Name Type Description Default -o , --output_file path File to which content should be outputted (json-formatted) None -f , --fields text Fields witch will be keep in response data, by default all None --help boolean Show this message and exit. False","title":"get"},{"location":"cli/#babylon-api-connector-get-all","text":"Get all registered connectors. Usage: babylon api connector get-all [OPTIONS] Options: Name Type Description Default -o , --output_file path The path to the file where Connectors should be outputted (json-formatted) None -f , --fields text Fields witch will be keep in response data, by default all None --help boolean Show this message and exit. False","title":"get-all"},{"location":"cli/#babylon-api-connector-get-currents","text":"Get a registered connector details. Requires storage_connector_id in deploy config file. Requires adt_connector_id in deploy config file. Usage: babylon api connector get-currents [OPTIONS] Options: Name Type Description Default -o , --output_file path The path to the file where Connectors should be outputted (json-formatted) None -f , --fields text Fields witch will be keep in response data, by default all None --help boolean Show this message and exit. False","title":"get-currents"},{"location":"cli/#babylon-api-dataset","text":"Subgroup handling Datasets in the cosmotech API Usage: babylon api dataset [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands create : Register new dataset by sending description file to the API. delete : Unregister a dataset via Cosmotech API. get : Get the state of the dataset in the API. get-all : Get all registered datasets. get-current : Get the state of the dataset in the API. update : Send a JSON or YAML file to the API to update a dataset.","title":"dataset"},{"location":"cli/#babylon-api-dataset-create","text":"Register new dataset by sending description file to the API. Requires organization_id in deploy config file. Usage: babylon api dataset create [OPTIONS] [DATASET_NAME] Options: Name Type Description Default -c , --connector-id text N/A None -e , --use-working-dir-file boolean Should the path be relative to the working directory ? False -i , --dataset-file text Your custom dataset description file None -d , --description text New dataset description None -o , --output-file path File to which content should be outputted (json-formatted) None --help boolean Show this message and exit. False","title":"create"},{"location":"cli/#babylon-api-dataset-delete","text":"Unregister a dataset via Cosmotech API. Requires organization_id in deploy config file. Usage: babylon api dataset delete [OPTIONS] [DATASET_ID] Options: Name Type Description Default -f , --force boolean Don't ask for validation before delete False -e , --use-working-dir-file boolean Should the path be relative to the working directory ? False -i , --dataset-file text In case the dataset id is retrieved from a file None --help boolean Show this message and exit. False","title":"delete"},{"location":"cli/#babylon-api-dataset-get","text":"Get the state of the dataset in the API. Requires organization_id in deploy config file. Usage: babylon api dataset get [OPTIONS] DATASET_ID Options: Name Type Description Default -o , --output-file path File to which content should be outputted (json-formatted) None -f , --fields text Fields witch will be keep in response data, by default all None -e , --use-working-dir-file boolean Should the path be relative to the working directory ? False --from-file boolean In case the dataset id is retrieved from a file False --help boolean Show this message and exit. False","title":"get"},{"location":"cli/#babylon-api-dataset-get-all","text":"Get all registered datasets. Requires organization_id in deploy config file. Usage: babylon api dataset get-all [OPTIONS] Options: Name Type Description Default -o , --output-file path File to which content should be outputted (json-formatted) None -f , --fields text Fields witch will be keep in response data, by default all None --help boolean Show this message and exit. False","title":"get-all"},{"location":"cli/#babylon-api-dataset-get-current","text":"Get the state of the dataset in the API. Requires organization_id in deploy config file. Requires dataset_id in deploy config file. Usage: babylon api dataset get-current [OPTIONS] Options: Name Type Description Default -o , --output-file path File to which content should be outputted (json-formatted) None -f , --fields text Fields witch will be keep in response data, by default all None --help boolean Show this message and exit. False","title":"get-current"},{"location":"cli/#babylon-api-dataset-update","text":"Send a JSON or YAML file to the API to update a dataset. Requires organization_id in deploy config file. Usage: babylon api dataset update [OPTIONS] DATASET_ID Options: Name Type Description Default -c , --connector-id text N/A None -e , --use-working-dir-file boolean Should the path be relative to the working directory ? False -i , --dataset-file text Your custom dataset description file None -o , --output-file path File to which content should be outputted (json-formatted) None --help boolean Show this message and exit. False","title":"update"},{"location":"cli/#babylon-api-organization","text":"Subgroup handling Organizations in the cosmotech API Usage: babylon api organization [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands create : Register new organization by sending a JSON or YAML file delete : Delete organization via Cosmotech APi. get : Get the state of an specific organization in the API. get-all : Get all registered organization. get-current : Get the state of the current organization in the API. update : Update an Organization by sending a JSON or YAML file to Cosmotech Api.","title":"organization"},{"location":"cli/#babylon-api-organization-create","text":"Register new organization by sending a JSON or YAML file Usage: babylon api organization create [OPTIONS] ORGANIZATION_NAME Options: Name Type Description Default -i , --organization-file text Your custom Organization description file path None -s , --select boolean Select this new Organization as one of babylon context Organizations ? True -o , --output-file path The path to the file where the new Organization content should be outputted (json-formatted) None -e , --use-working-dir-file boolean Should the Organization file path be relative to Babylon working directory ? False --help boolean Show this message and exit. False","title":"create"},{"location":"cli/#babylon-api-organization-delete","text":"Delete organization via Cosmotech APi. Usage: babylon api organization delete [OPTIONS] [ORGANIZATION_ID] Options: Name Type Description Default -i , --organization-file text In case the organization id is retrieved from a file None -f , --force boolean Don't ask for validation before delete False -e , --use-working-dir-file boolean Should the path be relative to the working directory ? False --help boolean Show this message and exit. False","title":"delete"},{"location":"cli/#babylon-api-organization-get","text":"Get the state of an specific organization in the API. Usage: babylon api organization get [OPTIONS] ORGANIZATION_ID Options: Name Type Description Default -o , --output-file path The path to the file where the new Organization content should be outputted (json-formatted) None -f , --fields text Fields witch will be keep in response data, by default all None --help boolean Show this message and exit. False","title":"get"},{"location":"cli/#babylon-api-organization-get-all","text":"Get all registered organization. Usage: babylon api organization get-all [OPTIONS] Options: Name Type Description Default -o , --output-file path The path to the file where the new Organization content should be outputted (json-formatted) None -f , --fields text Fields witch will be keep in response data, by default all None --help boolean Show this message and exit. False","title":"get-all"},{"location":"cli/#babylon-api-organization-get-current","text":"Get the state of the current organization in the API. Requires organization_id in deploy config file. Usage: babylon api organization get-current [OPTIONS] Options: Name Type Description Default -o , --output-file path The path to the file where the new Organization content should be outputted (json-formatted) None -f , --fields text Fields witch will be keep in response data, by default all None --help boolean Show this message and exit. False","title":"get-current"},{"location":"cli/#babylon-api-organization-update","text":"Update an Organization by sending a JSON or YAML file to Cosmotech Api. Requires organization_id in deploy config file. Usage: babylon api organization update [OPTIONS] Options: Name Type Description Default -i , --organization-file text Your new Organization description file path _required -e , --use-working-dir-file boolean Should the path be relative to the working directory ? False --help boolean Show this message and exit. False","title":"update"},{"location":"cli/#babylon-api-solution","text":"Subgroup handling Solution in the cosmotech API Usage: babylon api solution [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands create : Send a JSON or YAML file to the API to create an solution. delete : Unregister a solution via Cosmotech APi. get : Get the state of the solution in the API. get-all : Get all registered solutions. get-current : Get the state of the solution in the API. handler : Group allowing solution handler management update : Send a JSON or YAML file to the API to update a solution.","title":"solution"},{"location":"cli/#babylon-api-solution-create","text":"Send a JSON or YAML file to the API to create an solution. Requires organization_id in deploy config file. Requires simulator_url in deploy config file. Requires simulator_version in deploy config file. Requires simulator_repository in deploy config file. Usage: babylon api solution create [OPTIONS] SOLUTION_NAME Options: Name Type Description Default -e , --use-working-dir-file boolean Should the path be relative to the working directory ? False -i , --solution-file text Your custom Solution description file path None -d , --description text New solution description None -o , --output-file path File to which content should be outputted (json-formatted) None -s , --select boolean Select this new Solution as babylon context solution ? True --help boolean Show this message and exit. False","title":"create"},{"location":"cli/#babylon-api-solution-delete","text":"Unregister a solution via Cosmotech APi. Requires organization_id in deploy config file. Usage: babylon api solution delete [OPTIONS] [SOLUTION_ID] Options: Name Type Description Default -f , --force boolean Don't ask for validation before delete False -e , --use-working-dir-file boolean Should the path be relative to the working directory ? False -i , --solution-file text Your Solution description file path None --help boolean Show this message and exit. False","title":"delete"},{"location":"cli/#babylon-api-solution-get","text":"Get the state of the solution in the API. Requires organization_id in deploy config file. Usage: babylon api solution get [OPTIONS] [SOLUTION_ID] Options: Name Type Description Default -o , --output-file path The path to the file where Connector details should be outputted (json-formatted) None -i , --solution-file text Your Solution description file path None -f , --fields text Fields witch will be keep in response data, by default all None -e , --use-working-dir-file boolean Should the path be relative to the working directory ? False --help boolean Show this message and exit. False","title":"get"},{"location":"cli/#babylon-api-solution-get-all","text":"Get all registered solutions. Requires organization_id in deploy config file. Usage: babylon api solution get-all [OPTIONS] Options: Name Type Description Default -o , --output-file path The path to the file where Solutions should be outputted (json-formatted) None -f , --fields text Fields witch will be keep in response data, by default all None --help boolean Show this message and exit. False","title":"get-all"},{"location":"cli/#babylon-api-solution-get-current","text":"Get the state of the solution in the API. Requires organization_id in deploy config file. Requires solution_id in deploy config file. Usage: babylon api solution get-current [OPTIONS] Options: Name Type Description Default -o , --output-file path The path to the file where Connector details should be outputted (json-formatted) None -f , --fields text Fields witch will be keep in response data, by default all None --help boolean Show this message and exit. False","title":"get-current"},{"location":"cli/#babylon-api-solution-handler","text":"Group allowing solution handler management Usage: babylon api solution handler [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands download : Download a solution handler zip. upload : Upload a solution handler zip.","title":"handler"},{"location":"cli/#babylon-api-solution-handler-download","text":"Download a solution handler zip. Requires solution_id in deploy config file. Requires organization_id in deploy config file. Usage: babylon api solution handler download [OPTIONS] Options: Name Type Description Default -r , --run-template text The run Template identifier _required -t , --handler-type choice ( parameters_handler | validator | prerun | engine | postrun | scenariodata_transform ) Handler type _required --help boolean Show this message and exit. False","title":"download"},{"location":"cli/#babylon-api-solution-handler-upload","text":"Upload a solution handler zip. Requires solution_id in deploy config file. Requires organization_id in deploy config file. Usage: babylon api solution handler upload [OPTIONS] HANDLER_PATH Options: Name Type Description Default -o , --override boolean N/A False -r , --run-template text The run Template identifier _required -t , --handler-type choice ( parameters_handler | validator | prerun | engine | postrun | scenariodata_transform ) Handler type _required --help boolean Show this message and exit. False","title":"upload"},{"location":"cli/#babylon-api-solution-update","text":"Send a JSON or YAML file to the API to update a solution. Requires solution_id in deploy config file. Requires organization_id in deploy config file. Requires simulator_repository in deploy config file. Requires simulator_version in deploy config file. Requires simulator_url in deploy config file. Usage: babylon api solution update [OPTIONS] [SOLUTION_ID] Options: Name Type Description Default -e , --use-working-dir-file boolean Should the path be relative to the working directory ? False -i , --solution-file text Your custom Solution description file path None --help boolean Show this message and exit. False","title":"update"},{"location":"cli/#babylon-api-workspace","text":"Subgroup handling Work in the cosmotech API Usage: babylon api workspace [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands create : Send a JSON or YAML file to the API to create a workspace. delete : Unregister a workspace via Cosmotech APi. get : Get the state of the workspace in the API. get-all : Get all registered workspaces. get-current : Get the state of the workspace in the API. update : Send a JSON or YAML file to the API to update a workspace.","title":"workspace"},{"location":"cli/#babylon-api-workspace-create","text":"Send a JSON or YAML file to the API to create a workspace. Requires solution_id in deploy config file. Requires organization_id in deploy config file. Requires use_dedicated_event_hub_namespace in deploy config file. Requires send_scenario_metadata_to_event_hub in deploy config file. Usage: babylon api workspace create [OPTIONS] WORKSPACE_NAME Options: Name Type Description Default -e , --use-working-dir-file boolean Should the path be relative to the working directory ? False -i , --workspace-file text Your custom workspace definition file path None -d , --description text Workspace description None -o , --output-file path The path to the file where the created workspace should be outputted (json-formatted) None -s , --select boolean Select this new Workspace as babylon context workspace ? True --help boolean Show this message and exit. False","title":"create"},{"location":"cli/#babylon-api-workspace-delete","text":"Unregister a workspace via Cosmotech APi. Requires organization_id in deploy config file. Usage: babylon api workspace delete [OPTIONS] [WORKSPACE_ID] Options: Name Type Description Default -f , --force boolean Don't ask for validation before delete False -e , --use-working-dir-file boolean Should the path be relative to the working directory ? False -i , --workspace-file text In case the workspace id is retrieved from a file None --help boolean Show this message and exit. False","title":"delete"},{"location":"cli/#babylon-api-workspace-get","text":"Get the state of the workspace in the API. Requires organization_id in deploy config file. Usage: babylon api workspace get [OPTIONS] [WORKSPACE_ID] Options: Name Type Description Default -o , --output-file path The path to the file where Workspace details should be outputted (json-formatted) None -f , --fields text Fields witch will be keep in response data, by default all None -e , --use-working-dir-file boolean Should the path be relative to the working directory ? False -i , --workspace-file text In case the workspace id is retrieved from a file None --help boolean Show this message and exit. False","title":"get"},{"location":"cli/#babylon-api-workspace-get-all","text":"Get all registered workspaces. Requires organization_id in deploy config file. Usage: babylon api workspace get-all [OPTIONS] Options: Name Type Description Default -o , --output-file path The path to the file where Workspaces should be outputted (json-formatted) None -f , --fields text Fields witch will be keep in response data, by default all None --help boolean Show this message and exit. False","title":"get-all"},{"location":"cli/#babylon-api-workspace-get-current","text":"Get the state of the workspace in the API. Requires organization_id in deploy config file. Requires workspace_id in deploy config file. Usage: babylon api workspace get-current [OPTIONS] Options: Name Type Description Default -o , --output-file path The path to the file where Workspace details should be outputted (json-formatted) None -f , --fields text Fields witch will be keep in response data, by default all None --help boolean Show this message and exit. False","title":"get-current"},{"location":"cli/#babylon-api-workspace-update","text":"Send a JSON or YAML file to the API to update a workspace. Requires solution_id in deploy config file. Requires organization_id in deploy config file. Requires use_dedicated_event_hub_namespace in deploy config file. Requires use_dedicated_event_hub_namespace in deploy config file. Usage: babylon api workspace update [OPTIONS] Options: Name Type Description Default -i , --workspace-file text In case the workspace id is retrieved from a file None -o , --output-file path The path to the file where new Workspace details should be outputted (json-formatted) None -e , --use-working-dir-file boolean Should the path be relative to the working directory ? False --help boolean Show this message and exit. False","title":"update"},{"location":"cli/#babylon-azure","text":"Group allowing communication with Microsoft Azure Cloud Requires the program az to run. Usage: babylon azure [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands acr : Group interacting with Azure Container Registry adt : Allow communication with Azure Digital Twin adx : Group interacting with Azure Data Explorer arm : Group interacting with Azure Resources Manager storage : Group interacting with Azure Storage Blob","title":"azure"},{"location":"cli/#babylon-azure-acr","text":"Group interacting with Azure Container Registry Requires the program docker to run. Usage: babylon azure acr [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands delete : Delete docker image from selected repository list : List all docker images in the specified registry pull : Pulls a docker image from the ACR registry given in platform configuration push : Push a docker image to the ACR registry given in platform configuration","title":"acr"},{"location":"cli/#babylon-azure-acr-delete","text":"Delete docker image from selected repository Requires simulator_version in deploy config file. Requires simulator_repository in deploy config file. Requires acr_dest_registry_name in platform config file. Requires acr_src_registry_name in platform config file. Usage: babylon azure acr delete [OPTIONS] Options: Name Type Description Default -r , --registry text Container Registry name to delete from, example: myregistry.azurecr.io None -d , --direction choice ( src | dest ) Container Registry to delete from None -i , --image text Remote docker image to pull, example hello-world:latest None -f , --force boolean Don't ask for validation before delete False --help boolean Show this message and exit. False","title":"delete"},{"location":"cli/#babylon-azure-acr-list","text":"List all docker images in the specified registry Requires acr_dest_registry_name in platform config file. Requires acr_src_registry_name in platform config file. Usage: babylon azure acr list [OPTIONS] Options: Name Type Description Default -r , --registry text Container Registry name to scan, example: myregistry.azurecr.io None -d , --direction choice ( src | dest ) Container Registry choice to delete from None --help boolean Show this message and exit. False","title":"list"},{"location":"cli/#babylon-azure-acr-pull","text":"Pulls a docker image from the ACR registry given in platform configuration Requires simulator_version in deploy config file. Requires simulator_repository in deploy config file. Requires acr_src_registry_name in platform config file. Usage: babylon azure acr pull [OPTIONS] Options: Name Type Description Default -r , --registry text Container Registry name to pull from, example: myregistry.azurecr.io None -i , --image text Remote docker image to pull, example hello-world:latest None --help boolean Show this message and exit. False","title":"pull"},{"location":"cli/#babylon-azure-acr-push","text":"Push a docker image to the ACR registry given in platform configuration Requires simulator_version in deploy config file. Requires simulator_repository in deploy config file. Requires acr_dest_registry_name in platform config file. Usage: babylon azure acr push [OPTIONS] Options: Name Type Description Default -i , --image text Local docker image to push None -r , --registry text Container Registry name to push to, example: myregistry.azurecr.io None --help boolean Show this message and exit. False","title":"push"},{"location":"cli/#babylon-azure-adt","text":"Allow communication with Azure Digital Twin Usage: babylon azure adt [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands instance : Subgroup dedicate to Azure digital twins instance management model : Subgroup dedicate to Azure digital twins models management","title":"adt"},{"location":"cli/#babylon-azure-adt-instance","text":"Subgroup dedicate to Azure digital twins instance management Requires azure_subscription in platform config file. Usage: babylon azure adt instance [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands create : Create a new ADT instance in current platform resource group delete : Delete a ADT instance in current platform resource group get : Get an azure digital twins instance details list : Get all azure digital twins instances","title":"instance"},{"location":"cli/#babylon-azure-adt-instance-create","text":"Create a new ADT instance in current platform resource group Requires resources_location in platform config file. Requires resource_group_name in platform config file. Usage: babylon azure adt instance create [OPTIONS] ADT_INSTANCE_NAME Options: Name Type Description Default --help boolean Show this message and exit. False","title":"create"},{"location":"cli/#babylon-azure-adt-instance-delete","text":"Delete a ADT instance in current platform resource group Requires resource_group_name in platform config file. Usage: babylon azure adt instance delete [OPTIONS] ADT_INSTANCE_NAME Options: Name Type Description Default -f , --force boolean Don't ask for validation before delete False --help boolean Show this message and exit. False","title":"delete"},{"location":"cli/#babylon-azure-adt-instance-get","text":"Get an azure digital twins instance details Requires resource_group_name in platform config file. Usage: babylon azure adt instance get [OPTIONS] ADT_INSTANCE_NAME Options: Name Type Description Default -o , --output_file path The path to the file where the retrieved ADT instance details should be outputted (json-formatted) None --help boolean Show this message and exit. False","title":"get"},{"location":"cli/#babylon-azure-adt-instance-list","text":"Get all azure digital twins instances Requires resource_group_name in platform config file. Usage: babylon azure adt instance list [OPTIONS] Options: Name Type Description Default -o , --output-file path The path to the file where ADT instances details should be outputted (json-formatted) None -f , --fields text Fields witch will be keep in response data, by default all None --help boolean Show this message and exit. False","title":"list"},{"location":"cli/#babylon-azure-adt-model","text":"Subgroup dedicate to Azure digital twins models management Requires digital_twin_url in deploy config file. Usage: babylon azure adt model [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands list : List all models id from ADT upload : Upload MODEL_FILE_FOLDER content to adt","title":"model"},{"location":"cli/#babylon-azure-adt-model-list","text":"List all models id from ADT Usage: babylon azure adt model list [OPTIONS] Options: Name Type Description Default -o , --output-file file Write full output of the adt api in target file None --help boolean Show this message and exit. False","title":"list"},{"location":"cli/#babylon-azure-adt-model-upload","text":"Upload MODEL_FILE_FOLDER content to adt MODEL_FILE_FOLDER must be a folder containing json file Usage: babylon azure adt model upload [OPTIONS] MODEL_FILE_FOLDER Options: Name Type Description Default -o , --override boolean Override existing models False --help boolean Show this message and exit. False","title":"upload"},{"location":"cli/#babylon-azure-adx","text":"Group interacting with Azure Data Explorer Requires azure_subscription in platform config file. Usage: babylon azure adx [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands list-scripts : List scripts on the database permission : Group interacting with ADX permissions run-folder : Run all script files (.kql) from SCRIPT_FOLDER run-script : Open SCRIPT_FILE and run it on the database","title":"adx"},{"location":"cli/#babylon-azure-adx-list-scripts","text":"List scripts on the database Requires database_name in deploy config file. Requires resource_group_name in platform config file. Requires cluster_name in platform config file. Usage: babylon azure adx list-scripts [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False","title":"list-scripts"},{"location":"cli/#babylon-azure-adx-permission","text":"Group interacting with ADX permissions Usage: babylon azure adx permission [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands delete : Delete all permission assignments applied to the given principal id get : Get permission assignments applied to the given principal id get-all : Get all permission assignments in the database set : Set permission assignments applied to the given principal id","title":"permission"},{"location":"cli/#babylon-azure-adx-permission-delete","text":"Delete all permission assignments applied to the given principal id Requires database_name in deploy config file. Requires cluster_name in platform config file. Requires resource_group_name in platform config file. Usage: babylon azure adx permission delete [OPTIONS] PRINCIPAL_ID Options: Name Type Description Default -f , --force boolean Don't ask for validation before delete False --help boolean Show this message and exit. False","title":"delete"},{"location":"cli/#babylon-azure-adx-permission-get","text":"Get permission assignments applied to the given principal id Requires database_name in deploy config file. Requires cluster_name in platform config file. Requires resource_group_name in platform config file. Usage: babylon azure adx permission get [OPTIONS] PRINCIPAL_ID Options: Name Type Description Default --help boolean Show this message and exit. False","title":"get"},{"location":"cli/#babylon-azure-adx-permission-get-all","text":"Get all permission assignments in the database Requires database_name in deploy config file. Requires cluster_name in platform config file. Requires resource_group_name in platform config file. Usage: babylon azure adx permission get-all [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False","title":"get-all"},{"location":"cli/#babylon-azure-adx-permission-set","text":"Set permission assignments applied to the given principal id Requires database_name in deploy config file. Requires cluster_name in platform config file. Requires resource_group_name in platform config file. Usage: babylon azure adx permission set [OPTIONS] PRINCIPAL_ID Options: Name Type Description Default -r , --role choice ( User | Viewer | Admin ) Assignment Role to Add _required -t , --principal-type choice ( User | Group | App ) Principal type of the given ID _required --help boolean Show this message and exit. False","title":"set"},{"location":"cli/#babylon-azure-adx-run-folder","text":"Run all script files (.kql) from SCRIPT_FOLDER Requires database_name in deploy config file. Requires resource_group_name in platform config file. Requires cluster_name in platform config file. Usage: babylon azure adx run-folder [OPTIONS] SCRIPT_FOLDER Options: Name Type Description Default --help boolean Show this message and exit. False","title":"run-folder"},{"location":"cli/#babylon-azure-adx-run-script","text":"Open SCRIPT_FILE and run it on the database In the script instances of \" \" will be replaced by the actual database name Requires database_name in deploy config file. Requires resource_group_name in platform config file. Requires cluster_name in platform config file. Usage: babylon azure adx run-script [OPTIONS] SCRIPT_FILE Options: Name Type Description Default --help boolean Show this message and exit. False","title":"run-script"},{"location":"cli/#babylon-azure-arm","text":"Group interacting with Azure Resources Manager Requires azure_subscription in platform config file. Usage: babylon azure arm [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands create : Create a resource deployment config. delete : Delete a resource deployment via arm deployment. list : List all the deployments for a resource group. run : Apply a resource deployment config via arm deployment.","title":"arm"},{"location":"cli/#babylon-azure-arm-create","text":"Create a resource deployment config. Usage: babylon azure arm create [OPTIONS] DEPLOYMENT_NAME Options: Name Type Description Default -t , --template-uri text N/A None --help boolean Show this message and exit. False","title":"create"},{"location":"cli/#babylon-azure-arm-delete","text":"Delete a resource deployment via arm deployment. Requires resource_group_name in platform config file. Usage: babylon azure arm delete [OPTIONS] DEPLOYMENT_NAME Options: Name Type Description Default -f , --force boolean Don't ask for validation before delete False --help boolean Show this message and exit. False","title":"delete"},{"location":"cli/#babylon-azure-arm-list","text":"List all the deployments for a resource group. Requires resource_group_name in platform config file. Usage: babylon azure arm list [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False","title":"list"},{"location":"cli/#babylon-azure-arm-run","text":"Apply a resource deployment config via arm deployment. Requires resource_group_name in platform config file. Usage: babylon azure arm run [OPTIONS] DEPLOYMENT_CONFIG_FILE_PATH Options: Name Type Description Default --help boolean Show this message and exit. False","title":"run"},{"location":"cli/#babylon-azure-storage","text":"Group interacting with Azure Storage Blob Requires storage_account_name in platform config file. Usage: babylon azure storage [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default -a , --account text Storage account name None -u , --url text Storage account url None --help boolean Show this message and exit. False Subcommands container : Group interacting with Azure Storage Blob containers","title":"storage"},{"location":"cli/#babylon-azure-storage-container","text":"Group interacting with Azure Storage Blob containers Usage: babylon azure storage container [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands create : Creates a new storageblob container with the given name delete : Deletes a storageblob container with the given name get-all : Lists storage containers from a given account","title":"container"},{"location":"cli/#babylon-azure-storage-container-create","text":"Creates a new storageblob container with the given name Usage: babylon azure storage container create [OPTIONS] CONTAINER_NAME Options: Name Type Description Default --help boolean Show this message and exit. False","title":"create"},{"location":"cli/#babylon-azure-storage-container-delete","text":"Deletes a storageblob container with the given name Usage: babylon azure storage container delete [OPTIONS] CONTAINER_NAME Options: Name Type Description Default -f , --force boolean Don't ask for validation before delete False --help boolean Show this message and exit. False","title":"delete"},{"location":"cli/#babylon-azure-storage-container-get-all","text":"Lists storage containers from a given account Usage: babylon azure storage container get-all [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False","title":"get-all"},{"location":"cli/#babylon-config","text":"Group made to work on the config Usage: babylon config [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands deployment : Sub-group for deployment display : Display current config platform : Sub-group for platform plugin : Sub-group for plugins validate : Validate current config","title":"config"},{"location":"cli/#babylon-config-deployment","text":"Sub-group for deployment Usage: babylon config deployment [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands create : Create a new deployment file DEPLOY.yaml and open editor to edit it edit : Open editor to edit variables in given deployment select : Change current selected deployment","title":"deployment"},{"location":"cli/#babylon-config-deployment-create","text":"Create a new deployment file DEPLOY.yaml and open editor to edit it Usage: babylon config deployment create [OPTIONS] DEPLOY Options: Name Type Description Default --help boolean Show this message and exit. False","title":"create"},{"location":"cli/#babylon-config-deployment-edit","text":"Open editor to edit variables in given deployment will open default deployment if no argument is passed Usage: babylon config deployment edit [OPTIONS] [DEPLOYMENT] Options: Name Type Description Default --help boolean Show this message and exit. False","title":"edit"},{"location":"cli/#babylon-config-deployment-select","text":"Change current selected deployment if not argument is passed will run in interactive mode Usage: babylon config deployment select [OPTIONS] [DEPLOYMENT] Options: Name Type Description Default --help boolean Show this message and exit. False","title":"select"},{"location":"cli/#babylon-config-display","text":"Display current config Usage: babylon config display [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False","title":"display"},{"location":"cli/#babylon-config-platform","text":"Sub-group for platform Usage: babylon config platform [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands create : No description was provided with this command. edit : Open editor to edit variables in given platform select : Change current selected platform","title":"platform"},{"location":"cli/#babylon-config-platform-create","text":"Usage: babylon config platform create [OPTIONS] PLATFORM Options: Name Type Description Default --help boolean Show this message and exit. False","title":"create"},{"location":"cli/#babylon-config-platform-edit","text":"Open editor to edit variables in given platform will open default platform if no argument is passed Usage: babylon config platform edit [OPTIONS] [PLATFORM] Options: Name Type Description Default --help boolean Show this message and exit. False","title":"edit"},{"location":"cli/#babylon-config-platform-select","text":"Change current selected platform if not argument is passed will run in interactive mode Usage: babylon config platform select [OPTIONS] [PLATFORM] Options: Name Type Description Default --help boolean Show this message and exit. False","title":"select"},{"location":"cli/#babylon-config-plugin","text":"Sub-group for plugins Usage: babylon config plugin [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands activate : Activate PLUGIN add : Add a plugin found at PLUGIN_PATH deactivate : Deactivate PLUGIN remove : Remove PLUGIN","title":"plugin"},{"location":"cli/#babylon-config-plugin-activate","text":"Activate PLUGIN Usage: babylon config plugin activate [OPTIONS] PLUGIN Options: Name Type Description Default --help boolean Show this message and exit. False","title":"activate"},{"location":"cli/#babylon-config-plugin-add","text":"Add a plugin found at PLUGIN_PATH Usage: babylon config plugin add [OPTIONS] PLUGIN_PATH Options: Name Type Description Default --help boolean Show this message and exit. False","title":"add"},{"location":"cli/#babylon-config-plugin-deactivate","text":"Deactivate PLUGIN Usage: babylon config plugin deactivate [OPTIONS] PLUGIN Options: Name Type Description Default --help boolean Show this message and exit. False","title":"deactivate"},{"location":"cli/#babylon-config-plugin-remove","text":"Remove PLUGIN Usage: babylon config plugin remove [OPTIONS] PLUGIN Options: Name Type Description Default --help boolean Show this message and exit. False","title":"remove"},{"location":"cli/#babylon-config-validate","text":"Validate current config Usage: babylon config validate [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False","title":"validate"},{"location":"cli/#babylon-debug","text":"Add debug capacities of runs Requires k8s_namespace in platform config file. Requires k8s_context in platform config file. Usage: babylon debug [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands get-workflow-pods : Get pods information for the given WORKFLOW","title":"debug"},{"location":"cli/#babylon-debug-get-workflow-pods","text":"Get pods information for the given WORKFLOW Requires the program kubectl to run. Usage: babylon debug get-workflow-pods [OPTIONS] WORKFLOW Options: Name Type Description Default --help boolean Show this message and exit. False","title":"get-workflow-pods"},{"location":"cli/#babylon-powerbi","text":"Group interacting with PowerBI Requires powerbi_api_scope in platform config file. Usage: babylon powerbi [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands dataset : Group initialized from a template report : Group initialized from a template workspace : Group initialized from a template","title":"powerbi"},{"location":"cli/#babylon-powerbi-dataset","text":"Group initialized from a template Usage: babylon powerbi dataset [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands get-all : Command created from a template","title":"dataset"},{"location":"cli/#babylon-powerbi-dataset-get-all","text":"Command created from a template Usage: babylon powerbi dataset get-all [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False","title":"get-all"},{"location":"cli/#babylon-powerbi-report","text":"Group initialized from a template Usage: babylon powerbi report [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands get-all : Command created from a template","title":"report"},{"location":"cli/#babylon-powerbi-report-get-all","text":"Command created from a template Usage: babylon powerbi report get-all [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False","title":"get-all"},{"location":"cli/#babylon-powerbi-workspace","text":"Group initialized from a template Usage: babylon powerbi workspace [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands get-all : Command created from a template","title":"workspace"},{"location":"cli/#babylon-powerbi-workspace-get-all","text":"Command created from a template Usage: babylon powerbi workspace get-all [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False","title":"get-all"},{"location":"cli/#babylon-terraform-cloud","text":"Group allowing interactions with the Terraform Cloud API Requires key organization in terraform_cloud.yaml in the working_dir. Requires key url in terraform_cloud.yaml in the working_dir. Requires key token in terraform_cloud.yaml in the working_dir. Usage: babylon terraform-cloud [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands workspace : Sub-group allowing interaction with the organization of the Terraform Cloud API","title":"terraform-cloud"},{"location":"cli/#babylon-terraform-cloud-workspace","text":"Sub-group allowing interaction with the organization of the Terraform Cloud API Usage: babylon terraform-cloud workspace [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands create : Use given parameters to create a workspace in the organization delete : Delete a workspace from the organization get : Get a workspace in the organization get-all : Get all available workspaces in the organization last-run : Get state of the last run of a workspace outputs : List outputs of a workspace. run : Start the run of a workspace vars : Interact with the vars of a workspace","title":"workspace"},{"location":"cli/#babylon-terraform-cloud-workspace-create","text":"Use given parameters to create a workspace in the organization Requires key vcs_oauth_token_id in terraform_workspace.yaml in the working_dir. Requires key vcs_branch in terraform_workspace.yaml in the working_dir. Requires key vcs_identifier in terraform_workspace.yaml in the working_dir. Requires key working_directory in terraform_workspace.yaml in the working_dir. Usage: babylon terraform-cloud workspace create [OPTIONS] WORKSPACE_NAME Options: Name Type Description Default -o , --output file File to which content should be outputted (json-formatted) None -s , --select boolean Should the id of the created workspace set in the working dir file ? False --help boolean Show this message and exit. False","title":"create"},{"location":"cli/#babylon-terraform-cloud-workspace-delete","text":"Delete a workspace from the organization Requires key workspace_id in terraform_workspace.yaml in the working_dir. Usage: babylon terraform-cloud workspace delete [OPTIONS] Options: Name Type Description Default -f , --force boolean Should validation be skipped ? False -w , --workspace text Id of the workspace to use None --help boolean Show this message and exit. False","title":"delete"},{"location":"cli/#babylon-terraform-cloud-workspace-get","text":"Get a workspace in the organization Requires key workspace_id in terraform_workspace.yaml in the working_dir. Usage: babylon terraform-cloud workspace get [OPTIONS] Options: Name Type Description Default -w , --workspace text Id of the workspace to use None -o , --output file File to which content should be outputted (json-formatted) None --help boolean Show this message and exit. False","title":"get"},{"location":"cli/#babylon-terraform-cloud-workspace-get-all","text":"Get all available workspaces in the organization Usage: babylon terraform-cloud workspace get-all [OPTIONS] Options: Name Type Description Default -o , --output file File to which content should be outputted (json-formatted) None --help boolean Show this message and exit. False","title":"get-all"},{"location":"cli/#babylon-terraform-cloud-workspace-last-run","text":"Get state of the last run of a workspace Requires key workspace_id in terraform_workspace.yaml in the working_dir. Usage: babylon terraform-cloud workspace last-run [OPTIONS] Options: Name Type Description Default -o , --output file File to which content should be outputted (json-formatted) None -w , --workspace text Id of the workspace to use None --help boolean Show this message and exit. False","title":"last-run"},{"location":"cli/#babylon-terraform-cloud-workspace-outputs","text":"List outputs of a workspace. Sensitive outputs are not readable, use -s option to access the state in the web application to get those. Requires key workspace_id in terraform_workspace.yaml in the working_dir. Usage: babylon terraform-cloud workspace outputs [OPTIONS] Options: Name Type Description Default -o , --output file File to which content should be outputted (json-formatted) None -w , --workspace text Id of the workspace to use None -s , --states boolean Add this option to open the webapp page to the states of the workspace. (Allow to see content of sensitives outputs) False --help boolean Show this message and exit. False","title":"outputs"},{"location":"cli/#babylon-terraform-cloud-workspace-run","text":"Start the run of a workspace More info on runs can be found at: https://developer.hashicorp.com/terraform/cloud-docs/api-docs/run#create-a-run Requires key workspace_id in terraform_workspace.yaml in the working_dir. Usage: babylon terraform-cloud workspace run [OPTIONS] Options: Name Type Description Default -o , --output file File to which content should be outputted (json-formatted) None -w , --workspace text Id of the workspace to use None -m , --message text Message added to the run. Run started with Babylon --allow_empty_apply boolean Can this run have an empty apply ? False --help boolean Show this message and exit. False","title":"run"},{"location":"cli/#babylon-terraform-cloud-workspace-vars","text":"Interact with the vars of a workspace Usage: babylon terraform-cloud workspace vars [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands create : Set VAR_KEY variable to VAR_VALUE in a workspace delete : Delete VAR_KEY variable in a workspace get : Get VAR_KEY variable in a workspace get-all : Get all available variables in the workspace update : Update VAR_KEY variable in a workspace","title":"vars"},{"location":"cli/#babylon-terraform-cloud-workspace-vars-create","text":"Set VAR_KEY variable to VAR_VALUE in a workspace More information on the arguments can be found at : https://developer.hashicorp.com/terraform/cloud-docs/api-docs/variables#request-body Requires key workspace_id in terraform_workspace.yaml in the working_dir. Usage: babylon terraform-cloud workspace vars create [OPTIONS] VAR_KEY VAR_VALUE VAR_DESCRIPTION {terraform|env} Options: Name Type Description Default -w , --workspace text Id of the workspace to use None --hcl boolean Should the var be evaluated as a HCL string False --sensitive boolean Is the var sensitive False --help boolean Show this message and exit. False","title":"create"},{"location":"cli/#babylon-terraform-cloud-workspace-vars-delete","text":"Delete VAR_KEY variable in a workspace Requires key workspace_id in terraform_workspace.yaml in the working_dir. Usage: babylon terraform-cloud workspace vars delete [OPTIONS] VAR_KEY Options: Name Type Description Default -w , --workspace text Id of the workspace to use None -f , --force boolean Should validation be skipped ? False --help boolean Show this message and exit. False","title":"delete"},{"location":"cli/#babylon-terraform-cloud-workspace-vars-get","text":"Get VAR_KEY variable in a workspace Requires key workspace_id in terraform_workspace.yaml in the working_dir. Usage: babylon terraform-cloud workspace vars get [OPTIONS] VAR_KEY Options: Name Type Description Default -o , --output file File to which content should be outputted (json-formatted) None -w , --workspace text Id of the workspace to use None --help boolean Show this message and exit. False","title":"get"},{"location":"cli/#babylon-terraform-cloud-workspace-vars-get-all","text":"Get all available variables in the workspace Requires key workspace_id in terraform_workspace.yaml in the working_dir. Usage: babylon terraform-cloud workspace vars get-all [OPTIONS] Options: Name Type Description Default -o , --output file File to which content should be outputted (json-formatted) None -w , --workspace text Id of the workspace to use None --help boolean Show this message and exit. False","title":"get-all"},{"location":"cli/#babylon-terraform-cloud-workspace-vars-update","text":"Update VAR_KEY variable in a workspace More information on the arguments can be found at : https://developer.hashicorp.com/terraform/cloud-docs/api-docs/variables#request-body Requires key workspace_id in terraform_workspace.yaml in the working_dir. Usage: babylon terraform-cloud workspace vars update [OPTIONS] VAR_KEY Options: Name Type Description Default -w , --workspace text Id of the workspace to use None --value text A new value to apply to the variable None --description text A new description to apply to the variable None --help boolean Show this message and exit. False","title":"update"},{"location":"cli/#babylon-working-dir","text":"Command group handling working directory information Usage: babylon working-dir [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands complete : Complete the current working_dir for missing elements display : No description was provided with this command. init : Initialize the current working_dir validate : Validate the current working_dir zip-env : Zip a working_dir to given PATH","title":"working-dir"},{"location":"cli/#babylon-working-dir-complete","text":"Complete the current working_dir for missing elements Usage: babylon working-dir complete [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False","title":"complete"},{"location":"cli/#babylon-working-dir-display","text":"Usage: babylon working-dir display [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False","title":"display"},{"location":"cli/#babylon-working-dir-init","text":"Initialize the current working_dir Usage: babylon working-dir init [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False","title":"init"},{"location":"cli/#babylon-working-dir-validate","text":"Validate the current working_dir Usage: babylon working-dir validate [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False","title":"validate"},{"location":"cli/#babylon-working-dir-zip-env","text":"Zip a working_dir to given PATH PATH can be a folder (archive name will default to working_dir.zip) or a .zip file Usage: babylon working-dir zip-env [OPTIONS] PATH Options: Name Type Description Default -f , --force boolean Force replacement of existing file with new zip False --help boolean Show this message and exit. False","title":"zip-env"},{"location":"contribute/","text":"How-to contribute to Babylon Babylon use a hierarchy of groups, subgroups, and commands to allow the user to guide him. So if you want to create a new set of commands you will want to make sure to group them in a logical structure. Guidelines Babylon code style is enforced with three tools that block pull requests and push on the main branch. Formatting with yapf A .style.yapf file is included at the root of the project and specifies specific parameters Babylon uses. Please integrate yapf autoformatting within your IDE choice. Linting with Flake8 A .flake8 file is included at the root of the project and specifies specific parameters Babylon uses. Please integrate flake8 linting within your IDE of choice. Testing with pytest Units tests are located in the tests folder. Tests should be run when the Babylon/utils are modified as it is for now the only part of the code that is automated. The plugin babylon dev-tools The plugin babylon dev-tools is available, once you added it you can do babylon dev-tools --help to check the existing commands Adding the plugin In the folder you cloned Babylon you can do the following command to activate the plugin babylon config plugin add plugins/dev_tools After running this command you will have access to the plugin in you babylon Use babylon dev-tools to initialize elements You can use babylon dev-tools initialize-group to initialize all the files for a new group (works with subgroups too) babylon self initialize-group mynewgroup mynewsubgroup # This command will try to create the group mynewsubgroup in mynewgroup # if mynewgroup does not exist it will create it first After running the previous command you will have this new structure added to the project Babylon \u251c\u2500\u2500 groups/ \u2502 \u251c\u2500\u2500 __init__.py < This file is modified to add the new command to the cli \u2502 \u251c\u2500\u2500 ... \u2502 \u2514\u2500\u2500 mynewgroup/ < This folder is created \u2502 \u251c\u2500\u2500 __init__.py < This file is initialized \u2502 \u251c\u2500\u2500 commands/ < This folder is created \u2502 | \u2514\u2500\u2500 __init__.py < This file is initialized \u2502 \u2514\u2500\u2500 groups/ < This folder is created \u2502 \u251c\u2500\u2500 __init__.py < This file is initialized and then modified to add the new subcommand to the cli \u2502 \u2514\u2500\u2500 mynewsubgroup/ < This folder is created (with the same hierarchy as mynewgroup inside) \u2514\u2500\u2500 ... You can use babylon dev-tools initialize-command to initialize a new command (will initialize the required groups if non existent). You can add as many groups as you want (starting from 0 groups) babylon dev-tools initialize-command mynewgroup mynewcommand # This command will try to create the command mynewcommand in mynewgroup # if mynewgroup does not exist it will create it first After running the previous command you will have the following change to the structure Babylon \u251c\u2500\u2500 groups/ \u2502 \u251c\u2500\u2500 ... \u2502 \u2514\u2500\u2500 mynewgroup/ \u2502 \u251c\u2500\u2500 commands/ \u2502 | \u251c\u2500\u2500 mynewcommand.py < This file is initialized \u2502 | \u2514\u2500\u2500 __init__.py < This file is modified to add the new command to the cli \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 ... If you want to do it by hand you can check the following sections for a manual approach to creating a group / subgroup / command Create files by hand In this part you will learn to do what the commands of initialization have automatized. Creating a new group of commands Create a new package inside Babylon.groups This new package comes with a package called commands and a package named groups and you can use the following template for the new_group.__init__.py from click import group from click import pass_context from click.core import Context from .commands import list_commands from .groups import list_groups @group() @pass_context def group_template(ctx: Context): \"\"\"Group initialized from a template\"\"\" pass for _command in list_commands: group_template.add_command(_command) for _group in list_groups: group_template.add_command(_group) Initialize the commands.__init__.py You can use the following template to initialize the new_group.commands.__init__.py list_commands = [ ] Initialize the groups.__init__.py You can use the following template to initialize the new_group.groups.__init__.py list_groups = [ ] Add your group to the groups callable by the cli You have to add an import for your group in the Babylon.groups.__init__.py from .api import api from .new_group import new_group # Add your import here command_groups = [ api, new_group, # Add your group command to the list of existing commands ] And your new group is then ready to be called babylon new-group #Usage: babylon new-group [OPTIONS] COMMAND [ARGS]... # # New group of commands # #Options: # --help Show this message and exit. # #Commands: # my_command Doc-string for my new command Adding a sub-group in an existing group You follow the same instruction as adding a group in Babylon.groups but in a sub-package. Create a new package in Babylon.groups.<command>.groups Add the new packages Babylon.groups.<command>.groups.<subcommand>.commands and Babylon.groups.<command>.groups.<subcommand>.groups Initialize the multiple __init__.py the same way as if you were creating a group for Babylon Add your group in the list of groups in the file Babylon.groups.<command>.groups.__init__.py instead of the one in Babylon.groups.__init__.py Adding a new command to an existing group Template This template can be copied in the commands package for the group we want to add the command to. import logging from click import command logger = logging.getLogger(\"Babylon\") @command() def command_template(): \"\"\"Command created from a template\"\"\" logger.warning(\"This command was initialized from a template and is empty\") Add to commands.__init__.py Once the command is created you can make a link to it in the commands.__init__.py file from .older_command import older_command from .my_command import my_command # You import your new command here list_commands = [ older_command, my_command, # And you add it to the list of existing commands here ] And that's all folks, you added your command to an existing group of commands","title":"Contribute"},{"location":"contribute/#how-to-contribute-to-babylon","text":"Babylon use a hierarchy of groups, subgroups, and commands to allow the user to guide him. So if you want to create a new set of commands you will want to make sure to group them in a logical structure.","title":"How-to contribute to Babylon"},{"location":"contribute/#guidelines","text":"Babylon code style is enforced with three tools that block pull requests and push on the main branch.","title":"Guidelines"},{"location":"contribute/#formatting-with-yapf","text":"A .style.yapf file is included at the root of the project and specifies specific parameters Babylon uses. Please integrate yapf autoformatting within your IDE choice.","title":"Formatting with yapf"},{"location":"contribute/#linting-with-flake8","text":"A .flake8 file is included at the root of the project and specifies specific parameters Babylon uses. Please integrate flake8 linting within your IDE of choice.","title":"Linting with Flake8"},{"location":"contribute/#testing-with-pytest","text":"Units tests are located in the tests folder. Tests should be run when the Babylon/utils are modified as it is for now the only part of the code that is automated.","title":"Testing with pytest"},{"location":"contribute/#the-plugin-babylon-dev-tools","text":"The plugin babylon dev-tools is available, once you added it you can do babylon dev-tools --help to check the existing commands","title":"The plugin babylon dev-tools"},{"location":"contribute/#adding-the-plugin","text":"In the folder you cloned Babylon you can do the following command to activate the plugin babylon config plugin add plugins/dev_tools After running this command you will have access to the plugin in you babylon","title":"Adding the plugin"},{"location":"contribute/#use-babylon-dev-tools-to-initialize-elements","text":"You can use babylon dev-tools initialize-group to initialize all the files for a new group (works with subgroups too) babylon self initialize-group mynewgroup mynewsubgroup # This command will try to create the group mynewsubgroup in mynewgroup # if mynewgroup does not exist it will create it first After running the previous command you will have this new structure added to the project Babylon \u251c\u2500\u2500 groups/ \u2502 \u251c\u2500\u2500 __init__.py < This file is modified to add the new command to the cli \u2502 \u251c\u2500\u2500 ... \u2502 \u2514\u2500\u2500 mynewgroup/ < This folder is created \u2502 \u251c\u2500\u2500 __init__.py < This file is initialized \u2502 \u251c\u2500\u2500 commands/ < This folder is created \u2502 | \u2514\u2500\u2500 __init__.py < This file is initialized \u2502 \u2514\u2500\u2500 groups/ < This folder is created \u2502 \u251c\u2500\u2500 __init__.py < This file is initialized and then modified to add the new subcommand to the cli \u2502 \u2514\u2500\u2500 mynewsubgroup/ < This folder is created (with the same hierarchy as mynewgroup inside) \u2514\u2500\u2500 ... You can use babylon dev-tools initialize-command to initialize a new command (will initialize the required groups if non existent). You can add as many groups as you want (starting from 0 groups) babylon dev-tools initialize-command mynewgroup mynewcommand # This command will try to create the command mynewcommand in mynewgroup # if mynewgroup does not exist it will create it first After running the previous command you will have the following change to the structure Babylon \u251c\u2500\u2500 groups/ \u2502 \u251c\u2500\u2500 ... \u2502 \u2514\u2500\u2500 mynewgroup/ \u2502 \u251c\u2500\u2500 commands/ \u2502 | \u251c\u2500\u2500 mynewcommand.py < This file is initialized \u2502 | \u2514\u2500\u2500 __init__.py < This file is modified to add the new command to the cli \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 ... If you want to do it by hand you can check the following sections for a manual approach to creating a group / subgroup / command","title":"Use babylon dev-tools to initialize elements"},{"location":"contribute/#create-files-by-hand","text":"In this part you will learn to do what the commands of initialization have automatized.","title":"Create files by hand"},{"location":"contribute/#creating-a-new-group-of-commands","text":"","title":"Creating a new group of commands"},{"location":"contribute/#create-a-new-package-inside-babylongroups","text":"This new package comes with a package called commands and a package named groups and you can use the following template for the new_group.__init__.py from click import group from click import pass_context from click.core import Context from .commands import list_commands from .groups import list_groups @group() @pass_context def group_template(ctx: Context): \"\"\"Group initialized from a template\"\"\" pass for _command in list_commands: group_template.add_command(_command) for _group in list_groups: group_template.add_command(_group)","title":"Create a new package inside Babylon.groups"},{"location":"contribute/#initialize-the-commands__init__py","text":"You can use the following template to initialize the new_group.commands.__init__.py list_commands = [ ]","title":"Initialize the commands.__init__.py"},{"location":"contribute/#initialize-the-groups__init__py","text":"You can use the following template to initialize the new_group.groups.__init__.py list_groups = [ ]","title":"Initialize the groups.__init__.py"},{"location":"contribute/#add-your-group-to-the-groups-callable-by-the-cli","text":"You have to add an import for your group in the Babylon.groups.__init__.py from .api import api from .new_group import new_group # Add your import here command_groups = [ api, new_group, # Add your group command to the list of existing commands ] And your new group is then ready to be called babylon new-group #Usage: babylon new-group [OPTIONS] COMMAND [ARGS]... # # New group of commands # #Options: # --help Show this message and exit. # #Commands: # my_command Doc-string for my new command","title":"Add your group to the groups callable by the cli"},{"location":"contribute/#adding-a-sub-group-in-an-existing-group","text":"You follow the same instruction as adding a group in Babylon.groups but in a sub-package. Create a new package in Babylon.groups.<command>.groups Add the new packages Babylon.groups.<command>.groups.<subcommand>.commands and Babylon.groups.<command>.groups.<subcommand>.groups Initialize the multiple __init__.py the same way as if you were creating a group for Babylon Add your group in the list of groups in the file Babylon.groups.<command>.groups.__init__.py instead of the one in Babylon.groups.__init__.py","title":"Adding a sub-group in an existing group"},{"location":"contribute/#adding-a-new-command-to-an-existing-group","text":"","title":"Adding a new command to an existing group"},{"location":"contribute/#template","text":"This template can be copied in the commands package for the group we want to add the command to. import logging from click import command logger = logging.getLogger(\"Babylon\") @command() def command_template(): \"\"\"Command created from a template\"\"\" logger.warning(\"This command was initialized from a template and is empty\")","title":"Template"},{"location":"contribute/#add-to-commands__init__py","text":"Once the command is created you can make a link to it in the commands.__init__.py file from .older_command import older_command from .my_command import my_command # You import your new command here list_commands = [ older_command, my_command, # And you add it to the list of existing commands here ] And that's all folks, you added your command to an existing group of commands","title":"Add to commands.__init__.py"},{"location":"dependencies/","text":"List of dependencies Azure connection requirements Azure services requirements Click requirements Cosmotech specific requirements Other requirements Testing requirements Documentation generation requirements","title":"Dependencies"},{"location":"dependencies/#list-of-dependencies","text":"Azure connection requirements Azure services requirements Click requirements Cosmotech specific requirements Other requirements Testing requirements Documentation generation requirements","title":"List of dependencies"},{"location":"environment/","text":"About the environment An environment is a combination of 2 parts : A working directory A configuration Simple access to the full environment can be made by using the singleton Babylon.utils.environment.Environment Working Directory A working directory is the ensemble of files you will need to have a running simulator on the cloud. Solution \u251c\u2500\u2500 ... \u2514\u2500\u2500 API \u2514\u2500\u2500 API_FILES_HERE More folders and file can be required and will be added in future version, don't hesitate to use babylon working-dir complete to add missing elements of the working directory. API This is a folder containing the different files you will want to send to the api For example: Solution.yaml Workspace.json Configuration The configuration can be controlled by the group of commands babylon config A configuration is the combination of a Deployment and a Platform. Deployment A deployment is the link between a solution and a platform, it contains the ids required to access the instance of a solution on a platform deploy.yaml This is a yaml file containing a list of key-values used to identify the deployment of a solution in the platform # organization_id : the id of the organization on the API organization_id: \"\" # solution_id : the id of the solution on the API solution_id: \"\" # workspace_id : the id of the workspace on the API workspace_id: \"\" # workspace_key : the key of the workspace on the API shared with Terraform configuration workspace_key: \"\" # api_url : the url of the API (used for validation) api_url: \"\" # database_name : the name of the database used in Azure Data Explorer database_name: \"\" # digital_twin_url : URL of the digital twin to use digital_twin_url: \"\" # ACR image reference (my_repository:my_tag) acr_image_reference: \"\" # acr_image_reference (repository:tag) deprecated : image repository should be simulator_repository and tag sould be simulator_version # simulator_repository: the solution simulator repository (repository value in Solution.yaml) simulator_repository: \"\" # simulator_version: the solution simulator version (version value in Solution.yaml) simulator_version: \"\" # simulator_url:the solution simulator url (url value in Solution.yaml) simulator_url: \"\" # send_scenario_metadata_to_event_hub: Set this property to false to not send scenario metada to Azure Event Hub Namespace for this Workspace. # The Event Hub Namespace must be named \\'<organization_id\\>-<workspace_id\\>\\' (in lower case). # This Namespace must also contain two Event Hubs named \\'probesmeasures\\' and \\'scenariorun\\'. send_scenario_metadata_to_event_hub: true # use_dedicated_event_hub_namespace: Set this property to false to not to use a dedicated Azure Event Hub Namespace for this Workspace. # The Event Hub Namespace must be named \\'<organization_id\\>-<workspace_id\\>\\' (in lower case). # This Namespace must also contain two Event Hubs named \\'scenariometadata\\' and \\'scenariorunmetadata\\'. use_dedicated_event_hub_namespace: true # PowerBI workspace id powerbi_workspace_id: \"\" Platform A platform is a cloud where you deployed an API, you set the information required to access given platform platform.yaml This is a yaml file containing a list of key values used to identify the platform to connect # api_url : the url of the API api_url: \"\" # api_scope : the default scope used by the API api_scope: \"\" # k8s_context : the name of the k8s context that should be used # This name is the local name you can get using `kubectl config get-contexts` k8s_context: \"\" # k8s_namespace : the namespace to use in the k8s context k8s_namespace: \"\" # azure_subscription : The azure subscription used to contain the platform azure_subscription: \"\" # cluster_name: The name of the Azure Data Explorer Cluster cluster_name: \"\" # resource_group_name: The name fo the resource group used on the platform resource_group_name: \"\" # ACR source registry name source_registry.azurecr.io acr_src_registry_name: \"\" # ACR destination registry name dest_registry.azurecr.io acr_dest_registry_name: \"\" # resources_location: azure resource location ex: westeurope resources_location: \"\" # Storage account name storage_account_name: \"\" # PowerBI api scope powerbi_api_scope: \"https://analysis.windows.net/powerbi/api/.default\" Environment variables override The following environment variables are available to override the default values used by babylon (for example while making a bash script chaining commands) Environment variable Default Effect BABYLON_CONFIG_DIRECTORY ~/.config/babylon/ Allows to replace the used configuration directory BABYLON_WORKING_DIRECTORY . aka you current running dir Allows to replace the current working directory","title":"Environments"},{"location":"environment/#about-the-environment","text":"An environment is a combination of 2 parts : A working directory A configuration Simple access to the full environment can be made by using the singleton Babylon.utils.environment.Environment","title":"About the environment"},{"location":"environment/#working-directory","text":"A working directory is the ensemble of files you will need to have a running simulator on the cloud. Solution \u251c\u2500\u2500 ... \u2514\u2500\u2500 API \u2514\u2500\u2500 API_FILES_HERE More folders and file can be required and will be added in future version, don't hesitate to use babylon working-dir complete to add missing elements of the working directory.","title":"Working Directory"},{"location":"environment/#api","text":"This is a folder containing the different files you will want to send to the api For example: Solution.yaml Workspace.json","title":"API"},{"location":"environment/#configuration","text":"The configuration can be controlled by the group of commands babylon config A configuration is the combination of a Deployment and a Platform.","title":"Configuration"},{"location":"environment/#deployment","text":"A deployment is the link between a solution and a platform, it contains the ids required to access the instance of a solution on a platform","title":"Deployment"},{"location":"environment/#deployyaml","text":"This is a yaml file containing a list of key-values used to identify the deployment of a solution in the platform # organization_id : the id of the organization on the API organization_id: \"\" # solution_id : the id of the solution on the API solution_id: \"\" # workspace_id : the id of the workspace on the API workspace_id: \"\" # workspace_key : the key of the workspace on the API shared with Terraform configuration workspace_key: \"\" # api_url : the url of the API (used for validation) api_url: \"\" # database_name : the name of the database used in Azure Data Explorer database_name: \"\" # digital_twin_url : URL of the digital twin to use digital_twin_url: \"\" # ACR image reference (my_repository:my_tag) acr_image_reference: \"\" # acr_image_reference (repository:tag) deprecated : image repository should be simulator_repository and tag sould be simulator_version # simulator_repository: the solution simulator repository (repository value in Solution.yaml) simulator_repository: \"\" # simulator_version: the solution simulator version (version value in Solution.yaml) simulator_version: \"\" # simulator_url:the solution simulator url (url value in Solution.yaml) simulator_url: \"\" # send_scenario_metadata_to_event_hub: Set this property to false to not send scenario metada to Azure Event Hub Namespace for this Workspace. # The Event Hub Namespace must be named \\'<organization_id\\>-<workspace_id\\>\\' (in lower case). # This Namespace must also contain two Event Hubs named \\'probesmeasures\\' and \\'scenariorun\\'. send_scenario_metadata_to_event_hub: true # use_dedicated_event_hub_namespace: Set this property to false to not to use a dedicated Azure Event Hub Namespace for this Workspace. # The Event Hub Namespace must be named \\'<organization_id\\>-<workspace_id\\>\\' (in lower case). # This Namespace must also contain two Event Hubs named \\'scenariometadata\\' and \\'scenariorunmetadata\\'. use_dedicated_event_hub_namespace: true # PowerBI workspace id powerbi_workspace_id: \"\"","title":"deploy.yaml"},{"location":"environment/#platform","text":"A platform is a cloud where you deployed an API, you set the information required to access given platform","title":"Platform"},{"location":"environment/#platformyaml","text":"This is a yaml file containing a list of key values used to identify the platform to connect # api_url : the url of the API api_url: \"\" # api_scope : the default scope used by the API api_scope: \"\" # k8s_context : the name of the k8s context that should be used # This name is the local name you can get using `kubectl config get-contexts` k8s_context: \"\" # k8s_namespace : the namespace to use in the k8s context k8s_namespace: \"\" # azure_subscription : The azure subscription used to contain the platform azure_subscription: \"\" # cluster_name: The name of the Azure Data Explorer Cluster cluster_name: \"\" # resource_group_name: The name fo the resource group used on the platform resource_group_name: \"\" # ACR source registry name source_registry.azurecr.io acr_src_registry_name: \"\" # ACR destination registry name dest_registry.azurecr.io acr_dest_registry_name: \"\" # resources_location: azure resource location ex: westeurope resources_location: \"\" # Storage account name storage_account_name: \"\" # PowerBI api scope powerbi_api_scope: \"https://analysis.windows.net/powerbi/api/.default\"","title":"platform.yaml"},{"location":"environment/#environment-variables-override","text":"The following environment variables are available to override the default values used by babylon (for example while making a bash script chaining commands) Environment variable Default Effect BABYLON_CONFIG_DIRECTORY ~/.config/babylon/ Allows to replace the used configuration directory BABYLON_WORKING_DIRECTORY . aka you current running dir Allows to replace the current working directory","title":"Environment variables override"},{"location":"installation/","text":"Installation git clone git@github.com:Cosmo-Tech/Babylon.git cd Babylon pip install . Running Babylon with Docker docker pull ghcr.io/cosmo-tech/babylon:latest mkdir config workingdir docker run -it --rm --mount type=bind,source=\"$(pwd)\"/config,target=/opt/babylon/config --mount type=bind,source=\"$(pwd)\"/workingdir,target=/etc/babylon/workingdir babylon Then you can access and edit the following host directories: - Configuration is in host config/ directory, ( /opt/babylon/config/ in the container) - Configuration is in host workingdir/ directory, ( /etc/babylon/workingdir/ in the container) Dev mode installation If you want to develop on top of Babylon you can set it up in developer mode ( -e ) And if you don't want to multiply versions of Babylon, you can also add it in a virtual environment (requires venv ) python -m venv .venv # Create your venv named .venv source .venv/bin/activate # Activate your venv pip install -e . # Install Babylon in developer mode The next line is optional, run it if you want to have the dev-tools plugin to facilitate command & groups manipulation babylon config plugin add plugins/dev_tools # Add the plugin dev_tools situated in the folder plugins/dev_tools Autocompletion After install you can run the following commands to get autocompletion (in bash, and stays effective after restarts as you modify your .bashrc ) echo 'eval \"$(_BABYLON_COMPLETE=bash_source babylon)\"' >> ~/.bashrc source ~/.bashrc You can also only run the following command to have autocompletion until you close your current terminal : eval \"$(_BABYLON_COMPLETE=bash_source babylon)\" For other type of command line you can check this link for official click documentation","title":"Installation"},{"location":"installation/#installation","text":"git clone git@github.com:Cosmo-Tech/Babylon.git cd Babylon pip install .","title":"Installation"},{"location":"installation/#running-babylon-with-docker","text":"docker pull ghcr.io/cosmo-tech/babylon:latest mkdir config workingdir docker run -it --rm --mount type=bind,source=\"$(pwd)\"/config,target=/opt/babylon/config --mount type=bind,source=\"$(pwd)\"/workingdir,target=/etc/babylon/workingdir babylon Then you can access and edit the following host directories: - Configuration is in host config/ directory, ( /opt/babylon/config/ in the container) - Configuration is in host workingdir/ directory, ( /etc/babylon/workingdir/ in the container)","title":"Running Babylon with Docker"},{"location":"installation/#dev-mode-installation","text":"If you want to develop on top of Babylon you can set it up in developer mode ( -e ) And if you don't want to multiply versions of Babylon, you can also add it in a virtual environment (requires venv ) python -m venv .venv # Create your venv named .venv source .venv/bin/activate # Activate your venv pip install -e . # Install Babylon in developer mode The next line is optional, run it if you want to have the dev-tools plugin to facilitate command & groups manipulation babylon config plugin add plugins/dev_tools # Add the plugin dev_tools situated in the folder plugins/dev_tools","title":"Dev mode installation"},{"location":"installation/#autocompletion","text":"After install you can run the following commands to get autocompletion (in bash, and stays effective after restarts as you modify your .bashrc ) echo 'eval \"$(_BABYLON_COMPLETE=bash_source babylon)\"' >> ~/.bashrc source ~/.bashrc You can also only run the following command to have autocompletion until you close your current terminal : eval \"$(_BABYLON_COMPLETE=bash_source babylon)\" For other type of command line you can check this link for official click documentation","title":"Autocompletion"},{"location":"macro/","text":"Macro commands Concept The idea of a macro command is to allow the developer to do a script of commands inside of Babylon instead of using bash or other technologies. To make this possible 2 elements are required : - A way to call a command inside another command - A way for commands to exchange information between their runs Helpers The following function exists to help you run other commands inside a command. run_command run_command ( command_line ) Helper used to run a command Parameters: command_line ( list [ str ] ) \u2013 command line of the command to run Returns: Any \u2013 result of the command Return type The following class was defined as a response type for commands allowing returns to keep information CommandResponse Contains command, status and data output from a command return value","title":"Macro commands"},{"location":"macro/#macro-commands","text":"","title":"Macro commands"},{"location":"macro/#concept","text":"The idea of a macro command is to allow the developer to do a script of commands inside of Babylon instead of using bash or other technologies. To make this possible 2 elements are required : - A way to call a command inside another command - A way for commands to exchange information between their runs","title":"Concept"},{"location":"macro/#helpers","text":"The following function exists to help you run other commands inside a command.","title":"Helpers"},{"location":"macro/#Babylon.utils.command_helper.run_command","text":"run_command ( command_line ) Helper used to run a command Parameters: command_line ( list [ str ] ) \u2013 command line of the command to run Returns: Any \u2013 result of the command","title":"run_command()"},{"location":"macro/#return-type","text":"The following class was defined as a response type for commands allowing returns to keep information","title":"Return type"},{"location":"macro/#Babylon.utils.response.CommandResponse","text":"Contains command, status and data output from a command return value","title":"CommandResponse"},{"location":"plugins/","text":"Concerning plugins Now, where to begin? Ah, yes. \"Concerning plugins\". Plugins have been added as a part of babylon before the 1.0. Quite content to ignore and be ignored by the world of the other commands. Babylon being, after all, full of commands beyond count. Plugins must seem of little importance, being neither renowned as great commands, nor being part of the roadmap. ... In fact, it has been remarked by some that plugins only real usage if for other developers. A rather unfair observation as they have also been developed by the maintainers of the repo, and made an integral part of Babylon. But where their hearts truly lies is in peace and easiness of development. How to create a plugin A plugin folder follows a simple basic format: - __init__.py - requirements.txt - plugin_config.yaml The __init__.py file contains at minima a click command named after the plugin (for example: MyPlugin ) import click @click.command() def MyPlugin(): print(\"This is my awesome Plugin\") The requirements.txt contains all specific requirements necessary for the plugin, in case of conflict with the plugins required by Babylon they won't be installed The plugin_config.yaml contains some information about the plugin, as of now it is relatively bare plugin_name: MyPlugin You can see that the name of the command in the __init__.py and the plugin_name in the plugin_config.yaml are identical. It is by design, as the parameter plugin_name is used by babylon to find the command in the __init__.py to make it an available command. If you want an easier time creating a plugin, you can use the command babylon dev-tools initialize-plugin of the plugin dev-tools to create a bare plugin ready for you to develop. Use of plugin babylon dev-tools to add groups and commands The plugin babylon dev-tools has an optional parameter --plugin which allows you to apply its command directly to an installed plugin. Every of those commands will then be available to you if you want to follow the babylon infrastructure for your plugin. Those commands suppose you initialized your plugin using babylon dev-tools initialize-plugin to have the basic architecture based on the babylon one. Interact with a plugin You can make use of the group of commands babylon config plugin to add/remove or activate/deactivate a plugin. Adding a plugin makes it known to babylon, before its folder are ignored and any change you made to them would have no effect, removing a plugin won't delete your folder, it will only unlink them from babylon at the configuration level. Activating a plugin will make it available in the cli, be careful, a plugin with the name of a babylon core command won't be usable even if not refused when adding it. This is by design, core commands are always first. Deactivating a plugin won't remove it, it will just make the command unavailable to the cli, reactivating it will make it available once again.","title":"Plugins"},{"location":"plugins/#concerning-plugins","text":"Now, where to begin? Ah, yes. \"Concerning plugins\". Plugins have been added as a part of babylon before the 1.0. Quite content to ignore and be ignored by the world of the other commands. Babylon being, after all, full of commands beyond count. Plugins must seem of little importance, being neither renowned as great commands, nor being part of the roadmap. ... In fact, it has been remarked by some that plugins only real usage if for other developers. A rather unfair observation as they have also been developed by the maintainers of the repo, and made an integral part of Babylon. But where their hearts truly lies is in peace and easiness of development.","title":"Concerning plugins"},{"location":"plugins/#how-to-create-a-plugin","text":"A plugin folder follows a simple basic format: - __init__.py - requirements.txt - plugin_config.yaml The __init__.py file contains at minima a click command named after the plugin (for example: MyPlugin ) import click @click.command() def MyPlugin(): print(\"This is my awesome Plugin\") The requirements.txt contains all specific requirements necessary for the plugin, in case of conflict with the plugins required by Babylon they won't be installed The plugin_config.yaml contains some information about the plugin, as of now it is relatively bare plugin_name: MyPlugin You can see that the name of the command in the __init__.py and the plugin_name in the plugin_config.yaml are identical. It is by design, as the parameter plugin_name is used by babylon to find the command in the __init__.py to make it an available command. If you want an easier time creating a plugin, you can use the command babylon dev-tools initialize-plugin of the plugin dev-tools to create a bare plugin ready for you to develop.","title":"How to create a plugin"},{"location":"plugins/#use-of-plugin-babylon-dev-tools-to-add-groups-and-commands","text":"The plugin babylon dev-tools has an optional parameter --plugin which allows you to apply its command directly to an installed plugin. Every of those commands will then be available to you if you want to follow the babylon infrastructure for your plugin. Those commands suppose you initialized your plugin using babylon dev-tools initialize-plugin to have the basic architecture based on the babylon one.","title":"Use of plugin babylon dev-tools to add groups and commands"},{"location":"plugins/#interact-with-a-plugin","text":"You can make use of the group of commands babylon config plugin to add/remove or activate/deactivate a plugin. Adding a plugin makes it known to babylon, before its folder are ignored and any change you made to them would have no effect, removing a plugin won't delete your folder, it will only unlink them from babylon at the configuration level. Activating a plugin will make it available in the cli, be careful, a plugin with the name of a babylon core command won't be usable even if not refused when adding it. This is by design, core commands are always first. Deactivating a plugin won't remove it, it will just make the command unavailable to the cli, reactivating it will make it available once again.","title":"Interact with a plugin"},{"location":"Utils/api/","text":"Babylon.utils.api camel_to_underscore ( name ) Will convert a string from camelCase to snake_case will have no effect if the parameter is not a string Parameters: Name Type Description Default name Any the string to convert required Returns: Type Description Any the converted string convert_keys_case ( element , convert_function ) Will apply a convert function to all keys in an object Parameters: Name Type Description Default element Any the object to be updated required convert_function the function to apply required Returns: Type Description Any an object of the same type as the original one where all dict keys had the convert_function applied filter_api_response ( api_response_body , fields ) This function allow to apply a filter on an api response list body keys Parameters: Name Type Description Default api_response_body Iterable A Set api response data in key=>value format required fields Iterable [ str ] A Set of keys witch will be keep in the response required filter_api_response_item ( api_response_body , fields ) This function allow to apply a filter on an api unique response body keys Parameters: Name Type Description Default api_response_body Any A single api response data in key=>value format required fields Iterable [ str ] A Set of keys witch will be keep in the response required get_api_file ( api_file_path , use_working_dir_file , logger ) This function will try to find the correct file, and return its content in a format ready to be used with the cosmotech api Accepts yaml and json files Parameters: Name Type Description Default api_file_path str The path to the file to be loaded required use_working_dir_file bool Should the path be relative to the working directory ? required logger the logger to be used to log info required Returns: Type Description None if the file was not found, else the content of the loaded file underscore_to_camel ( name ) Will convert a string from snake_case to camelCase will have no effect if the parameter is not a string Parameters: Name Type Description Default name Any the string to convert required Returns: Type Description Any the converted string","title":"Cosmotech Api"},{"location":"Utils/api/#Babylon.utils.api","text":"","title":"api"},{"location":"Utils/api/#Babylon.utils.api.camel_to_underscore","text":"Will convert a string from camelCase to snake_case will have no effect if the parameter is not a string Parameters: Name Type Description Default name Any the string to convert required Returns: Type Description Any the converted string","title":"camel_to_underscore()"},{"location":"Utils/api/#Babylon.utils.api.convert_keys_case","text":"Will apply a convert function to all keys in an object Parameters: Name Type Description Default element Any the object to be updated required convert_function the function to apply required Returns: Type Description Any an object of the same type as the original one where all dict keys had the convert_function applied","title":"convert_keys_case()"},{"location":"Utils/api/#Babylon.utils.api.filter_api_response","text":"This function allow to apply a filter on an api response list body keys Parameters: Name Type Description Default api_response_body Iterable A Set api response data in key=>value format required fields Iterable [ str ] A Set of keys witch will be keep in the response required","title":"filter_api_response()"},{"location":"Utils/api/#Babylon.utils.api.filter_api_response_item","text":"This function allow to apply a filter on an api unique response body keys Parameters: Name Type Description Default api_response_body Any A single api response data in key=>value format required fields Iterable [ str ] A Set of keys witch will be keep in the response required","title":"filter_api_response_item()"},{"location":"Utils/api/#Babylon.utils.api.get_api_file","text":"This function will try to find the correct file, and return its content in a format ready to be used with the cosmotech api Accepts yaml and json files Parameters: Name Type Description Default api_file_path str The path to the file to be loaded required use_working_dir_file bool Should the path be relative to the working directory ? required logger the logger to be used to log info required Returns: Type Description None if the file was not found, else the content of the loaded file","title":"get_api_file()"},{"location":"Utils/api/#Babylon.utils.api.underscore_to_camel","text":"Will convert a string from snake_case to camelCase will have no effect if the parameter is not a string Parameters: Name Type Description Default name Any the string to convert required Returns: Type Description Any the converted string","title":"underscore_to_camel()"},{"location":"Utils/config/","text":"Configuration Base object created to store in file the configuration used in babylon create_deploy ( deploy_name ) Create a new deployment file from the template and open it with the default text editor Parameters: Name Type Description Default deploy_name str the name of the new deploy required edit_deploy ( deploy_path ) Open a given deployment file with the default text editor Parameters: Name Type Description Default deploy_path pathlib . Path the path of the deployment required get_deploy_path () Get path to the current deployment file Returns: Type Description Optional [ pathlib . Path ] path to the current deployment file get_deploy_var ( var_name ) Read a key value from the current deployment file Parameters: Name Type Description Default var_name the key to read required Returns: Type Description Optional [ object ] the value of the key in the deployment file if exists else None list_deploys () List existing deployment configurations Returns: Type Description list [ pathlib . Path ] a list of available deployments names set_deploy ( deploy_path ) Change configured deployment to the one given Parameters: Name Type Description Default deploy_path pathlib . Path the deployment path required Returns: Type Description bool True if the change was a success create_platform ( platform_name ) Create a new platform file from the template and open it with the default text editor Parameters: Name Type Description Default platform_name str the name of the new platform required edit_platform ( platform_path ) Open a given platform file with the default text editor Parameters: Name Type Description Default platform_path pathlib . Path the path of the platform required get_platform_path () Get path to the current platform file Returns: Type Description Optional [ pathlib . Path ] path to the current platform file get_platform_var ( var_name ) Read a key value from the current platform file Parameters: Name Type Description Default var_name the key to read required Returns: Type Description Optional [ object ] the value of the key in the platform file if exists else None list_platforms () List existing platform configurations Returns: Type Description list [ pathlib . Path ] a list of available platforms names set_platform ( platform_path ) Change configured platform to the one given Parameters: Name Type Description Default platform_path pathlib . Path the platform path required Returns: Type Description bool True if the change was a success save_config () Save the current config check_api () Returns: Type Description bool True if the api targeted in the deploy is the same as the platform we use","title":"Configuration"},{"location":"Utils/config/#Babylon.utils.configuration.Configuration","text":"Base object created to store in file the configuration used in babylon","title":"Configuration"},{"location":"Utils/config/#Babylon.utils.configuration.Configuration.create_deploy","text":"Create a new deployment file from the template and open it with the default text editor Parameters: Name Type Description Default deploy_name str the name of the new deploy required","title":"create_deploy()"},{"location":"Utils/config/#Babylon.utils.configuration.Configuration.edit_deploy","text":"Open a given deployment file with the default text editor Parameters: Name Type Description Default deploy_path pathlib . Path the path of the deployment required","title":"edit_deploy()"},{"location":"Utils/config/#Babylon.utils.configuration.Configuration.get_deploy_path","text":"Get path to the current deployment file Returns: Type Description Optional [ pathlib . Path ] path to the current deployment file","title":"get_deploy_path()"},{"location":"Utils/config/#Babylon.utils.configuration.Configuration.get_deploy_var","text":"Read a key value from the current deployment file Parameters: Name Type Description Default var_name the key to read required Returns: Type Description Optional [ object ] the value of the key in the deployment file if exists else None","title":"get_deploy_var()"},{"location":"Utils/config/#Babylon.utils.configuration.Configuration.list_deploys","text":"List existing deployment configurations Returns: Type Description list [ pathlib . Path ] a list of available deployments names","title":"list_deploys()"},{"location":"Utils/config/#Babylon.utils.configuration.Configuration.set_deploy","text":"Change configured deployment to the one given Parameters: Name Type Description Default deploy_path pathlib . Path the deployment path required Returns: Type Description bool True if the change was a success","title":"set_deploy()"},{"location":"Utils/config/#Babylon.utils.configuration.Configuration.create_platform","text":"Create a new platform file from the template and open it with the default text editor Parameters: Name Type Description Default platform_name str the name of the new platform required","title":"create_platform()"},{"location":"Utils/config/#Babylon.utils.configuration.Configuration.edit_platform","text":"Open a given platform file with the default text editor Parameters: Name Type Description Default platform_path pathlib . Path the path of the platform required","title":"edit_platform()"},{"location":"Utils/config/#Babylon.utils.configuration.Configuration.get_platform_path","text":"Get path to the current platform file Returns: Type Description Optional [ pathlib . Path ] path to the current platform file","title":"get_platform_path()"},{"location":"Utils/config/#Babylon.utils.configuration.Configuration.get_platform_var","text":"Read a key value from the current platform file Parameters: Name Type Description Default var_name the key to read required Returns: Type Description Optional [ object ] the value of the key in the platform file if exists else None","title":"get_platform_var()"},{"location":"Utils/config/#Babylon.utils.configuration.Configuration.list_platforms","text":"List existing platform configurations Returns: Type Description list [ pathlib . Path ] a list of available platforms names","title":"list_platforms()"},{"location":"Utils/config/#Babylon.utils.configuration.Configuration.set_platform","text":"Change configured platform to the one given Parameters: Name Type Description Default platform_path pathlib . Path the platform path required Returns: Type Description bool True if the change was a success","title":"set_platform()"},{"location":"Utils/config/#Babylon.utils.configuration.Configuration.save_config","text":"Save the current config","title":"save_config()"},{"location":"Utils/config/#Babylon.utils.configuration.Configuration.check_api","text":"Returns: Type Description bool True if the api targeted in the deploy is the same as the platform we use","title":"check_api()"},{"location":"Utils/decorators/","text":"Babylon.utils.decorators describe_dry_run ( description ) Add a dry run description for the decorated call Parameters: Name Type Description Default description str description to de displayed during dry runs (accepts markdown content) required get_from_deploy_config ( yaml_key ) deploy config file get_from_platform_config ( yaml_key ) platform config file insert_argument ( getter ) Decorator calling a getter with an argument and storing the result as an inserted argument Parameters: Name Type Description Default getter Callable [[ str ], Any ] function required prepend_doc_with_ascii ( func ) Decorator used to add a babylon ascii art in the documentation of a function Parameters: Name Type Description Default func Callable [..., Any ] The function being decorated required requires_external_program ( program_name ) Decorator allowing to check if a specific executable is available. If the check is failed the command won't run, and following checks won't be done Parameters: Name Type Description Default program_name str the name of the required program required timing_decorator ( func ) Decorator adding timings before and after the run of a function Parameters: Name Type Description Default func Callable [..., Any ] The function being decorated required working_dir_requires_file ( file_path , arg_name = None ) Decorator allowing to check if the working_dir has a specific file. If the check is failed the command won't run, and following checks won't be done Parameters: Name Type Description Default file_path str the path in the working_dir to the required file required arg_name Optional [ str ] Optional parameter that if set will send the effective path of the required file to the given arg None working_dir_requires_yaml_key ( yaml_path , yaml_key , arg_name = None ) Decorator allowing to check if the working_dir has specific key in a yaml file. If the check is failed the command won't run, and following checks won't be done Parameters: Name Type Description Default yaml_path str the path in the working_dir to the yaml file required yaml_key str the required key required arg_name Optional [ str ] optional parameter that will send the value of the yaml key to the given arg of the function None","title":"Decorators"},{"location":"Utils/decorators/#Babylon.utils.decorators","text":"","title":"decorators"},{"location":"Utils/decorators/#Babylon.utils.decorators.describe_dry_run","text":"Add a dry run description for the decorated call Parameters: Name Type Description Default description str description to de displayed during dry runs (accepts markdown content) required","title":"describe_dry_run()"},{"location":"Utils/decorators/#Babylon.utils.decorators.get_from_deploy_config","text":"deploy config file","title":"get_from_deploy_config()"},{"location":"Utils/decorators/#Babylon.utils.decorators.get_from_platform_config","text":"platform config file","title":"get_from_platform_config()"},{"location":"Utils/decorators/#Babylon.utils.decorators.insert_argument","text":"Decorator calling a getter with an argument and storing the result as an inserted argument Parameters: Name Type Description Default getter Callable [[ str ], Any ] function required","title":"insert_argument()"},{"location":"Utils/decorators/#Babylon.utils.decorators.prepend_doc_with_ascii","text":"Decorator used to add a babylon ascii art in the documentation of a function Parameters: Name Type Description Default func Callable [..., Any ] The function being decorated required","title":"prepend_doc_with_ascii()"},{"location":"Utils/decorators/#Babylon.utils.decorators.requires_external_program","text":"Decorator allowing to check if a specific executable is available. If the check is failed the command won't run, and following checks won't be done Parameters: Name Type Description Default program_name str the name of the required program required","title":"requires_external_program()"},{"location":"Utils/decorators/#Babylon.utils.decorators.timing_decorator","text":"Decorator adding timings before and after the run of a function Parameters: Name Type Description Default func Callable [..., Any ] The function being decorated required","title":"timing_decorator()"},{"location":"Utils/decorators/#Babylon.utils.decorators.working_dir_requires_file","text":"Decorator allowing to check if the working_dir has a specific file. If the check is failed the command won't run, and following checks won't be done Parameters: Name Type Description Default file_path str the path in the working_dir to the required file required arg_name Optional [ str ] Optional parameter that if set will send the effective path of the required file to the given arg None","title":"working_dir_requires_file()"},{"location":"Utils/decorators/#Babylon.utils.decorators.working_dir_requires_yaml_key","text":"Decorator allowing to check if the working_dir has specific key in a yaml file. If the check is failed the command won't run, and following checks won't be done Parameters: Name Type Description Default yaml_path str the path in the working_dir to the yaml file required yaml_key str the required key required arg_name Optional [ str ] optional parameter that will send the value of the yaml key to the given arg of the function None","title":"working_dir_requires_yaml_key()"},{"location":"Utils/others/","text":"Other utils Babylon.utils.interactive ask_for_group ( prompt , exists = False ) Will prompt the user to get a group Parameters: Name Type Description Default prompt str Which text should be prompted to the user ? required exists bool Should the group exists ? False Returns: Type Description list [ str ] the list of subgroups composing the path to the group confirm_deletion ( entity_type , entity_id ) Ask for confirmation for deletion of an object Parameters: Name Type Description Default entity_type str Entity type required entity_id str Entity ID required Returns: Type Description bool Should execution continue ? element_to_str ( element , actual = None ) Add a box before the element to display Box will be ticked if element == actual Parameters: Name Type Description Default element Any The element to display required actual Optional [ Any ] an element to compare the actual element None Returns: Type Description a string representation of the element prefixed with a box if actual is present select_from_list ( elements , actual = None ) Start a prompt with 3 retries to select an element in a list Parameters: Name Type Description Default elements list [ Any ] list of elements to chose required actual Optional [ Any ] an element that can be part of the list which is the current choice None Returns: Type Description Optional [ Any ] The element selected by the user Babylon.utils.logging MultiLineHandler Bases: rich . logging . RichHandler Simple multiple line Handler for logging. Will separate multiline logs and emit them one line at a time Babylon.utils.yaml_utils compare_yaml_keys ( template_yaml , target_yaml ) Compare two yaml files and return the different keys they contain Parameters: Name Type Description Default template_yaml pathlib . Path Yaml file considered as the main file required target_yaml pathlib . Path Yaml file to be compared to the template required Returns: Type Description tuple [ set , set ] 2 sets of keys : - missing_keys : the keys from the template missing from the target - superfluous_keys: the keys from the target that are not in the template complete_yaml ( template_yaml , target_yaml ) Will add missing element from template in target Parameters: Name Type Description Default template_yaml pathlib . Path Yaml file considered as the main file required target_yaml pathlib . Path Yaml file to be compared to the template required Returns: Type Description Nothing read_yaml_key ( yaml_file , key ) Will read a key from a yaml file and return the value Parameters: Name Type Description Default yaml_file pathlib . Path path to the file to open required key str key to load required Returns: Type Description Optional [ object ] value of the key if found else None write_yaml_value ( yaml_file , key , value ) This function aloow to update a YAML file values Parameters: Name Type Description Default yaml_file pathlib . Path path to the file to open required key str key to load required value str the new value of the key required Returns: Type Description None None Babylon.utils.string is_valid_command_name ( string ) Check if a given string is a valid command name Parameters: Name Type Description Default string str the string to check required Returns: Type Description bool True if the string is a valid command name to_header_line ( string ) Convert a string to a header line of maximum length of MAX_LINE_LENGTH will center the string between - to show a delimitation Parameters: Name Type Description Default string str the string to transform required Returns: Type Description str the string centered with - padding","title":"Others"},{"location":"Utils/others/#other-utils","text":"","title":"Other utils"},{"location":"Utils/others/#Babylon.utils.interactive","text":"","title":"interactive"},{"location":"Utils/others/#Babylon.utils.interactive.ask_for_group","text":"Will prompt the user to get a group Parameters: Name Type Description Default prompt str Which text should be prompted to the user ? required exists bool Should the group exists ? False Returns: Type Description list [ str ] the list of subgroups composing the path to the group","title":"ask_for_group()"},{"location":"Utils/others/#Babylon.utils.interactive.confirm_deletion","text":"Ask for confirmation for deletion of an object Parameters: Name Type Description Default entity_type str Entity type required entity_id str Entity ID required Returns: Type Description bool Should execution continue ?","title":"confirm_deletion()"},{"location":"Utils/others/#Babylon.utils.interactive.element_to_str","text":"Add a box before the element to display Box will be ticked if element == actual Parameters: Name Type Description Default element Any The element to display required actual Optional [ Any ] an element to compare the actual element None Returns: Type Description a string representation of the element prefixed with a box if actual is present","title":"element_to_str()"},{"location":"Utils/others/#Babylon.utils.interactive.select_from_list","text":"Start a prompt with 3 retries to select an element in a list Parameters: Name Type Description Default elements list [ Any ] list of elements to chose required actual Optional [ Any ] an element that can be part of the list which is the current choice None Returns: Type Description Optional [ Any ] The element selected by the user","title":"select_from_list()"},{"location":"Utils/others/#Babylon.utils.logging","text":"","title":"logging"},{"location":"Utils/others/#Babylon.utils.logging.MultiLineHandler","text":"Bases: rich . logging . RichHandler Simple multiple line Handler for logging. Will separate multiline logs and emit them one line at a time","title":"MultiLineHandler"},{"location":"Utils/others/#Babylon.utils.yaml_utils","text":"","title":"yaml_utils"},{"location":"Utils/others/#Babylon.utils.yaml_utils.compare_yaml_keys","text":"Compare two yaml files and return the different keys they contain Parameters: Name Type Description Default template_yaml pathlib . Path Yaml file considered as the main file required target_yaml pathlib . Path Yaml file to be compared to the template required Returns: Type Description tuple [ set , set ] 2 sets of keys : - missing_keys : the keys from the template missing from the target - superfluous_keys: the keys from the target that are not in the template","title":"compare_yaml_keys()"},{"location":"Utils/others/#Babylon.utils.yaml_utils.complete_yaml","text":"Will add missing element from template in target Parameters: Name Type Description Default template_yaml pathlib . Path Yaml file considered as the main file required target_yaml pathlib . Path Yaml file to be compared to the template required Returns: Type Description Nothing","title":"complete_yaml()"},{"location":"Utils/others/#Babylon.utils.yaml_utils.read_yaml_key","text":"Will read a key from a yaml file and return the value Parameters: Name Type Description Default yaml_file pathlib . Path path to the file to open required key str key to load required Returns: Type Description Optional [ object ] value of the key if found else None","title":"read_yaml_key()"},{"location":"Utils/others/#Babylon.utils.yaml_utils.write_yaml_value","text":"This function aloow to update a YAML file values Parameters: Name Type Description Default yaml_file pathlib . Path path to the file to open required key str key to load required value str the new value of the key required Returns: Type Description None None","title":"write_yaml_value()"},{"location":"Utils/others/#Babylon.utils.string","text":"","title":"string"},{"location":"Utils/others/#Babylon.utils.string.is_valid_command_name","text":"Check if a given string is a valid command name Parameters: Name Type Description Default string str the string to check required Returns: Type Description bool True if the string is a valid command name","title":"is_valid_command_name()"},{"location":"Utils/others/#Babylon.utils.string.to_header_line","text":"Convert a string to a header line of maximum length of MAX_LINE_LENGTH will center the string between - to show a delimitation Parameters: Name Type Description Default string str the string to transform required Returns: Type Description str the string centered with - padding","title":"to_header_line()"},{"location":"Utils/typing/","text":"Specific types QueryType This type adds a capacity to easliy use file content as parameter to function. Example in a command The following code is an example of use of the type: from Babylon.utils.typing import QueryType import click @click.command() @click.argument(\"my_arg\", type=QueryType()) def my_call(my_arg): print(\"The value of my arg is :\") print(my_arg) Usage The QueryType accepts the following syntaxes : %deploy%<JMESPath Query> : This will apply the given JMESPath query to the deploy config file and send the result as an argument instead. %platform%<JMESPath Query> : Same as above but will get applied to the platform config file. %workdir[File/Path]%<JMESPath Query> : This syntax will apply the JMESPath query to the give file in the working directory Example use Using the previously defined command and the following example config files # Deploy solution_id: \"MySolution\" # Platform organization_id: \"MyOrganization\" We can except the following results : my_call %deploy%solution_id # The value of my arg is : # MySolution my_call %platform%* # The value of my arg is : # ['MyOrganization'] For more information on the JMESPath syntax I invite you to check the following website : JMESPath.org Babylon.utils.typing.QueryType Bases: ParamType shell_complete ( ctx , param , incomplete ) Allow auto-completion of the parameter Parameters: Name Type Description Default ctx Context click context used to send this parameter value required param Parameter name of the parameter to be completed required incomplete str actual value to complete required Returns: Type Description List [ CompletionItem ] a list of item that could be the completed version of the parameter convert ( value , param , ctx ) Convert the value of the parameter given in the console to the one passed to the underlying function Parameters: Name Type Description Default value Any the value sent by the console required param Optional [ Parameter ] the name of the parameter required ctx Optional [ Context ] the click context that lead to this call required Returns: Type Description Any the value of the parameter that should be sent to the function","title":"typing"},{"location":"Utils/typing/#specific-types","text":"","title":"Specific types"},{"location":"Utils/typing/#querytype","text":"This type adds a capacity to easliy use file content as parameter to function.","title":"QueryType"},{"location":"Utils/typing/#example-in-a-command","text":"The following code is an example of use of the type: from Babylon.utils.typing import QueryType import click @click.command() @click.argument(\"my_arg\", type=QueryType()) def my_call(my_arg): print(\"The value of my arg is :\") print(my_arg)","title":"Example in a command"},{"location":"Utils/typing/#usage","text":"The QueryType accepts the following syntaxes : %deploy%<JMESPath Query> : This will apply the given JMESPath query to the deploy config file and send the result as an argument instead. %platform%<JMESPath Query> : Same as above but will get applied to the platform config file. %workdir[File/Path]%<JMESPath Query> : This syntax will apply the JMESPath query to the give file in the working directory","title":"Usage"},{"location":"Utils/typing/#example-use","text":"Using the previously defined command and the following example config files # Deploy solution_id: \"MySolution\" # Platform organization_id: \"MyOrganization\" We can except the following results : my_call %deploy%solution_id # The value of my arg is : # MySolution my_call %platform%* # The value of my arg is : # ['MyOrganization'] For more information on the JMESPath syntax I invite you to check the following website : JMESPath.org","title":"Example use"},{"location":"Utils/typing/#Babylon.utils.typing.QueryType","text":"Bases: ParamType","title":"QueryType"},{"location":"Utils/typing/#Babylon.utils.typing.QueryType.shell_complete","text":"Allow auto-completion of the parameter Parameters: Name Type Description Default ctx Context click context used to send this parameter value required param Parameter name of the parameter to be completed required incomplete str actual value to complete required Returns: Type Description List [ CompletionItem ] a list of item that could be the completed version of the parameter","title":"shell_complete()"},{"location":"Utils/typing/#Babylon.utils.typing.QueryType.convert","text":"Convert the value of the parameter given in the console to the one passed to the underlying function Parameters: Name Type Description Default value Any the value sent by the console required param Optional [ Parameter ] the name of the parameter required ctx Optional [ Context ] the click context that lead to this call required Returns: Type Description Any the value of the parameter that should be sent to the function","title":"convert()"},{"location":"Utils/working_dir/","text":"WorkingDir Simple class describing a working_dir for Babylon use copy_template () Initialize the working_dir by making a copy of the template compare_to_template ( update_if_error = False ) Check if the current working_dir is valid (aka: has all folders and files required by the template) Parameters: Name Type Description Default update_if_error bool Replace error logs by info and update the current working_dir with missing elements False Returns: Type Description bool Is the working_dir valid ? create_zip ( zip_path , force_overwrite = False ) Create a zip file of the working_dir to the given path Parameters: Name Type Description Default zip_path str A path to zip the working_dir (if a folder is given will name the zip \"working_dir.zip\" required force_overwrite bool should existing path be ignored and replaced ? False Returns: Type Description Optional [ str ] The effective path of the zip get_file ( file_path ) Will return the effective path of a file in the working_dir Parameters: Name Type Description Default file_path str the relative path of the file in the working_dir required Returns: Type Description pathlib . Path the path to the file get_yaml_key ( yaml_path , yaml_key ) Will get a key from a yaml in the working_dir Parameters: Name Type Description Default yaml_path str path to the yaml file in the working_dir required yaml_key str key to get in the yaml required Returns: Type Description Optional [ object ] the content of the yaml key","title":"Working Directory"},{"location":"Utils/working_dir/#Babylon.utils.working_dir.WorkingDir","text":"Simple class describing a working_dir for Babylon use","title":"WorkingDir"},{"location":"Utils/working_dir/#Babylon.utils.working_dir.WorkingDir.copy_template","text":"Initialize the working_dir by making a copy of the template","title":"copy_template()"},{"location":"Utils/working_dir/#Babylon.utils.working_dir.WorkingDir.compare_to_template","text":"Check if the current working_dir is valid (aka: has all folders and files required by the template) Parameters: Name Type Description Default update_if_error bool Replace error logs by info and update the current working_dir with missing elements False Returns: Type Description bool Is the working_dir valid ?","title":"compare_to_template()"},{"location":"Utils/working_dir/#Babylon.utils.working_dir.WorkingDir.create_zip","text":"Create a zip file of the working_dir to the given path Parameters: Name Type Description Default zip_path str A path to zip the working_dir (if a folder is given will name the zip \"working_dir.zip\" required force_overwrite bool should existing path be ignored and replaced ? False Returns: Type Description Optional [ str ] The effective path of the zip","title":"create_zip()"},{"location":"Utils/working_dir/#Babylon.utils.working_dir.WorkingDir.get_file","text":"Will return the effective path of a file in the working_dir Parameters: Name Type Description Default file_path str the relative path of the file in the working_dir required Returns: Type Description pathlib . Path the path to the file","title":"get_file()"},{"location":"Utils/working_dir/#Babylon.utils.working_dir.WorkingDir.get_yaml_key","text":"Will get a key from a yaml in the working_dir Parameters: Name Type Description Default yaml_path str path to the yaml file in the working_dir required yaml_key str key to get in the yaml required Returns: Type Description Optional [ object ] the content of the yaml key","title":"get_yaml_key()"},{"location":"plugins/devtools/","text":"You can activate the plugin via the command babylon config plugin add plugins/dev_tools dev-tools Plugin used to simplify some development operations Usage: dev-tools [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default -p , --plugin text N/A None --help boolean Show this message and exit. False Subcommands initialize-command : Will initialize code for COMMAND_NAME and make it available in GROUP_NAME initialize-group : Will initialize code for GROUP_NAME and make it available initialize-plugin : Will initialize PLUGIN_NAME in PLUGIN_FOLDER list-required-keys : Check code base to list platform and deployment keys move-group : Command made to move groups parameter-value : Will display the value of the given QueryType argument rename-command : Will rename OLD_COMMAND_NAME to NEW_COMMAND_NAME in GROUP_NAME tests : Sub group for test commands dev-tools initialize-command Will initialize code for COMMAND_NAME and make it available in GROUP_NAME COMMAND_NAME and GROUP_NAME must only contain alphanumeric characters or - Usage: dev-tools initialize-command [OPTIONS] [GROUP_NAME]... COMMAND_NAME Options: Name Type Description Default --help boolean Show this message and exit. False dev-tools initialize-group Will initialize code for GROUP_NAME and make it available GROUP_NAME must only contain alphanumeric characters or - Usage: dev-tools initialize-group [OPTIONS] [GROUP_NAME]... Options: Name Type Description Default --help boolean Show this message and exit. False dev-tools initialize-plugin Will initialize PLUGIN_NAME in PLUGIN_FOLDER Usage: dev-tools initialize-plugin [OPTIONS] PLUGIN_FOLDER PLUGIN_NAME Options: Name Type Description Default -a , --add boolean Add the created plugin to the config. False --help boolean Show this message and exit. False dev-tools list-required-keys Check code base to list platform and deployment keys if GROUP_NAME is defined will limit the check to the given group Usage: dev-tools list-required-keys [OPTIONS] [GROUP_NAME]... Options: Name Type Description Default --help boolean Show this message and exit. False dev-tools move-group Command made to move groups Usage: dev-tools move-group [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False dev-tools parameter-value Will display the value of the given QueryType argument Usage: dev-tools parameter-value [OPTIONS] ARG Options: Name Type Description Default --help boolean Show this message and exit. False dev-tools rename-command Will rename OLD_COMMAND_NAME to NEW_COMMAND_NAME in GROUP_NAME COMMAND_NAME and GROUP_NAME must only contain alphanumeric characters or - Usage: dev-tools rename-command [OPTIONS] [GROUP_NAME]... OLD_COMMAND_NAME NEW_COMMAND_NAME Options: Name Type Description Default --help boolean Show this message and exit. False dev-tools tests Sub group for test commands Usage: dev-tools tests [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands commands-to-test : List commands that require testing since GIT_REF how-to-test-command : Will go through the test organization to display the tests of the given COMMAND initialize-test-organization : Will update the test folder with missing files for new commands dev-tools tests commands-to-test List commands that require testing since GIT_REF Usage: dev-tools tests commands-to-test [OPTIONS] GIT_REF Options: Name Type Description Default -o , --output text Target file to write list of commands to be tested None --help boolean Show this message and exit. False dev-tools tests how-to-test-command Will go through the test organization to display the tests of the given COMMAND Usage: dev-tools tests how-to-test-command [OPTIONS] [COMMAND]... Options: Name Type Description Default --help boolean Show this message and exit. False dev-tools tests initialize-test-organization Will update the test folder with missing files for new commands Usage: dev-tools tests initialize-test-organization [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False","title":"Dev-tools"},{"location":"plugins/devtools/#dev-tools","text":"Plugin used to simplify some development operations Usage: dev-tools [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default -p , --plugin text N/A None --help boolean Show this message and exit. False Subcommands initialize-command : Will initialize code for COMMAND_NAME and make it available in GROUP_NAME initialize-group : Will initialize code for GROUP_NAME and make it available initialize-plugin : Will initialize PLUGIN_NAME in PLUGIN_FOLDER list-required-keys : Check code base to list platform and deployment keys move-group : Command made to move groups parameter-value : Will display the value of the given QueryType argument rename-command : Will rename OLD_COMMAND_NAME to NEW_COMMAND_NAME in GROUP_NAME tests : Sub group for test commands","title":"dev-tools"},{"location":"plugins/devtools/#dev-tools-initialize-command","text":"Will initialize code for COMMAND_NAME and make it available in GROUP_NAME COMMAND_NAME and GROUP_NAME must only contain alphanumeric characters or - Usage: dev-tools initialize-command [OPTIONS] [GROUP_NAME]... COMMAND_NAME Options: Name Type Description Default --help boolean Show this message and exit. False","title":"initialize-command"},{"location":"plugins/devtools/#dev-tools-initialize-group","text":"Will initialize code for GROUP_NAME and make it available GROUP_NAME must only contain alphanumeric characters or - Usage: dev-tools initialize-group [OPTIONS] [GROUP_NAME]... Options: Name Type Description Default --help boolean Show this message and exit. False","title":"initialize-group"},{"location":"plugins/devtools/#dev-tools-initialize-plugin","text":"Will initialize PLUGIN_NAME in PLUGIN_FOLDER Usage: dev-tools initialize-plugin [OPTIONS] PLUGIN_FOLDER PLUGIN_NAME Options: Name Type Description Default -a , --add boolean Add the created plugin to the config. False --help boolean Show this message and exit. False","title":"initialize-plugin"},{"location":"plugins/devtools/#dev-tools-list-required-keys","text":"Check code base to list platform and deployment keys if GROUP_NAME is defined will limit the check to the given group Usage: dev-tools list-required-keys [OPTIONS] [GROUP_NAME]... Options: Name Type Description Default --help boolean Show this message and exit. False","title":"list-required-keys"},{"location":"plugins/devtools/#dev-tools-move-group","text":"Command made to move groups Usage: dev-tools move-group [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False","title":"move-group"},{"location":"plugins/devtools/#dev-tools-parameter-value","text":"Will display the value of the given QueryType argument Usage: dev-tools parameter-value [OPTIONS] ARG Options: Name Type Description Default --help boolean Show this message and exit. False","title":"parameter-value"},{"location":"plugins/devtools/#dev-tools-rename-command","text":"Will rename OLD_COMMAND_NAME to NEW_COMMAND_NAME in GROUP_NAME COMMAND_NAME and GROUP_NAME must only contain alphanumeric characters or - Usage: dev-tools rename-command [OPTIONS] [GROUP_NAME]... OLD_COMMAND_NAME NEW_COMMAND_NAME Options: Name Type Description Default --help boolean Show this message and exit. False","title":"rename-command"},{"location":"plugins/devtools/#dev-tools-tests","text":"Sub group for test commands Usage: dev-tools tests [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands commands-to-test : List commands that require testing since GIT_REF how-to-test-command : Will go through the test organization to display the tests of the given COMMAND initialize-test-organization : Will update the test folder with missing files for new commands","title":"tests"},{"location":"plugins/devtools/#dev-tools-tests-commands-to-test","text":"List commands that require testing since GIT_REF Usage: dev-tools tests commands-to-test [OPTIONS] GIT_REF Options: Name Type Description Default -o , --output text Target file to write list of commands to be tested None --help boolean Show this message and exit. False","title":"commands-to-test"},{"location":"plugins/devtools/#dev-tools-tests-how-to-test-command","text":"Will go through the test organization to display the tests of the given COMMAND Usage: dev-tools tests how-to-test-command [OPTIONS] [COMMAND]... Options: Name Type Description Default --help boolean Show this message and exit. False","title":"how-to-test-command"},{"location":"plugins/devtools/#dev-tools-tests-initialize-test-organization","text":"Will update the test folder with missing files for new commands Usage: dev-tools tests initialize-test-organization [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False","title":"initialize-test-organization"}]}